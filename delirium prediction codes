{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "12d658f3-25a7-4d4b-9ba2-db0cd23ba1dd",
   "metadata": {},
   "source": [
    "# ↓↓↓↓↓↓↓↓↓保守正确的代码（SVM，CatBoost未调）↓↓↓↓↓↓↓↓↓     缺失值删除>20%，采用SMOTE过采样，就用7天的数据！\n",
    "# threshold-youden作为最佳临界点\n",
    "# 对于树模型：先特征筛选，然后直接输入建模；其他模型先热编码再特征筛选（Select K Best），然后输入建模。\n",
    "# 用的数据是没有用GCS_MIN做筛选的数据，包含入ICU一天后的GCS_MIN和RASS_MIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1602de9b-8a7e-4e26-aaa1-a29d7e52d181",
   "metadata": {},
   "outputs": [],
   "source": [
    "#↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓目前为止最正确的代码↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓使用全部数据已经跑出结果，不要改动"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "84f51a3f-737f-48a3-8f2f-c47dc0531a22",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "可用CPU核心数: 22，使用核心数: 21\n",
      "未检测到独立GPU，将使用CPU加速\n",
      "================================================================================\n",
      "开始模型训练 - 使用最佳阈值分类 - 日志保存在: model_training_log_20250915_224737.txt\n",
      "================================================================================\n",
      "加载数据...\n",
      "训练集大小: 13225, 验证集大小: 3307, 测试集大小: 4133\n",
      "正样本比例 - 训练集: 0.2019, 验证集: 0.2020, 测试集: 0.2018\n",
      "\n",
      "==================================================\n",
      "阶段1: 初步特征筛选\n",
      "==================================================\n",
      "初始特征筛选后保留特征数: 51\n",
      "单变量筛选后保留特征数: 30\n",
      "警告：剔除高相关特征后只剩0个特征，少于最小值20\n",
      "将保留所有特征\n",
      "剔除高相关特征后保留特征数: 30\n",
      "\n",
      "==================================================\n",
      "阶段2: 医疗核心变量强化\n",
      "==================================================\n",
      "强制保留的核心临床特征: ['gcs_min', 'rass_min']\n",
      "警告：Boruta只选择了12个特征，少于最小值30\n",
      "将补充一些重要特征\n",
      "Boruta筛选后特征数: 30\n",
      "添加核心特征后特征数: 30\n",
      "最终保留特征数: 30\n",
      "\n",
      "最终特征数: 29\n",
      "数值特征: ['potassium', 'sofa_score', 'admission_age', 'hemoglobin', 'aniongap', 'sapsii', 'rass_min', 'sodium', 'hematocrit', 'temperature', 'charlson_comorbidity_index', 'lods', 'bun', 'sbp', 'mcv', 'gcs_min', 'sirs', 'apsiii', 'chloride', 'oasis', 'heart_rate', 'spo2']\n",
      "分类特征: ['invasive_ventilation_24h', 'hypertension', 'chronic_renal_disease', 'chronic_nerval_system_disease', 'chronic_liver_disease', 'chronic_heart_disease', 'chronic_lung_disease']\n",
      "\n",
      "==================================================\n",
      "阶段3: 模型训练\n",
      "==================================================\n",
      "\n",
      "==================================================\n",
      "处理模型: Logistic Regression\n",
      "==================================================\n",
      "非树模型 Logistic Regression 使用筛选后的特征\n",
      "使用线性模型预处理流程：先独热编码，再进行特征选择\n",
      "线性模型预处理后特征数量: 30\n",
      "平衡后训练集大小: 21078 (正样本: 0.5000)\n",
      "开始网格搜索: Logistic Regression...\n",
      "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n",
      "最佳参数: {'C': 1, 'class_weight': {0: 1, 1: 0.8}, 'penalty': 'l2', 'solver': 'saga'}\n",
      "交叉验证AUC: 0.7409\n",
      "评估模型: Logistic Regression...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.4486\n",
      "\n",
      "验证集结果 - Logistic Regression:\n",
      "阈值: 0.4486, AUC: 0.7404, F1: 0.4669, 准确率: 0.6783\n",
      "测试集结果 - Logistic Regression:\n",
      "阈值: 0.4486, AUC: 0.7175, F1: 0.4450, 准确率: 0.6765\n",
      "\n",
      "==================================================\n",
      "处理模型: Ridge Regression\n",
      "==================================================\n",
      "非树模型 Ridge Regression 使用筛选后的特征\n",
      "使用线性模型预处理流程：先独热编码，再进行特征选择\n",
      "线性模型预处理后特征数量: 30\n",
      "平衡后训练集大小: 21078 (正样本: 0.5000)\n",
      "开始网格搜索: Ridge Regression...\n",
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "最佳参数: {'estimator__alpha': 10}\n",
      "交叉验证AUC: 0.7404\n",
      "评估模型: Ridge Regression...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.4845\n",
      "\n",
      "验证集结果 - Ridge Regression:\n",
      "阈值: 0.4845, AUC: 0.7403, F1: 0.4667, 准确率: 0.6897\n",
      "测试集结果 - Ridge Regression:\n",
      "阈值: 0.4845, AUC: 0.7183, F1: 0.4459, 准确率: 0.6867\n",
      "\n",
      "==================================================\n",
      "处理模型: SVM\n",
      "==================================================\n",
      "非树模型 SVM 使用筛选后的特征\n",
      "使用线性模型预处理流程：先独热编码，再进行特征选择\n",
      "线性模型预处理后特征数量: 30\n",
      "平衡后训练集大小: 21078 (正样本: 0.5000)\n",
      "开始网格搜索: SVM...\n",
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "最佳参数: {'estimator__C': 10, 'estimator__class_weight': 'balanced', 'estimator__gamma': 'scale', 'estimator__kernel': 'rbf'}\n",
      "交叉验证AUC: 0.9136\n",
      "评估模型: SVM...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.3126\n",
      "\n",
      "验证集结果 - SVM:\n",
      "阈值: 0.3126, AUC: 0.7286, F1: 0.4760, 准确率: 0.7330\n",
      "测试集结果 - SVM:\n",
      "阈值: 0.3126, AUC: 0.7174, F1: 0.4541, 准确率: 0.7278\n",
      "\n",
      "==================================================\n",
      "处理模型: KNN\n",
      "==================================================\n",
      "非树模型 KNN 使用筛选后的特征\n",
      "使用线性模型预处理流程：先独热编码，再进行特征选择\n",
      "线性模型预处理后特征数量: 30\n",
      "KNN跳过过采样处理\n",
      "开始网格搜索: KNN...\n",
      "Fitting 5 folds for each of 3 candidates, totalling 15 fits\n",
      "最佳参数: {'estimator__n_neighbors': 11, 'estimator__p': 2, 'estimator__weights': 'distance'}\n",
      "交叉验证AUC: 0.7171\n",
      "评估模型: KNN...\n",
      "使用阈值方法 'f1' 找到的最佳阈值: 0.2144\n",
      "\n",
      "验证集结果 - KNN:\n",
      "阈值: 0.2144, AUC: 0.7147, F1: 0.4567, 准确率: 0.6870\n",
      "测试集结果 - KNN:\n",
      "阈值: 0.2144, AUC: 0.7188, F1: 0.4402, 准确率: 0.6830\n",
      "\n",
      "==================================================\n",
      "处理模型: XGBoost\n",
      "==================================================\n",
      "树模型 XGBoost 使用所有原始特征\n",
      "树模型预处理后特征数量: 50\n",
      "平衡后训练集大小: 21096 (正样本: 0.5000)\n",
      "开始网格搜索: XGBoost...\n",
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "最佳参数: {'colsample_bytree': 0.8, 'gamma': 0.1, 'learning_rate': 0.005, 'max_depth': 12, 'n_estimators': 4000, 'reg_alpha': 0.1, 'reg_lambda': 0.1, 'scale_pos_weight': 0.8, 'subsample': 0.7}\n",
      "交叉验证AUC: 0.9580\n",
      "评估模型: XGBoost...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.1037\n",
      "\n",
      "验证集结果 - XGBoost:\n",
      "阈值: 0.1037, AUC: 0.7947, F1: 0.5261, 准确率: 0.7533\n",
      "测试集结果 - XGBoost:\n",
      "阈值: 0.1037, AUC: 0.7805, F1: 0.5002, 准确率: 0.7564\n",
      "\n",
      "==================================================\n",
      "处理模型: LightGBM\n",
      "==================================================\n",
      "树模型 LightGBM 使用所有原始特征\n",
      "树模型预处理后特征数量: 50\n",
      "平衡后训练集大小: 21096 (正样本: 0.5000)\n",
      "开始网格搜索: LightGBM...\n",
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "[LightGBM] [Warning] min_data_in_leaf is set=15, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=15\n",
      "[LightGBM] [Warning] feature_fraction is set=0.8, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.8\n",
      "[LightGBM] [Warning] lambda_l1 is set=0, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0\n",
      "[LightGBM] [Warning] lambda_l2 is set=0.1, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.1\n",
      "[LightGBM] [Warning] min_data_in_leaf is set=15, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=15\n",
      "[LightGBM] [Warning] feature_fraction is set=0.8, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.8\n",
      "[LightGBM] [Warning] lambda_l1 is set=0, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0\n",
      "[LightGBM] [Warning] lambda_l2 is set=0.1, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.1\n",
      "[LightGBM] [Info] Number of positive: 10548, number of negative: 10548\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002782 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 10228\n",
      "[LightGBM] [Info] Number of data points in the train set: 21096, number of used features: 50\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "最佳参数: {'feature_fraction': 0.8, 'lambda_l1': 0, 'lambda_l2': 0.1, 'learning_rate': 0.005, 'max_depth': -1, 'min_data_in_leaf': 15, 'n_estimators': 2000, 'num_leaves': 128, 'scale_pos_weight': 0.8}\n",
      "交叉验证AUC: 0.9549\n",
      "评估模型: LightGBM...\n",
      "[LightGBM] [Warning] min_data_in_leaf is set=15, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=15\n",
      "[LightGBM] [Warning] feature_fraction is set=0.8, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.8\n",
      "[LightGBM] [Warning] lambda_l1 is set=0, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0\n",
      "[LightGBM] [Warning] lambda_l2 is set=0.1, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.1\n",
      "[LightGBM] [Warning] min_data_in_leaf is set=15, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=15\n",
      "[LightGBM] [Warning] feature_fraction is set=0.8, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.8\n",
      "[LightGBM] [Warning] lambda_l1 is set=0, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0\n",
      "[LightGBM] [Warning] lambda_l2 is set=0.1, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.1\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.1507\n",
      "\n",
      "验证集结果 - LightGBM:\n",
      "阈值: 0.1507, AUC: 0.7892, F1: 0.5151, 准确率: 0.7272\n",
      "测试集结果 - LightGBM:\n",
      "阈值: 0.1507, AUC: 0.7817, F1: 0.4998, 准确率: 0.7326\n",
      "\n",
      "==================================================\n",
      "处理模型: CatBoost\n",
      "==================================================\n",
      "树模型 CatBoost 使用所有原始特征\n",
      "树模型预处理后特征数量: 50\n",
      "平衡后训练集大小: 21096 (正样本: 0.5000)\n",
      "开始网格搜索: CatBoost...\n",
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "0:\tlearn: 0.6880784\ttotal: 130ms\tremaining: 5m 23s\n",
      "1:\tlearn: 0.6841867\ttotal: 146ms\tremaining: 3m 2s\n",
      "2:\tlearn: 0.6796559\ttotal: 163ms\tremaining: 2m 15s\n",
      "3:\tlearn: 0.6749755\ttotal: 179ms\tremaining: 1m 51s\n",
      "4:\tlearn: 0.6703947\ttotal: 195ms\tremaining: 1m 37s\n",
      "5:\tlearn: 0.6671992\ttotal: 211ms\tremaining: 1m 27s\n",
      "6:\tlearn: 0.6633824\ttotal: 227ms\tremaining: 1m 20s\n",
      "7:\tlearn: 0.6592686\ttotal: 243ms\tremaining: 1m 15s\n",
      "8:\tlearn: 0.6549160\ttotal: 260ms\tremaining: 1m 11s\n",
      "9:\tlearn: 0.6509862\ttotal: 276ms\tremaining: 1m 8s\n",
      "10:\tlearn: 0.6473221\ttotal: 303ms\tremaining: 1m 8s\n",
      "11:\tlearn: 0.6434503\ttotal: 324ms\tremaining: 1m 7s\n",
      "12:\tlearn: 0.6402752\ttotal: 343ms\tremaining: 1m 5s\n",
      "13:\tlearn: 0.6364299\ttotal: 364ms\tremaining: 1m 4s\n",
      "14:\tlearn: 0.6330067\ttotal: 384ms\tremaining: 1m 3s\n",
      "15:\tlearn: 0.6296282\ttotal: 404ms\tremaining: 1m 2s\n",
      "16:\tlearn: 0.6261810\ttotal: 427ms\tremaining: 1m 2s\n",
      "17:\tlearn: 0.6229904\ttotal: 448ms\tremaining: 1m 1s\n",
      "18:\tlearn: 0.6192764\ttotal: 469ms\tremaining: 1m 1s\n",
      "19:\tlearn: 0.6154396\ttotal: 492ms\tremaining: 1m\n",
      "20:\tlearn: 0.6128815\ttotal: 513ms\tremaining: 1m\n",
      "21:\tlearn: 0.6101769\ttotal: 536ms\tremaining: 1m\n",
      "22:\tlearn: 0.6070276\ttotal: 560ms\tremaining: 1m\n",
      "23:\tlearn: 0.6044256\ttotal: 583ms\tremaining: 1m\n",
      "24:\tlearn: 0.6014515\ttotal: 605ms\tremaining: 59.9s\n",
      "25:\tlearn: 0.5992897\ttotal: 627ms\tremaining: 59.6s\n",
      "26:\tlearn: 0.5963908\ttotal: 649ms\tremaining: 59.5s\n",
      "27:\tlearn: 0.5942205\ttotal: 672ms\tremaining: 59.3s\n",
      "28:\tlearn: 0.5913028\ttotal: 695ms\tremaining: 59.2s\n",
      "29:\tlearn: 0.5888961\ttotal: 718ms\tremaining: 59.1s\n",
      "30:\tlearn: 0.5872754\ttotal: 739ms\tremaining: 58.9s\n",
      "31:\tlearn: 0.5846415\ttotal: 761ms\tremaining: 58.7s\n",
      "32:\tlearn: 0.5821276\ttotal: 783ms\tremaining: 58.5s\n",
      "33:\tlearn: 0.5800613\ttotal: 804ms\tremaining: 58.3s\n",
      "34:\tlearn: 0.5781154\ttotal: 825ms\tremaining: 58.1s\n",
      "35:\tlearn: 0.5756378\ttotal: 847ms\tremaining: 57.9s\n",
      "36:\tlearn: 0.5737603\ttotal: 866ms\tremaining: 57.7s\n",
      "37:\tlearn: 0.5720621\ttotal: 887ms\tremaining: 57.5s\n",
      "38:\tlearn: 0.5693571\ttotal: 909ms\tremaining: 57.4s\n",
      "39:\tlearn: 0.5674200\ttotal: 931ms\tremaining: 57.3s\n",
      "40:\tlearn: 0.5658304\ttotal: 950ms\tremaining: 57s\n",
      "41:\tlearn: 0.5640022\ttotal: 974ms\tremaining: 57s\n",
      "42:\tlearn: 0.5623409\ttotal: 996ms\tremaining: 56.9s\n",
      "43:\tlearn: 0.5604430\ttotal: 1.02s\tremaining: 56.8s\n",
      "44:\tlearn: 0.5588089\ttotal: 1.04s\tremaining: 56.6s\n",
      "45:\tlearn: 0.5572073\ttotal: 1.06s\tremaining: 56.5s\n",
      "46:\tlearn: 0.5553775\ttotal: 1.08s\tremaining: 56.4s\n",
      "47:\tlearn: 0.5539208\ttotal: 1.1s\tremaining: 56.3s\n",
      "48:\tlearn: 0.5522899\ttotal: 1.12s\tremaining: 56.3s\n",
      "49:\tlearn: 0.5505809\ttotal: 1.15s\tremaining: 56.3s\n",
      "50:\tlearn: 0.5488690\ttotal: 1.17s\tremaining: 56.2s\n",
      "51:\tlearn: 0.5469392\ttotal: 1.19s\tremaining: 56.1s\n",
      "52:\tlearn: 0.5452313\ttotal: 1.21s\tremaining: 56.1s\n",
      "53:\tlearn: 0.5440010\ttotal: 1.24s\tremaining: 56s\n",
      "54:\tlearn: 0.5419299\ttotal: 1.26s\tremaining: 55.9s\n",
      "55:\tlearn: 0.5401244\ttotal: 1.28s\tremaining: 55.9s\n",
      "56:\tlearn: 0.5383802\ttotal: 1.3s\tremaining: 55.8s\n",
      "57:\tlearn: 0.5366802\ttotal: 1.32s\tremaining: 55.8s\n",
      "58:\tlearn: 0.5353742\ttotal: 1.35s\tremaining: 55.8s\n",
      "59:\tlearn: 0.5335508\ttotal: 1.37s\tremaining: 55.7s\n",
      "60:\tlearn: 0.5323448\ttotal: 1.39s\tremaining: 55.7s\n",
      "61:\tlearn: 0.5309929\ttotal: 1.41s\tremaining: 55.6s\n",
      "62:\tlearn: 0.5291684\ttotal: 1.44s\tremaining: 55.6s\n",
      "63:\tlearn: 0.5277483\ttotal: 1.46s\tremaining: 55.6s\n",
      "64:\tlearn: 0.5265206\ttotal: 1.48s\tremaining: 55.6s\n",
      "65:\tlearn: 0.5251258\ttotal: 1.5s\tremaining: 55.5s\n",
      "66:\tlearn: 0.5238239\ttotal: 1.53s\tremaining: 55.5s\n",
      "67:\tlearn: 0.5226718\ttotal: 1.55s\tremaining: 55.5s\n",
      "68:\tlearn: 0.5217646\ttotal: 1.57s\tremaining: 55.4s\n",
      "69:\tlearn: 0.5205033\ttotal: 1.59s\tremaining: 55.4s\n",
      "70:\tlearn: 0.5193618\ttotal: 1.62s\tremaining: 55.3s\n",
      "71:\tlearn: 0.5179039\ttotal: 1.64s\tremaining: 55.3s\n",
      "72:\tlearn: 0.5166057\ttotal: 1.66s\tremaining: 55.3s\n",
      "73:\tlearn: 0.5151577\ttotal: 1.69s\tremaining: 55.3s\n",
      "74:\tlearn: 0.5139269\ttotal: 1.71s\tremaining: 55.3s\n",
      "75:\tlearn: 0.5129731\ttotal: 1.73s\tremaining: 55.3s\n",
      "76:\tlearn: 0.5116984\ttotal: 1.76s\tremaining: 55.3s\n",
      "77:\tlearn: 0.5096898\ttotal: 1.78s\tremaining: 55.3s\n",
      "78:\tlearn: 0.5085994\ttotal: 1.8s\tremaining: 55.3s\n",
      "79:\tlearn: 0.5074754\ttotal: 1.83s\tremaining: 55.3s\n",
      "80:\tlearn: 0.5062505\ttotal: 1.85s\tremaining: 55.2s\n",
      "81:\tlearn: 0.5046151\ttotal: 1.87s\tremaining: 55.1s\n",
      "82:\tlearn: 0.5034530\ttotal: 1.89s\tremaining: 55.1s\n",
      "83:\tlearn: 0.5024143\ttotal: 1.91s\tremaining: 55s\n",
      "84:\tlearn: 0.5013820\ttotal: 1.94s\tremaining: 55s\n",
      "85:\tlearn: 0.5003725\ttotal: 1.96s\tremaining: 54.9s\n",
      "86:\tlearn: 0.4989545\ttotal: 1.98s\tremaining: 54.9s\n",
      "87:\tlearn: 0.4979058\ttotal: 2s\tremaining: 54.9s\n",
      "88:\tlearn: 0.4965447\ttotal: 2.02s\tremaining: 54.9s\n",
      "89:\tlearn: 0.4955003\ttotal: 2.05s\tremaining: 54.9s\n",
      "90:\tlearn: 0.4941887\ttotal: 2.07s\tremaining: 54.8s\n",
      "91:\tlearn: 0.4928924\ttotal: 2.09s\tremaining: 54.8s\n",
      "92:\tlearn: 0.4912136\ttotal: 2.12s\tremaining: 54.8s\n",
      "93:\tlearn: 0.4901527\ttotal: 2.14s\tremaining: 54.8s\n",
      "94:\tlearn: 0.4887894\ttotal: 2.16s\tremaining: 54.8s\n",
      "95:\tlearn: 0.4875645\ttotal: 2.19s\tremaining: 54.8s\n",
      "96:\tlearn: 0.4865007\ttotal: 2.21s\tremaining: 54.7s\n",
      "97:\tlearn: 0.4855643\ttotal: 2.23s\tremaining: 54.7s\n",
      "98:\tlearn: 0.4848771\ttotal: 2.25s\tremaining: 54.6s\n",
      "99:\tlearn: 0.4838137\ttotal: 2.27s\tremaining: 54.6s\n",
      "100:\tlearn: 0.4829165\ttotal: 2.3s\tremaining: 54.6s\n",
      "101:\tlearn: 0.4819649\ttotal: 2.32s\tremaining: 54.6s\n",
      "102:\tlearn: 0.4809259\ttotal: 2.35s\tremaining: 54.6s\n",
      "103:\tlearn: 0.4801003\ttotal: 2.37s\tremaining: 54.6s\n",
      "104:\tlearn: 0.4791398\ttotal: 2.39s\tremaining: 54.5s\n",
      "105:\tlearn: 0.4783076\ttotal: 2.42s\tremaining: 54.6s\n",
      "106:\tlearn: 0.4774176\ttotal: 2.44s\tremaining: 54.5s\n",
      "107:\tlearn: 0.4760921\ttotal: 2.46s\tremaining: 54.5s\n",
      "108:\tlearn: 0.4750883\ttotal: 2.48s\tremaining: 54.5s\n",
      "109:\tlearn: 0.4742911\ttotal: 2.5s\tremaining: 54.4s\n",
      "110:\tlearn: 0.4735391\ttotal: 2.53s\tremaining: 54.4s\n",
      "111:\tlearn: 0.4724097\ttotal: 2.55s\tremaining: 54.4s\n",
      "112:\tlearn: 0.4712187\ttotal: 2.58s\tremaining: 54.4s\n",
      "113:\tlearn: 0.4704390\ttotal: 2.6s\tremaining: 54.4s\n",
      "114:\tlearn: 0.4696099\ttotal: 2.62s\tremaining: 54.4s\n",
      "115:\tlearn: 0.4688003\ttotal: 2.64s\tremaining: 54.3s\n",
      "116:\tlearn: 0.4680497\ttotal: 2.67s\tremaining: 54.3s\n",
      "117:\tlearn: 0.4671993\ttotal: 2.69s\tremaining: 54.3s\n",
      "118:\tlearn: 0.4663907\ttotal: 2.71s\tremaining: 54.3s\n",
      "119:\tlearn: 0.4654922\ttotal: 2.74s\tremaining: 54.3s\n",
      "120:\tlearn: 0.4646019\ttotal: 2.76s\tremaining: 54.3s\n",
      "121:\tlearn: 0.4639295\ttotal: 2.78s\tremaining: 54.3s\n",
      "122:\tlearn: 0.4629995\ttotal: 2.81s\tremaining: 54.3s\n",
      "123:\tlearn: 0.4619954\ttotal: 2.83s\tremaining: 54.3s\n",
      "124:\tlearn: 0.4612643\ttotal: 2.86s\tremaining: 54.3s\n",
      "125:\tlearn: 0.4599021\ttotal: 2.88s\tremaining: 54.3s\n",
      "126:\tlearn: 0.4592683\ttotal: 2.9s\tremaining: 54.2s\n",
      "127:\tlearn: 0.4583118\ttotal: 2.92s\tremaining: 54.2s\n",
      "128:\tlearn: 0.4574781\ttotal: 2.95s\tremaining: 54.2s\n",
      "129:\tlearn: 0.4567102\ttotal: 2.98s\tremaining: 54.2s\n",
      "130:\tlearn: 0.4557250\ttotal: 3s\tremaining: 54.2s\n",
      "131:\tlearn: 0.4544824\ttotal: 3.02s\tremaining: 54.2s\n",
      "132:\tlearn: 0.4533746\ttotal: 3.05s\tremaining: 54.2s\n",
      "133:\tlearn: 0.4523256\ttotal: 3.07s\tremaining: 54.2s\n",
      "134:\tlearn: 0.4514339\ttotal: 3.09s\tremaining: 54.2s\n",
      "135:\tlearn: 0.4505121\ttotal: 3.12s\tremaining: 54.2s\n",
      "136:\tlearn: 0.4493051\ttotal: 3.14s\tremaining: 54.2s\n",
      "137:\tlearn: 0.4486094\ttotal: 3.16s\tremaining: 54.1s\n",
      "138:\tlearn: 0.4480557\ttotal: 3.19s\tremaining: 54.1s\n",
      "139:\tlearn: 0.4471753\ttotal: 3.21s\tremaining: 54.2s\n",
      "140:\tlearn: 0.4464155\ttotal: 3.23s\tremaining: 54.1s\n",
      "141:\tlearn: 0.4457014\ttotal: 3.26s\tremaining: 54.1s\n",
      "142:\tlearn: 0.4450214\ttotal: 3.28s\tremaining: 54.1s\n",
      "143:\tlearn: 0.4442230\ttotal: 3.31s\tremaining: 54.1s\n",
      "144:\tlearn: 0.4435668\ttotal: 3.33s\tremaining: 54s\n",
      "145:\tlearn: 0.4425057\ttotal: 3.35s\tremaining: 54s\n",
      "146:\tlearn: 0.4408184\ttotal: 3.37s\tremaining: 54s\n",
      "147:\tlearn: 0.4398331\ttotal: 3.39s\tremaining: 53.9s\n",
      "148:\tlearn: 0.4393301\ttotal: 3.42s\tremaining: 53.9s\n",
      "149:\tlearn: 0.4383614\ttotal: 3.44s\tremaining: 53.9s\n",
      "150:\tlearn: 0.4373546\ttotal: 3.46s\tremaining: 53.9s\n",
      "151:\tlearn: 0.4365006\ttotal: 3.48s\tremaining: 53.8s\n",
      "152:\tlearn: 0.4360329\ttotal: 3.51s\tremaining: 53.8s\n",
      "153:\tlearn: 0.4349132\ttotal: 3.53s\tremaining: 53.8s\n",
      "154:\tlearn: 0.4338029\ttotal: 3.55s\tremaining: 53.8s\n",
      "155:\tlearn: 0.4325075\ttotal: 3.57s\tremaining: 53.7s\n",
      "156:\tlearn: 0.4319384\ttotal: 3.6s\tremaining: 53.7s\n",
      "157:\tlearn: 0.4314417\ttotal: 3.62s\tremaining: 53.6s\n",
      "158:\tlearn: 0.4308404\ttotal: 3.64s\tremaining: 53.6s\n",
      "159:\tlearn: 0.4303454\ttotal: 3.67s\tremaining: 53.6s\n",
      "160:\tlearn: 0.4297511\ttotal: 3.69s\tremaining: 53.6s\n",
      "161:\tlearn: 0.4291524\ttotal: 3.71s\tremaining: 53.6s\n",
      "162:\tlearn: 0.4287160\ttotal: 3.73s\tremaining: 53.5s\n",
      "163:\tlearn: 0.4281399\ttotal: 3.76s\tremaining: 53.5s\n",
      "164:\tlearn: 0.4275871\ttotal: 3.78s\tremaining: 53.5s\n",
      "165:\tlearn: 0.4269831\ttotal: 3.8s\tremaining: 53.4s\n",
      "166:\tlearn: 0.4262706\ttotal: 3.82s\tremaining: 53.4s\n",
      "167:\tlearn: 0.4256813\ttotal: 3.85s\tremaining: 53.4s\n",
      "168:\tlearn: 0.4251314\ttotal: 3.87s\tremaining: 53.4s\n",
      "169:\tlearn: 0.4246972\ttotal: 3.89s\tremaining: 53.3s\n",
      "170:\tlearn: 0.4241354\ttotal: 3.91s\tremaining: 53.3s\n",
      "171:\tlearn: 0.4231262\ttotal: 3.93s\tremaining: 53.2s\n",
      "172:\tlearn: 0.4226271\ttotal: 3.95s\tremaining: 53.2s\n",
      "173:\tlearn: 0.4221388\ttotal: 3.98s\tremaining: 53.2s\n",
      "174:\tlearn: 0.4215267\ttotal: 4s\tremaining: 53.1s\n",
      "175:\tlearn: 0.4206615\ttotal: 4.02s\tremaining: 53.1s\n",
      "176:\tlearn: 0.4200467\ttotal: 4.04s\tremaining: 53.1s\n",
      "177:\tlearn: 0.4189075\ttotal: 4.07s\tremaining: 53.1s\n",
      "178:\tlearn: 0.4184366\ttotal: 4.09s\tremaining: 53s\n",
      "179:\tlearn: 0.4179129\ttotal: 4.11s\tremaining: 53s\n",
      "180:\tlearn: 0.4173967\ttotal: 4.14s\tremaining: 53s\n",
      "181:\tlearn: 0.4164623\ttotal: 4.16s\tremaining: 52.9s\n",
      "182:\tlearn: 0.4158978\ttotal: 4.18s\tremaining: 52.9s\n",
      "183:\tlearn: 0.4145335\ttotal: 4.2s\tremaining: 52.9s\n",
      "184:\tlearn: 0.4140936\ttotal: 4.22s\tremaining: 52.8s\n",
      "185:\tlearn: 0.4131112\ttotal: 4.24s\tremaining: 52.8s\n",
      "186:\tlearn: 0.4126964\ttotal: 4.27s\tremaining: 52.8s\n",
      "187:\tlearn: 0.4122569\ttotal: 4.29s\tremaining: 52.8s\n",
      "188:\tlearn: 0.4118329\ttotal: 4.31s\tremaining: 52.7s\n",
      "189:\tlearn: 0.4113906\ttotal: 4.33s\tremaining: 52.7s\n",
      "190:\tlearn: 0.4107241\ttotal: 4.35s\tremaining: 52.6s\n",
      "191:\tlearn: 0.4097690\ttotal: 4.37s\tremaining: 52.6s\n",
      "192:\tlearn: 0.4091757\ttotal: 4.4s\tremaining: 52.6s\n",
      "193:\tlearn: 0.4086926\ttotal: 4.42s\tremaining: 52.5s\n",
      "194:\tlearn: 0.4075980\ttotal: 4.44s\tremaining: 52.5s\n",
      "195:\tlearn: 0.4072073\ttotal: 4.46s\tremaining: 52.5s\n",
      "196:\tlearn: 0.4066214\ttotal: 4.48s\tremaining: 52.4s\n",
      "197:\tlearn: 0.4058901\ttotal: 4.5s\tremaining: 52.4s\n",
      "198:\tlearn: 0.4053890\ttotal: 4.53s\tremaining: 52.4s\n",
      "199:\tlearn: 0.4049381\ttotal: 4.55s\tremaining: 52.3s\n",
      "200:\tlearn: 0.4043964\ttotal: 4.57s\tremaining: 52.3s\n",
      "201:\tlearn: 0.4039784\ttotal: 4.59s\tremaining: 52.2s\n",
      "202:\tlearn: 0.4030457\ttotal: 4.61s\tremaining: 52.2s\n",
      "203:\tlearn: 0.4026098\ttotal: 4.64s\tremaining: 52.2s\n",
      "204:\tlearn: 0.4019758\ttotal: 4.66s\tremaining: 52.2s\n",
      "205:\tlearn: 0.4012663\ttotal: 4.68s\tremaining: 52.2s\n",
      "206:\tlearn: 0.4006957\ttotal: 4.71s\tremaining: 52.1s\n",
      "207:\tlearn: 0.3996752\ttotal: 4.73s\tremaining: 52.1s\n",
      "208:\tlearn: 0.3987405\ttotal: 4.75s\tremaining: 52.1s\n",
      "209:\tlearn: 0.3981696\ttotal: 4.77s\tremaining: 52s\n",
      "210:\tlearn: 0.3975123\ttotal: 4.79s\tremaining: 52s\n",
      "211:\tlearn: 0.3969865\ttotal: 4.82s\tremaining: 52s\n",
      "212:\tlearn: 0.3962211\ttotal: 4.84s\tremaining: 51.9s\n",
      "213:\tlearn: 0.3951184\ttotal: 4.86s\tremaining: 51.9s\n",
      "214:\tlearn: 0.3943106\ttotal: 4.88s\tremaining: 51.9s\n",
      "215:\tlearn: 0.3935844\ttotal: 4.9s\tremaining: 51.8s\n",
      "216:\tlearn: 0.3928204\ttotal: 4.92s\tremaining: 51.8s\n",
      "217:\tlearn: 0.3918678\ttotal: 4.95s\tremaining: 51.8s\n",
      "218:\tlearn: 0.3914755\ttotal: 4.97s\tremaining: 51.7s\n",
      "219:\tlearn: 0.3908386\ttotal: 4.99s\tremaining: 51.7s\n",
      "220:\tlearn: 0.3903873\ttotal: 5.01s\tremaining: 51.7s\n",
      "221:\tlearn: 0.3900099\ttotal: 5.03s\tremaining: 51.7s\n",
      "222:\tlearn: 0.3892693\ttotal: 5.05s\tremaining: 51.6s\n",
      "223:\tlearn: 0.3889668\ttotal: 5.08s\tremaining: 51.6s\n",
      "224:\tlearn: 0.3881049\ttotal: 5.1s\tremaining: 51.6s\n",
      "225:\tlearn: 0.3877579\ttotal: 5.12s\tremaining: 51.5s\n",
      "226:\tlearn: 0.3874806\ttotal: 5.14s\tremaining: 51.5s\n",
      "227:\tlearn: 0.3870100\ttotal: 5.16s\tremaining: 51.4s\n",
      "228:\tlearn: 0.3866628\ttotal: 5.18s\tremaining: 51.4s\n",
      "229:\tlearn: 0.3861641\ttotal: 5.2s\tremaining: 51.4s\n",
      "230:\tlearn: 0.3858774\ttotal: 5.22s\tremaining: 51.3s\n",
      "231:\tlearn: 0.3850986\ttotal: 5.24s\tremaining: 51.3s\n",
      "232:\tlearn: 0.3846439\ttotal: 5.27s\tremaining: 51.2s\n",
      "233:\tlearn: 0.3842428\ttotal: 5.29s\tremaining: 51.2s\n",
      "234:\tlearn: 0.3839011\ttotal: 5.31s\tremaining: 51.2s\n",
      "235:\tlearn: 0.3833540\ttotal: 5.33s\tremaining: 51.1s\n",
      "236:\tlearn: 0.3827684\ttotal: 5.35s\tremaining: 51.1s\n",
      "237:\tlearn: 0.3824431\ttotal: 5.38s\tremaining: 51.1s\n",
      "238:\tlearn: 0.3814586\ttotal: 5.4s\tremaining: 51.1s\n",
      "239:\tlearn: 0.3806487\ttotal: 5.42s\tremaining: 51s\n",
      "240:\tlearn: 0.3803540\ttotal: 5.44s\tremaining: 51s\n",
      "241:\tlearn: 0.3798245\ttotal: 5.46s\tremaining: 51s\n",
      "242:\tlearn: 0.3794667\ttotal: 5.48s\tremaining: 50.9s\n",
      "243:\tlearn: 0.3787758\ttotal: 5.5s\tremaining: 50.9s\n",
      "244:\tlearn: 0.3781253\ttotal: 5.52s\tremaining: 50.8s\n",
      "245:\tlearn: 0.3774236\ttotal: 5.54s\tremaining: 50.8s\n",
      "246:\tlearn: 0.3769551\ttotal: 5.56s\tremaining: 50.7s\n",
      "247:\tlearn: 0.3763340\ttotal: 5.58s\tremaining: 50.7s\n",
      "248:\tlearn: 0.3758787\ttotal: 5.6s\tremaining: 50.7s\n",
      "249:\tlearn: 0.3751758\ttotal: 5.62s\tremaining: 50.6s\n",
      "250:\tlearn: 0.3747771\ttotal: 5.65s\tremaining: 50.6s\n",
      "251:\tlearn: 0.3740245\ttotal: 5.67s\tremaining: 50.6s\n",
      "252:\tlearn: 0.3734074\ttotal: 5.69s\tremaining: 50.5s\n",
      "253:\tlearn: 0.3728406\ttotal: 5.71s\tremaining: 50.5s\n",
      "254:\tlearn: 0.3724100\ttotal: 5.73s\tremaining: 50.5s\n",
      "255:\tlearn: 0.3719496\ttotal: 5.75s\tremaining: 50.4s\n",
      "256:\tlearn: 0.3715450\ttotal: 5.77s\tremaining: 50.4s\n",
      "257:\tlearn: 0.3709105\ttotal: 5.79s\tremaining: 50.3s\n",
      "258:\tlearn: 0.3703940\ttotal: 5.82s\tremaining: 50.3s\n",
      "259:\tlearn: 0.3696322\ttotal: 5.84s\tremaining: 50.3s\n",
      "260:\tlearn: 0.3693000\ttotal: 5.86s\tremaining: 50.3s\n",
      "261:\tlearn: 0.3688781\ttotal: 5.88s\tremaining: 50.2s\n",
      "262:\tlearn: 0.3684127\ttotal: 5.9s\tremaining: 50.2s\n",
      "263:\tlearn: 0.3680510\ttotal: 5.92s\tremaining: 50.2s\n",
      "264:\tlearn: 0.3676453\ttotal: 5.94s\tremaining: 50.1s\n",
      "265:\tlearn: 0.3669443\ttotal: 5.96s\tremaining: 50.1s\n",
      "266:\tlearn: 0.3659544\ttotal: 5.98s\tremaining: 50.1s\n",
      "267:\tlearn: 0.3655235\ttotal: 6.01s\tremaining: 50s\n",
      "268:\tlearn: 0.3649559\ttotal: 6.03s\tremaining: 50s\n",
      "269:\tlearn: 0.3642624\ttotal: 6.05s\tremaining: 50s\n",
      "270:\tlearn: 0.3636225\ttotal: 6.07s\tremaining: 49.9s\n",
      "271:\tlearn: 0.3633907\ttotal: 6.09s\tremaining: 49.9s\n",
      "272:\tlearn: 0.3629577\ttotal: 6.11s\tremaining: 49.9s\n",
      "273:\tlearn: 0.3621168\ttotal: 6.13s\tremaining: 49.8s\n",
      "274:\tlearn: 0.3615100\ttotal: 6.15s\tremaining: 49.8s\n",
      "275:\tlearn: 0.3609688\ttotal: 6.17s\tremaining: 49.7s\n",
      "276:\tlearn: 0.3604643\ttotal: 6.19s\tremaining: 49.7s\n",
      "277:\tlearn: 0.3599105\ttotal: 6.21s\tremaining: 49.7s\n",
      "278:\tlearn: 0.3593615\ttotal: 6.24s\tremaining: 49.6s\n",
      "279:\tlearn: 0.3591184\ttotal: 6.26s\tremaining: 49.6s\n",
      "280:\tlearn: 0.3585070\ttotal: 6.28s\tremaining: 49.6s\n",
      "281:\tlearn: 0.3576119\ttotal: 6.3s\tremaining: 49.5s\n",
      "282:\tlearn: 0.3573437\ttotal: 6.32s\tremaining: 49.5s\n",
      "283:\tlearn: 0.3570986\ttotal: 6.34s\tremaining: 49.5s\n",
      "284:\tlearn: 0.3566458\ttotal: 6.37s\tremaining: 49.5s\n",
      "285:\tlearn: 0.3564277\ttotal: 6.39s\tremaining: 49.4s\n",
      "286:\tlearn: 0.3559737\ttotal: 6.41s\tremaining: 49.4s\n",
      "287:\tlearn: 0.3556872\ttotal: 6.43s\tremaining: 49.4s\n",
      "288:\tlearn: 0.3550314\ttotal: 6.45s\tremaining: 49.4s\n",
      "289:\tlearn: 0.3547348\ttotal: 6.47s\tremaining: 49.3s\n",
      "290:\tlearn: 0.3543362\ttotal: 6.49s\tremaining: 49.3s\n",
      "291:\tlearn: 0.3537425\ttotal: 6.52s\tremaining: 49.3s\n",
      "292:\tlearn: 0.3534384\ttotal: 6.54s\tremaining: 49.3s\n",
      "293:\tlearn: 0.3531350\ttotal: 6.56s\tremaining: 49.2s\n",
      "294:\tlearn: 0.3524106\ttotal: 6.58s\tremaining: 49.2s\n",
      "295:\tlearn: 0.3521839\ttotal: 6.6s\tremaining: 49.1s\n",
      "296:\tlearn: 0.3519494\ttotal: 6.62s\tremaining: 49.1s\n",
      "297:\tlearn: 0.3517035\ttotal: 6.64s\tremaining: 49.1s\n",
      "298:\tlearn: 0.3509282\ttotal: 6.66s\tremaining: 49.1s\n",
      "299:\tlearn: 0.3505286\ttotal: 6.68s\tremaining: 49s\n",
      "300:\tlearn: 0.3502386\ttotal: 6.71s\tremaining: 49s\n",
      "301:\tlearn: 0.3498257\ttotal: 6.73s\tremaining: 49s\n",
      "302:\tlearn: 0.3495685\ttotal: 6.75s\tremaining: 48.9s\n",
      "303:\tlearn: 0.3490483\ttotal: 6.77s\tremaining: 48.9s\n",
      "304:\tlearn: 0.3486285\ttotal: 6.79s\tremaining: 48.9s\n",
      "305:\tlearn: 0.3481470\ttotal: 6.81s\tremaining: 48.9s\n",
      "306:\tlearn: 0.3479170\ttotal: 6.84s\tremaining: 48.8s\n",
      "307:\tlearn: 0.3477743\ttotal: 6.86s\tremaining: 48.8s\n",
      "308:\tlearn: 0.3473967\ttotal: 6.88s\tremaining: 48.8s\n",
      "309:\tlearn: 0.3468039\ttotal: 6.9s\tremaining: 48.8s\n",
      "310:\tlearn: 0.3463026\ttotal: 6.92s\tremaining: 48.7s\n",
      "311:\tlearn: 0.3458681\ttotal: 6.94s\tremaining: 48.7s\n",
      "312:\tlearn: 0.3453988\ttotal: 6.96s\tremaining: 48.7s\n",
      "313:\tlearn: 0.3449643\ttotal: 6.99s\tremaining: 48.6s\n",
      "314:\tlearn: 0.3447988\ttotal: 7.01s\tremaining: 48.6s\n",
      "315:\tlearn: 0.3443860\ttotal: 7.03s\tremaining: 48.6s\n",
      "316:\tlearn: 0.3441816\ttotal: 7.05s\tremaining: 48.6s\n",
      "317:\tlearn: 0.3436847\ttotal: 7.08s\tremaining: 48.5s\n",
      "318:\tlearn: 0.3435233\ttotal: 7.1s\tremaining: 48.5s\n",
      "319:\tlearn: 0.3430950\ttotal: 7.12s\tremaining: 48.5s\n",
      "320:\tlearn: 0.3429333\ttotal: 7.14s\tremaining: 48.5s\n",
      "321:\tlearn: 0.3423435\ttotal: 7.16s\tremaining: 48.4s\n",
      "322:\tlearn: 0.3421574\ttotal: 7.18s\tremaining: 48.4s\n",
      "323:\tlearn: 0.3418881\ttotal: 7.2s\tremaining: 48.4s\n",
      "324:\tlearn: 0.3414159\ttotal: 7.22s\tremaining: 48.4s\n",
      "325:\tlearn: 0.3407470\ttotal: 7.25s\tremaining: 48.3s\n",
      "326:\tlearn: 0.3403223\ttotal: 7.27s\tremaining: 48.3s\n",
      "327:\tlearn: 0.3396095\ttotal: 7.29s\tremaining: 48.3s\n",
      "328:\tlearn: 0.3389731\ttotal: 7.31s\tremaining: 48.2s\n",
      "329:\tlearn: 0.3386047\ttotal: 7.33s\tremaining: 48.2s\n",
      "330:\tlearn: 0.3381341\ttotal: 7.36s\tremaining: 48.2s\n",
      "331:\tlearn: 0.3378272\ttotal: 7.38s\tremaining: 48.2s\n",
      "332:\tlearn: 0.3376244\ttotal: 7.4s\tremaining: 48.1s\n",
      "333:\tlearn: 0.3372455\ttotal: 7.42s\tremaining: 48.1s\n",
      "334:\tlearn: 0.3368397\ttotal: 7.44s\tremaining: 48.1s\n",
      "335:\tlearn: 0.3364889\ttotal: 7.46s\tremaining: 48.1s\n",
      "336:\tlearn: 0.3362947\ttotal: 7.48s\tremaining: 48s\n",
      "337:\tlearn: 0.3358884\ttotal: 7.5s\tremaining: 48s\n",
      "338:\tlearn: 0.3355818\ttotal: 7.53s\tremaining: 48s\n",
      "339:\tlearn: 0.3352159\ttotal: 7.55s\tremaining: 47.9s\n",
      "340:\tlearn: 0.3346936\ttotal: 7.57s\tremaining: 47.9s\n",
      "341:\tlearn: 0.3342498\ttotal: 7.59s\tremaining: 47.9s\n",
      "342:\tlearn: 0.3341000\ttotal: 7.61s\tremaining: 47.9s\n",
      "343:\tlearn: 0.3335098\ttotal: 7.63s\tremaining: 47.8s\n",
      "344:\tlearn: 0.3331241\ttotal: 7.66s\tremaining: 47.8s\n",
      "345:\tlearn: 0.3329748\ttotal: 7.68s\tremaining: 47.8s\n",
      "346:\tlearn: 0.3327456\ttotal: 7.7s\tremaining: 47.8s\n",
      "347:\tlearn: 0.3321670\ttotal: 7.72s\tremaining: 47.8s\n",
      "348:\tlearn: 0.3317906\ttotal: 7.75s\tremaining: 47.7s\n",
      "349:\tlearn: 0.3314920\ttotal: 7.77s\tremaining: 47.7s\n",
      "350:\tlearn: 0.3310072\ttotal: 7.79s\tremaining: 47.7s\n",
      "351:\tlearn: 0.3308989\ttotal: 7.81s\tremaining: 47.7s\n",
      "352:\tlearn: 0.3305961\ttotal: 7.83s\tremaining: 47.7s\n",
      "353:\tlearn: 0.3304033\ttotal: 7.86s\tremaining: 47.6s\n",
      "354:\tlearn: 0.3300168\ttotal: 7.88s\tremaining: 47.6s\n",
      "355:\tlearn: 0.3298053\ttotal: 7.9s\tremaining: 47.6s\n",
      "356:\tlearn: 0.3296741\ttotal: 7.92s\tremaining: 47.6s\n",
      "357:\tlearn: 0.3293611\ttotal: 7.95s\tremaining: 47.5s\n",
      "358:\tlearn: 0.3290036\ttotal: 7.97s\tremaining: 47.5s\n",
      "359:\tlearn: 0.3288367\ttotal: 7.99s\tremaining: 47.5s\n",
      "360:\tlearn: 0.3285763\ttotal: 8.01s\tremaining: 47.5s\n",
      "361:\tlearn: 0.3281023\ttotal: 8.03s\tremaining: 47.4s\n",
      "362:\tlearn: 0.3279394\ttotal: 8.05s\tremaining: 47.4s\n",
      "363:\tlearn: 0.3278037\ttotal: 8.07s\tremaining: 47.4s\n",
      "364:\tlearn: 0.3276219\ttotal: 8.1s\tremaining: 47.4s\n",
      "365:\tlearn: 0.3272572\ttotal: 8.12s\tremaining: 47.3s\n",
      "366:\tlearn: 0.3270745\ttotal: 8.14s\tremaining: 47.3s\n",
      "367:\tlearn: 0.3266980\ttotal: 8.16s\tremaining: 47.3s\n",
      "368:\tlearn: 0.3264997\ttotal: 8.18s\tremaining: 47.3s\n",
      "369:\tlearn: 0.3261251\ttotal: 8.21s\tremaining: 47.2s\n",
      "370:\tlearn: 0.3258185\ttotal: 8.22s\tremaining: 47.2s\n",
      "371:\tlearn: 0.3255173\ttotal: 8.25s\tremaining: 47.2s\n",
      "372:\tlearn: 0.3253560\ttotal: 8.27s\tremaining: 47.2s\n",
      "373:\tlearn: 0.3252115\ttotal: 8.29s\tremaining: 47.1s\n",
      "374:\tlearn: 0.3250701\ttotal: 8.31s\tremaining: 47.1s\n",
      "375:\tlearn: 0.3247973\ttotal: 8.33s\tremaining: 47.1s\n",
      "376:\tlearn: 0.3242537\ttotal: 8.36s\tremaining: 47.1s\n",
      "377:\tlearn: 0.3240922\ttotal: 8.38s\tremaining: 47s\n",
      "378:\tlearn: 0.3239338\ttotal: 8.4s\tremaining: 47s\n",
      "379:\tlearn: 0.3237158\ttotal: 8.42s\tremaining: 47s\n",
      "380:\tlearn: 0.3233127\ttotal: 8.44s\tremaining: 46.9s\n",
      "381:\tlearn: 0.3228541\ttotal: 8.46s\tremaining: 46.9s\n",
      "382:\tlearn: 0.3226172\ttotal: 8.48s\tremaining: 46.9s\n",
      "383:\tlearn: 0.3223439\ttotal: 8.5s\tremaining: 46.9s\n",
      "384:\tlearn: 0.3222167\ttotal: 8.52s\tremaining: 46.8s\n",
      "385:\tlearn: 0.3218987\ttotal: 8.54s\tremaining: 46.8s\n",
      "386:\tlearn: 0.3216595\ttotal: 8.56s\tremaining: 46.8s\n",
      "387:\tlearn: 0.3215324\ttotal: 8.59s\tremaining: 46.7s\n",
      "388:\tlearn: 0.3211966\ttotal: 8.61s\tremaining: 46.7s\n",
      "389:\tlearn: 0.3210715\ttotal: 8.63s\tremaining: 46.7s\n",
      "390:\tlearn: 0.3209412\ttotal: 8.65s\tremaining: 46.7s\n",
      "391:\tlearn: 0.3208068\ttotal: 8.67s\tremaining: 46.6s\n",
      "392:\tlearn: 0.3205067\ttotal: 8.69s\tremaining: 46.6s\n",
      "393:\tlearn: 0.3201152\ttotal: 8.71s\tremaining: 46.6s\n",
      "394:\tlearn: 0.3198997\ttotal: 8.73s\tremaining: 46.5s\n",
      "395:\tlearn: 0.3197523\ttotal: 8.75s\tremaining: 46.5s\n",
      "396:\tlearn: 0.3194831\ttotal: 8.77s\tremaining: 46.5s\n",
      "397:\tlearn: 0.3192092\ttotal: 8.79s\tremaining: 46.4s\n",
      "398:\tlearn: 0.3190110\ttotal: 8.81s\tremaining: 46.4s\n",
      "399:\tlearn: 0.3188211\ttotal: 8.83s\tremaining: 46.4s\n",
      "400:\tlearn: 0.3186086\ttotal: 8.85s\tremaining: 46.3s\n",
      "401:\tlearn: 0.3184571\ttotal: 8.87s\tremaining: 46.3s\n",
      "402:\tlearn: 0.3181282\ttotal: 8.89s\tremaining: 46.3s\n",
      "403:\tlearn: 0.3180332\ttotal: 8.91s\tremaining: 46.3s\n",
      "404:\tlearn: 0.3176749\ttotal: 8.94s\tremaining: 46.2s\n",
      "405:\tlearn: 0.3172745\ttotal: 8.96s\tremaining: 46.2s\n",
      "406:\tlearn: 0.3171774\ttotal: 8.98s\tremaining: 46.2s\n",
      "407:\tlearn: 0.3169689\ttotal: 9s\tremaining: 46.1s\n",
      "408:\tlearn: 0.3166215\ttotal: 9.02s\tremaining: 46.1s\n",
      "409:\tlearn: 0.3162408\ttotal: 9.04s\tremaining: 46.1s\n",
      "410:\tlearn: 0.3159457\ttotal: 9.06s\tremaining: 46.1s\n",
      "411:\tlearn: 0.3155954\ttotal: 9.08s\tremaining: 46s\n",
      "412:\tlearn: 0.3154004\ttotal: 9.1s\tremaining: 46s\n",
      "413:\tlearn: 0.3152250\ttotal: 9.12s\tremaining: 46s\n",
      "414:\tlearn: 0.3151090\ttotal: 9.15s\tremaining: 46s\n",
      "415:\tlearn: 0.3149329\ttotal: 9.17s\tremaining: 45.9s\n",
      "416:\tlearn: 0.3145133\ttotal: 9.19s\tremaining: 45.9s\n",
      "417:\tlearn: 0.3142873\ttotal: 9.21s\tremaining: 45.9s\n",
      "418:\tlearn: 0.3140412\ttotal: 9.23s\tremaining: 45.8s\n",
      "419:\tlearn: 0.3139248\ttotal: 9.25s\tremaining: 45.8s\n",
      "420:\tlearn: 0.3134130\ttotal: 9.27s\tremaining: 45.8s\n",
      "421:\tlearn: 0.3132458\ttotal: 9.29s\tremaining: 45.7s\n",
      "422:\tlearn: 0.3129303\ttotal: 9.31s\tremaining: 45.7s\n",
      "423:\tlearn: 0.3126613\ttotal: 9.33s\tremaining: 45.7s\n",
      "424:\tlearn: 0.3125601\ttotal: 9.35s\tremaining: 45.7s\n",
      "425:\tlearn: 0.3121644\ttotal: 9.37s\tremaining: 45.6s\n",
      "426:\tlearn: 0.3120092\ttotal: 9.39s\tremaining: 45.6s\n",
      "427:\tlearn: 0.3118610\ttotal: 9.41s\tremaining: 45.6s\n",
      "428:\tlearn: 0.3117258\ttotal: 9.44s\tremaining: 45.6s\n",
      "429:\tlearn: 0.3114681\ttotal: 9.46s\tremaining: 45.5s\n",
      "430:\tlearn: 0.3113615\ttotal: 9.48s\tremaining: 45.5s\n",
      "431:\tlearn: 0.3111884\ttotal: 9.5s\tremaining: 45.5s\n",
      "432:\tlearn: 0.3109920\ttotal: 9.52s\tremaining: 45.4s\n",
      "433:\tlearn: 0.3108045\ttotal: 9.54s\tremaining: 45.4s\n",
      "434:\tlearn: 0.3104889\ttotal: 9.56s\tremaining: 45.4s\n",
      "435:\tlearn: 0.3103770\ttotal: 9.58s\tremaining: 45.3s\n",
      "436:\tlearn: 0.3101365\ttotal: 9.6s\tremaining: 45.3s\n",
      "437:\tlearn: 0.3097835\ttotal: 9.62s\tremaining: 45.3s\n",
      "438:\tlearn: 0.3096725\ttotal: 9.64s\tremaining: 45.3s\n",
      "439:\tlearn: 0.3093926\ttotal: 9.66s\tremaining: 45.2s\n",
      "440:\tlearn: 0.3090746\ttotal: 9.68s\tremaining: 45.2s\n",
      "441:\tlearn: 0.3089363\ttotal: 9.71s\tremaining: 45.2s\n",
      "442:\tlearn: 0.3087777\ttotal: 9.73s\tremaining: 45.2s\n",
      "443:\tlearn: 0.3086169\ttotal: 9.75s\tremaining: 45.1s\n",
      "444:\tlearn: 0.3084481\ttotal: 9.77s\tremaining: 45.1s\n",
      "445:\tlearn: 0.3082751\ttotal: 9.79s\tremaining: 45.1s\n",
      "446:\tlearn: 0.3080961\ttotal: 9.81s\tremaining: 45.1s\n",
      "447:\tlearn: 0.3078677\ttotal: 9.83s\tremaining: 45s\n",
      "448:\tlearn: 0.3077374\ttotal: 9.86s\tremaining: 45s\n",
      "449:\tlearn: 0.3074198\ttotal: 9.88s\tremaining: 45s\n",
      "450:\tlearn: 0.3073005\ttotal: 9.9s\tremaining: 45s\n",
      "451:\tlearn: 0.3071431\ttotal: 9.92s\tremaining: 44.9s\n",
      "452:\tlearn: 0.3070283\ttotal: 9.94s\tremaining: 44.9s\n",
      "453:\tlearn: 0.3067590\ttotal: 9.96s\tremaining: 44.9s\n",
      "454:\tlearn: 0.3066691\ttotal: 9.98s\tremaining: 44.9s\n",
      "455:\tlearn: 0.3063719\ttotal: 10s\tremaining: 44.8s\n",
      "456:\tlearn: 0.3062508\ttotal: 10s\tremaining: 44.8s\n",
      "457:\tlearn: 0.3061542\ttotal: 10s\tremaining: 44.8s\n",
      "458:\tlearn: 0.3060204\ttotal: 10.1s\tremaining: 44.8s\n",
      "459:\tlearn: 0.3057581\ttotal: 10.1s\tremaining: 44.8s\n",
      "460:\tlearn: 0.3056802\ttotal: 10.1s\tremaining: 44.7s\n",
      "461:\tlearn: 0.3054163\ttotal: 10.1s\tremaining: 44.7s\n",
      "462:\tlearn: 0.3052889\ttotal: 10.2s\tremaining: 44.7s\n",
      "463:\tlearn: 0.3051679\ttotal: 10.2s\tremaining: 44.6s\n",
      "464:\tlearn: 0.3049820\ttotal: 10.2s\tremaining: 44.6s\n",
      "465:\tlearn: 0.3047343\ttotal: 10.2s\tremaining: 44.6s\n",
      "466:\tlearn: 0.3044656\ttotal: 10.2s\tremaining: 44.6s\n",
      "467:\tlearn: 0.3043473\ttotal: 10.3s\tremaining: 44.5s\n",
      "468:\tlearn: 0.3042554\ttotal: 10.3s\tremaining: 44.5s\n",
      "469:\tlearn: 0.3039879\ttotal: 10.3s\tremaining: 44.5s\n",
      "470:\tlearn: 0.3037454\ttotal: 10.3s\tremaining: 44.5s\n",
      "471:\tlearn: 0.3036235\ttotal: 10.3s\tremaining: 44.4s\n",
      "472:\tlearn: 0.3034522\ttotal: 10.4s\tremaining: 44.4s\n",
      "473:\tlearn: 0.3032735\ttotal: 10.4s\tremaining: 44.4s\n",
      "474:\tlearn: 0.3031157\ttotal: 10.4s\tremaining: 44.4s\n",
      "475:\tlearn: 0.3029399\ttotal: 10.4s\tremaining: 44.3s\n",
      "476:\tlearn: 0.3028030\ttotal: 10.4s\tremaining: 44.3s\n",
      "477:\tlearn: 0.3025132\ttotal: 10.5s\tremaining: 44.3s\n",
      "478:\tlearn: 0.3024159\ttotal: 10.5s\tremaining: 44.3s\n",
      "479:\tlearn: 0.3022680\ttotal: 10.5s\tremaining: 44.2s\n",
      "480:\tlearn: 0.3021439\ttotal: 10.5s\tremaining: 44.2s\n",
      "481:\tlearn: 0.3017602\ttotal: 10.6s\tremaining: 44.2s\n",
      "482:\tlearn: 0.3016695\ttotal: 10.6s\tremaining: 44.2s\n",
      "483:\tlearn: 0.3014399\ttotal: 10.6s\tremaining: 44.1s\n",
      "484:\tlearn: 0.3012202\ttotal: 10.6s\tremaining: 44.1s\n",
      "485:\tlearn: 0.3011290\ttotal: 10.6s\tremaining: 44.1s\n",
      "486:\tlearn: 0.3008495\ttotal: 10.7s\tremaining: 44.1s\n",
      "487:\tlearn: 0.3007259\ttotal: 10.7s\tremaining: 44s\n",
      "488:\tlearn: 0.3006371\ttotal: 10.7s\tremaining: 44s\n",
      "489:\tlearn: 0.3004011\ttotal: 10.7s\tremaining: 44s\n",
      "490:\tlearn: 0.3001742\ttotal: 10.7s\tremaining: 44s\n",
      "491:\tlearn: 0.3000866\ttotal: 10.8s\tremaining: 43.9s\n",
      "492:\tlearn: 0.3000019\ttotal: 10.8s\tremaining: 43.9s\n",
      "493:\tlearn: 0.2999208\ttotal: 10.8s\tremaining: 43.9s\n",
      "494:\tlearn: 0.2996630\ttotal: 10.8s\tremaining: 43.9s\n",
      "495:\tlearn: 0.2995058\ttotal: 10.9s\tremaining: 43.8s\n",
      "496:\tlearn: 0.2991813\ttotal: 10.9s\tremaining: 43.8s\n",
      "497:\tlearn: 0.2990458\ttotal: 10.9s\tremaining: 43.8s\n",
      "498:\tlearn: 0.2989509\ttotal: 10.9s\tremaining: 43.8s\n",
      "499:\tlearn: 0.2988546\ttotal: 10.9s\tremaining: 43.7s\n",
      "500:\tlearn: 0.2987747\ttotal: 11s\tremaining: 43.7s\n",
      "501:\tlearn: 0.2986900\ttotal: 11s\tremaining: 43.7s\n",
      "502:\tlearn: 0.2985828\ttotal: 11s\tremaining: 43.6s\n",
      "503:\tlearn: 0.2984936\ttotal: 11s\tremaining: 43.6s\n",
      "504:\tlearn: 0.2983680\ttotal: 11s\tremaining: 43.6s\n",
      "505:\tlearn: 0.2981716\ttotal: 11.1s\tremaining: 43.6s\n",
      "506:\tlearn: 0.2980342\ttotal: 11.1s\tremaining: 43.5s\n",
      "507:\tlearn: 0.2979693\ttotal: 11.1s\tremaining: 43.5s\n",
      "508:\tlearn: 0.2979036\ttotal: 11.1s\tremaining: 43.5s\n",
      "509:\tlearn: 0.2977590\ttotal: 11.1s\tremaining: 43.5s\n",
      "510:\tlearn: 0.2976905\ttotal: 11.2s\tremaining: 43.4s\n",
      "511:\tlearn: 0.2976128\ttotal: 11.2s\tremaining: 43.4s\n",
      "512:\tlearn: 0.2973769\ttotal: 11.2s\tremaining: 43.4s\n",
      "513:\tlearn: 0.2972509\ttotal: 11.2s\tremaining: 43.4s\n",
      "514:\tlearn: 0.2969562\ttotal: 11.2s\tremaining: 43.3s\n",
      "515:\tlearn: 0.2968399\ttotal: 11.3s\tremaining: 43.3s\n",
      "516:\tlearn: 0.2967283\ttotal: 11.3s\tremaining: 43.3s\n",
      "517:\tlearn: 0.2965341\ttotal: 11.3s\tremaining: 43.3s\n",
      "518:\tlearn: 0.2962950\ttotal: 11.3s\tremaining: 43.2s\n",
      "519:\tlearn: 0.2961478\ttotal: 11.4s\tremaining: 43.2s\n",
      "520:\tlearn: 0.2959488\ttotal: 11.4s\tremaining: 43.2s\n",
      "521:\tlearn: 0.2958495\ttotal: 11.4s\tremaining: 43.2s\n",
      "522:\tlearn: 0.2957180\ttotal: 11.4s\tremaining: 43.1s\n",
      "523:\tlearn: 0.2956236\ttotal: 11.4s\tremaining: 43.1s\n",
      "524:\tlearn: 0.2955043\ttotal: 11.5s\tremaining: 43.1s\n",
      "525:\tlearn: 0.2954170\ttotal: 11.5s\tremaining: 43.1s\n",
      "526:\tlearn: 0.2953455\ttotal: 11.5s\tremaining: 43s\n",
      "527:\tlearn: 0.2952549\ttotal: 11.5s\tremaining: 43s\n",
      "528:\tlearn: 0.2950516\ttotal: 11.5s\tremaining: 43s\n",
      "529:\tlearn: 0.2949740\ttotal: 11.6s\tremaining: 43s\n",
      "530:\tlearn: 0.2949160\ttotal: 11.6s\tremaining: 42.9s\n",
      "531:\tlearn: 0.2947867\ttotal: 11.6s\tremaining: 42.9s\n",
      "532:\tlearn: 0.2944233\ttotal: 11.6s\tremaining: 42.9s\n",
      "533:\tlearn: 0.2943548\ttotal: 11.6s\tremaining: 42.9s\n",
      "534:\tlearn: 0.2941582\ttotal: 11.7s\tremaining: 42.8s\n",
      "535:\tlearn: 0.2940179\ttotal: 11.7s\tremaining: 42.8s\n",
      "536:\tlearn: 0.2937961\ttotal: 11.7s\tremaining: 42.8s\n",
      "537:\tlearn: 0.2935978\ttotal: 11.7s\tremaining: 42.8s\n",
      "538:\tlearn: 0.2935070\ttotal: 11.8s\tremaining: 42.8s\n",
      "539:\tlearn: 0.2932907\ttotal: 11.8s\tremaining: 42.7s\n",
      "540:\tlearn: 0.2931364\ttotal: 11.8s\tremaining: 42.7s\n",
      "541:\tlearn: 0.2930005\ttotal: 11.8s\tremaining: 42.7s\n",
      "542:\tlearn: 0.2929338\ttotal: 11.8s\tremaining: 42.7s\n",
      "543:\tlearn: 0.2928505\ttotal: 11.9s\tremaining: 42.6s\n",
      "544:\tlearn: 0.2925990\ttotal: 11.9s\tremaining: 42.6s\n",
      "545:\tlearn: 0.2925138\ttotal: 11.9s\tremaining: 42.6s\n",
      "546:\tlearn: 0.2924472\ttotal: 11.9s\tremaining: 42.6s\n",
      "547:\tlearn: 0.2923750\ttotal: 11.9s\tremaining: 42.5s\n",
      "548:\tlearn: 0.2921655\ttotal: 12s\tremaining: 42.5s\n",
      "549:\tlearn: 0.2920568\ttotal: 12s\tremaining: 42.5s\n",
      "550:\tlearn: 0.2919713\ttotal: 12s\tremaining: 42.5s\n",
      "551:\tlearn: 0.2918476\ttotal: 12s\tremaining: 42.5s\n",
      "552:\tlearn: 0.2917368\ttotal: 12.1s\tremaining: 42.4s\n",
      "553:\tlearn: 0.2915727\ttotal: 12.1s\tremaining: 42.4s\n",
      "554:\tlearn: 0.2914821\ttotal: 12.1s\tremaining: 42.4s\n",
      "555:\tlearn: 0.2912840\ttotal: 12.1s\tremaining: 42.4s\n",
      "556:\tlearn: 0.2911900\ttotal: 12.1s\tremaining: 42.3s\n",
      "557:\tlearn: 0.2910610\ttotal: 12.2s\tremaining: 42.3s\n",
      "558:\tlearn: 0.2908346\ttotal: 12.2s\tremaining: 42.3s\n",
      "559:\tlearn: 0.2906045\ttotal: 12.2s\tremaining: 42.3s\n",
      "560:\tlearn: 0.2905260\ttotal: 12.2s\tremaining: 42.2s\n",
      "561:\tlearn: 0.2903635\ttotal: 12.2s\tremaining: 42.2s\n",
      "562:\tlearn: 0.2902626\ttotal: 12.3s\tremaining: 42.2s\n",
      "563:\tlearn: 0.2901490\ttotal: 12.3s\tremaining: 42.2s\n",
      "564:\tlearn: 0.2900807\ttotal: 12.3s\tremaining: 42.1s\n",
      "565:\tlearn: 0.2900103\ttotal: 12.3s\tremaining: 42.1s\n",
      "566:\tlearn: 0.2899266\ttotal: 12.3s\tremaining: 42.1s\n",
      "567:\tlearn: 0.2898373\ttotal: 12.4s\tremaining: 42.1s\n",
      "568:\tlearn: 0.2896812\ttotal: 12.4s\tremaining: 42s\n",
      "569:\tlearn: 0.2894586\ttotal: 12.4s\tremaining: 42s\n",
      "570:\tlearn: 0.2892987\ttotal: 12.4s\tremaining: 42s\n",
      "571:\tlearn: 0.2892339\ttotal: 12.4s\tremaining: 42s\n",
      "572:\tlearn: 0.2891720\ttotal: 12.5s\tremaining: 41.9s\n",
      "573:\tlearn: 0.2890754\ttotal: 12.5s\tremaining: 41.9s\n",
      "574:\tlearn: 0.2889369\ttotal: 12.5s\tremaining: 41.9s\n",
      "575:\tlearn: 0.2888661\ttotal: 12.5s\tremaining: 41.9s\n",
      "576:\tlearn: 0.2886856\ttotal: 12.6s\tremaining: 41.8s\n",
      "577:\tlearn: 0.2885411\ttotal: 12.6s\tremaining: 41.8s\n",
      "578:\tlearn: 0.2884719\ttotal: 12.6s\tremaining: 41.8s\n",
      "579:\tlearn: 0.2881762\ttotal: 12.6s\tremaining: 41.8s\n",
      "580:\tlearn: 0.2881213\ttotal: 12.6s\tremaining: 41.7s\n",
      "581:\tlearn: 0.2880079\ttotal: 12.7s\tremaining: 41.7s\n",
      "582:\tlearn: 0.2879016\ttotal: 12.7s\tremaining: 41.7s\n",
      "583:\tlearn: 0.2878059\ttotal: 12.7s\tremaining: 41.7s\n",
      "584:\tlearn: 0.2877452\ttotal: 12.7s\tremaining: 41.6s\n",
      "585:\tlearn: 0.2876283\ttotal: 12.7s\tremaining: 41.6s\n",
      "586:\tlearn: 0.2875578\ttotal: 12.8s\tremaining: 41.6s\n",
      "587:\tlearn: 0.2874638\ttotal: 12.8s\tremaining: 41.6s\n",
      "588:\tlearn: 0.2873346\ttotal: 12.8s\tremaining: 41.5s\n",
      "589:\tlearn: 0.2871747\ttotal: 12.8s\tremaining: 41.5s\n",
      "590:\tlearn: 0.2870450\ttotal: 12.8s\tremaining: 41.5s\n",
      "591:\tlearn: 0.2869749\ttotal: 12.9s\tremaining: 41.5s\n",
      "592:\tlearn: 0.2868464\ttotal: 12.9s\tremaining: 41.4s\n",
      "593:\tlearn: 0.2867841\ttotal: 12.9s\tremaining: 41.4s\n",
      "594:\tlearn: 0.2865619\ttotal: 12.9s\tremaining: 41.4s\n",
      "595:\tlearn: 0.2865013\ttotal: 12.9s\tremaining: 41.4s\n",
      "596:\tlearn: 0.2863977\ttotal: 13s\tremaining: 41.3s\n",
      "597:\tlearn: 0.2863306\ttotal: 13s\tremaining: 41.3s\n",
      "598:\tlearn: 0.2862477\ttotal: 13s\tremaining: 41.3s\n",
      "599:\tlearn: 0.2861374\ttotal: 13s\tremaining: 41.3s\n",
      "600:\tlearn: 0.2860394\ttotal: 13.1s\tremaining: 41.3s\n",
      "601:\tlearn: 0.2859549\ttotal: 13.1s\tremaining: 41.2s\n",
      "602:\tlearn: 0.2858748\ttotal: 13.1s\tremaining: 41.2s\n",
      "603:\tlearn: 0.2857686\ttotal: 13.1s\tremaining: 41.2s\n",
      "604:\tlearn: 0.2855753\ttotal: 13.1s\tremaining: 41.2s\n",
      "605:\tlearn: 0.2854367\ttotal: 13.2s\tremaining: 41.2s\n",
      "606:\tlearn: 0.2853052\ttotal: 13.2s\tremaining: 41.1s\n",
      "607:\tlearn: 0.2852576\ttotal: 13.2s\tremaining: 41.1s\n",
      "608:\tlearn: 0.2851425\ttotal: 13.2s\tremaining: 41.1s\n",
      "609:\tlearn: 0.2850524\ttotal: 13.3s\tremaining: 41.1s\n",
      "610:\tlearn: 0.2849564\ttotal: 13.3s\tremaining: 41s\n",
      "611:\tlearn: 0.2848549\ttotal: 13.3s\tremaining: 41s\n",
      "612:\tlearn: 0.2846689\ttotal: 13.3s\tremaining: 41s\n",
      "613:\tlearn: 0.2845666\ttotal: 13.3s\tremaining: 41s\n",
      "614:\tlearn: 0.2844606\ttotal: 13.4s\tremaining: 41s\n",
      "615:\tlearn: 0.2843216\ttotal: 13.4s\tremaining: 40.9s\n",
      "616:\tlearn: 0.2842586\ttotal: 13.4s\tremaining: 40.9s\n",
      "617:\tlearn: 0.2842019\ttotal: 13.4s\tremaining: 40.9s\n",
      "618:\tlearn: 0.2840346\ttotal: 13.5s\tremaining: 40.9s\n",
      "619:\tlearn: 0.2839099\ttotal: 13.5s\tremaining: 40.9s\n",
      "620:\tlearn: 0.2837139\ttotal: 13.5s\tremaining: 40.8s\n",
      "621:\tlearn: 0.2836413\ttotal: 13.5s\tremaining: 40.8s\n",
      "622:\tlearn: 0.2835922\ttotal: 13.5s\tremaining: 40.8s\n",
      "623:\tlearn: 0.2835234\ttotal: 13.6s\tremaining: 40.8s\n",
      "624:\tlearn: 0.2833603\ttotal: 13.6s\tremaining: 40.8s\n",
      "625:\tlearn: 0.2832692\ttotal: 13.6s\tremaining: 40.7s\n",
      "626:\tlearn: 0.2832045\ttotal: 13.6s\tremaining: 40.7s\n",
      "627:\tlearn: 0.2830510\ttotal: 13.7s\tremaining: 40.7s\n",
      "628:\tlearn: 0.2829823\ttotal: 13.7s\tremaining: 40.7s\n",
      "629:\tlearn: 0.2829163\ttotal: 13.7s\tremaining: 40.7s\n",
      "630:\tlearn: 0.2828379\ttotal: 13.7s\tremaining: 40.6s\n",
      "631:\tlearn: 0.2827623\ttotal: 13.7s\tremaining: 40.6s\n",
      "632:\tlearn: 0.2826613\ttotal: 13.8s\tremaining: 40.6s\n",
      "633:\tlearn: 0.2825854\ttotal: 13.8s\tremaining: 40.6s\n",
      "634:\tlearn: 0.2825060\ttotal: 13.8s\tremaining: 40.5s\n",
      "635:\tlearn: 0.2824286\ttotal: 13.8s\tremaining: 40.5s\n",
      "636:\tlearn: 0.2823735\ttotal: 13.8s\tremaining: 40.5s\n",
      "637:\tlearn: 0.2822899\ttotal: 13.9s\tremaining: 40.5s\n",
      "638:\tlearn: 0.2821144\ttotal: 13.9s\tremaining: 40.5s\n",
      "639:\tlearn: 0.2820333\ttotal: 13.9s\tremaining: 40.4s\n",
      "640:\tlearn: 0.2819607\ttotal: 13.9s\tremaining: 40.4s\n",
      "641:\tlearn: 0.2818807\ttotal: 14s\tremaining: 40.4s\n",
      "642:\tlearn: 0.2817308\ttotal: 14s\tremaining: 40.4s\n",
      "643:\tlearn: 0.2816415\ttotal: 14s\tremaining: 40.3s\n",
      "644:\tlearn: 0.2815960\ttotal: 14s\tremaining: 40.3s\n",
      "645:\tlearn: 0.2815461\ttotal: 14s\tremaining: 40.3s\n",
      "646:\tlearn: 0.2814587\ttotal: 14.1s\tremaining: 40.3s\n",
      "647:\tlearn: 0.2813022\ttotal: 14.1s\tremaining: 40.3s\n",
      "648:\tlearn: 0.2812579\ttotal: 14.1s\tremaining: 40.2s\n",
      "649:\tlearn: 0.2812110\ttotal: 14.1s\tremaining: 40.2s\n",
      "650:\tlearn: 0.2810520\ttotal: 14.2s\tremaining: 40.2s\n",
      "651:\tlearn: 0.2809848\ttotal: 14.2s\tremaining: 40.2s\n",
      "652:\tlearn: 0.2808939\ttotal: 14.2s\tremaining: 40.1s\n",
      "653:\tlearn: 0.2807104\ttotal: 14.2s\tremaining: 40.1s\n",
      "654:\tlearn: 0.2806235\ttotal: 14.2s\tremaining: 40.1s\n",
      "655:\tlearn: 0.2805691\ttotal: 14.3s\tremaining: 40.1s\n",
      "656:\tlearn: 0.2804497\ttotal: 14.3s\tremaining: 40.1s\n",
      "657:\tlearn: 0.2803896\ttotal: 14.3s\tremaining: 40s\n",
      "658:\tlearn: 0.2802866\ttotal: 14.3s\tremaining: 40s\n",
      "659:\tlearn: 0.2801546\ttotal: 14.3s\tremaining: 40s\n",
      "660:\tlearn: 0.2800960\ttotal: 14.4s\tremaining: 40s\n",
      "661:\tlearn: 0.2798828\ttotal: 14.4s\tremaining: 40s\n",
      "662:\tlearn: 0.2798131\ttotal: 14.4s\tremaining: 39.9s\n",
      "663:\tlearn: 0.2797524\ttotal: 14.4s\tremaining: 39.9s\n",
      "664:\tlearn: 0.2797024\ttotal: 14.5s\tremaining: 39.9s\n",
      "665:\tlearn: 0.2796211\ttotal: 14.5s\tremaining: 39.9s\n",
      "666:\tlearn: 0.2795471\ttotal: 14.5s\tremaining: 39.8s\n",
      "667:\tlearn: 0.2794925\ttotal: 14.5s\tremaining: 39.8s\n",
      "668:\tlearn: 0.2794042\ttotal: 14.5s\tremaining: 39.8s\n",
      "669:\tlearn: 0.2792472\ttotal: 14.6s\tremaining: 39.8s\n",
      "670:\tlearn: 0.2791933\ttotal: 14.6s\tremaining: 39.8s\n",
      "671:\tlearn: 0.2791391\ttotal: 14.6s\tremaining: 39.7s\n",
      "672:\tlearn: 0.2790953\ttotal: 14.6s\tremaining: 39.7s\n",
      "673:\tlearn: 0.2790273\ttotal: 14.7s\tremaining: 39.7s\n",
      "674:\tlearn: 0.2787705\ttotal: 14.7s\tremaining: 39.7s\n",
      "675:\tlearn: 0.2786339\ttotal: 14.7s\tremaining: 39.6s\n",
      "676:\tlearn: 0.2785575\ttotal: 14.7s\tremaining: 39.6s\n",
      "677:\tlearn: 0.2783541\ttotal: 14.7s\tremaining: 39.6s\n",
      "678:\tlearn: 0.2782916\ttotal: 14.8s\tremaining: 39.6s\n",
      "679:\tlearn: 0.2782427\ttotal: 14.8s\tremaining: 39.6s\n",
      "680:\tlearn: 0.2780720\ttotal: 14.8s\tremaining: 39.5s\n",
      "681:\tlearn: 0.2779733\ttotal: 14.8s\tremaining: 39.5s\n",
      "682:\tlearn: 0.2778133\ttotal: 14.8s\tremaining: 39.5s\n",
      "683:\tlearn: 0.2777815\ttotal: 14.9s\tremaining: 39.5s\n",
      "684:\tlearn: 0.2777374\ttotal: 14.9s\tremaining: 39.4s\n",
      "685:\tlearn: 0.2775201\ttotal: 14.9s\tremaining: 39.4s\n",
      "686:\tlearn: 0.2773802\ttotal: 14.9s\tremaining: 39.4s\n",
      "687:\tlearn: 0.2771373\ttotal: 14.9s\tremaining: 39.4s\n",
      "688:\tlearn: 0.2770886\ttotal: 15s\tremaining: 39.4s\n",
      "689:\tlearn: 0.2770387\ttotal: 15s\tremaining: 39.3s\n",
      "690:\tlearn: 0.2769458\ttotal: 15s\tremaining: 39.3s\n",
      "691:\tlearn: 0.2767493\ttotal: 15s\tremaining: 39.3s\n",
      "692:\tlearn: 0.2766930\ttotal: 15.1s\tremaining: 39.3s\n",
      "693:\tlearn: 0.2766183\ttotal: 15.1s\tremaining: 39.2s\n",
      "694:\tlearn: 0.2765512\ttotal: 15.1s\tremaining: 39.2s\n",
      "695:\tlearn: 0.2764847\ttotal: 15.1s\tremaining: 39.2s\n",
      "696:\tlearn: 0.2764268\ttotal: 15.1s\tremaining: 39.2s\n",
      "697:\tlearn: 0.2762998\ttotal: 15.2s\tremaining: 39.2s\n",
      "698:\tlearn: 0.2762141\ttotal: 15.2s\tremaining: 39.1s\n",
      "699:\tlearn: 0.2761595\ttotal: 15.2s\tremaining: 39.1s\n",
      "700:\tlearn: 0.2760569\ttotal: 15.2s\tremaining: 39.1s\n",
      "701:\tlearn: 0.2759945\ttotal: 15.3s\tremaining: 39.1s\n",
      "702:\tlearn: 0.2759348\ttotal: 15.3s\tremaining: 39s\n",
      "703:\tlearn: 0.2758715\ttotal: 15.3s\tremaining: 39s\n",
      "704:\tlearn: 0.2758152\ttotal: 15.3s\tremaining: 39s\n",
      "705:\tlearn: 0.2757543\ttotal: 15.3s\tremaining: 39s\n",
      "706:\tlearn: 0.2755635\ttotal: 15.4s\tremaining: 39s\n",
      "707:\tlearn: 0.2754993\ttotal: 15.4s\tremaining: 38.9s\n",
      "708:\tlearn: 0.2754411\ttotal: 15.4s\tremaining: 38.9s\n",
      "709:\tlearn: 0.2752831\ttotal: 15.4s\tremaining: 38.9s\n",
      "710:\tlearn: 0.2751399\ttotal: 15.5s\tremaining: 38.9s\n",
      "711:\tlearn: 0.2750834\ttotal: 15.5s\tremaining: 38.9s\n",
      "712:\tlearn: 0.2750217\ttotal: 15.5s\tremaining: 38.8s\n",
      "713:\tlearn: 0.2749756\ttotal: 15.5s\tremaining: 38.8s\n",
      "714:\tlearn: 0.2749193\ttotal: 15.5s\tremaining: 38.8s\n",
      "715:\tlearn: 0.2748428\ttotal: 15.6s\tremaining: 38.8s\n",
      "716:\tlearn: 0.2747969\ttotal: 15.6s\tremaining: 38.7s\n",
      "717:\tlearn: 0.2747459\ttotal: 15.6s\tremaining: 38.7s\n",
      "718:\tlearn: 0.2746872\ttotal: 15.6s\tremaining: 38.7s\n",
      "719:\tlearn: 0.2746190\ttotal: 15.7s\tremaining: 38.7s\n",
      "720:\tlearn: 0.2745488\ttotal: 15.7s\tremaining: 38.7s\n",
      "721:\tlearn: 0.2744884\ttotal: 15.7s\tremaining: 38.6s\n",
      "722:\tlearn: 0.2743802\ttotal: 15.7s\tremaining: 38.6s\n",
      "723:\tlearn: 0.2741991\ttotal: 15.7s\tremaining: 38.6s\n",
      "724:\tlearn: 0.2741292\ttotal: 15.8s\tremaining: 38.6s\n",
      "725:\tlearn: 0.2740718\ttotal: 15.8s\tremaining: 38.6s\n",
      "726:\tlearn: 0.2738328\ttotal: 15.8s\tremaining: 38.5s\n",
      "727:\tlearn: 0.2737815\ttotal: 15.8s\tremaining: 38.5s\n",
      "728:\tlearn: 0.2736260\ttotal: 15.8s\tremaining: 38.5s\n",
      "729:\tlearn: 0.2735787\ttotal: 15.9s\tremaining: 38.5s\n",
      "730:\tlearn: 0.2735271\ttotal: 15.9s\tremaining: 38.5s\n",
      "731:\tlearn: 0.2733801\ttotal: 15.9s\tremaining: 38.4s\n",
      "732:\tlearn: 0.2733166\ttotal: 15.9s\tremaining: 38.4s\n",
      "733:\tlearn: 0.2731236\ttotal: 16s\tremaining: 38.4s\n",
      "734:\tlearn: 0.2730559\ttotal: 16s\tremaining: 38.4s\n",
      "735:\tlearn: 0.2730050\ttotal: 16s\tremaining: 38.3s\n",
      "736:\tlearn: 0.2729456\ttotal: 16s\tremaining: 38.3s\n",
      "737:\tlearn: 0.2728908\ttotal: 16s\tremaining: 38.3s\n",
      "738:\tlearn: 0.2728332\ttotal: 16.1s\tremaining: 38.3s\n",
      "739:\tlearn: 0.2727671\ttotal: 16.1s\tremaining: 38.3s\n",
      "740:\tlearn: 0.2726089\ttotal: 16.1s\tremaining: 38.2s\n",
      "741:\tlearn: 0.2725484\ttotal: 16.1s\tremaining: 38.2s\n",
      "742:\tlearn: 0.2724411\ttotal: 16.1s\tremaining: 38.2s\n",
      "743:\tlearn: 0.2723930\ttotal: 16.2s\tremaining: 38.2s\n",
      "744:\tlearn: 0.2723525\ttotal: 16.2s\tremaining: 38.1s\n",
      "745:\tlearn: 0.2722637\ttotal: 16.2s\tremaining: 38.1s\n",
      "746:\tlearn: 0.2721886\ttotal: 16.2s\tremaining: 38.1s\n",
      "747:\tlearn: 0.2721370\ttotal: 16.3s\tremaining: 38.1s\n",
      "748:\tlearn: 0.2720840\ttotal: 16.3s\tremaining: 38.1s\n",
      "749:\tlearn: 0.2720413\ttotal: 16.3s\tremaining: 38s\n",
      "750:\tlearn: 0.2719737\ttotal: 16.3s\tremaining: 38s\n",
      "751:\tlearn: 0.2719215\ttotal: 16.3s\tremaining: 38s\n",
      "752:\tlearn: 0.2718118\ttotal: 16.4s\tremaining: 38s\n",
      "753:\tlearn: 0.2717032\ttotal: 16.4s\tremaining: 38s\n",
      "754:\tlearn: 0.2716548\ttotal: 16.4s\tremaining: 37.9s\n",
      "755:\tlearn: 0.2716101\ttotal: 16.4s\tremaining: 37.9s\n",
      "756:\tlearn: 0.2715570\ttotal: 16.5s\tremaining: 37.9s\n",
      "757:\tlearn: 0.2715067\ttotal: 16.5s\tremaining: 37.9s\n",
      "758:\tlearn: 0.2713964\ttotal: 16.5s\tremaining: 37.8s\n",
      "759:\tlearn: 0.2713412\ttotal: 16.5s\tremaining: 37.8s\n",
      "760:\tlearn: 0.2712902\ttotal: 16.5s\tremaining: 37.8s\n",
      "761:\tlearn: 0.2712506\ttotal: 16.6s\tremaining: 37.8s\n",
      "762:\tlearn: 0.2711817\ttotal: 16.6s\tremaining: 37.8s\n",
      "763:\tlearn: 0.2711324\ttotal: 16.6s\tremaining: 37.7s\n",
      "764:\tlearn: 0.2710843\ttotal: 16.6s\tremaining: 37.7s\n",
      "765:\tlearn: 0.2709884\ttotal: 16.7s\tremaining: 37.7s\n",
      "766:\tlearn: 0.2709310\ttotal: 16.7s\tremaining: 37.7s\n",
      "767:\tlearn: 0.2708798\ttotal: 16.7s\tremaining: 37.6s\n",
      "768:\tlearn: 0.2708380\ttotal: 16.7s\tremaining: 37.6s\n",
      "769:\tlearn: 0.2707971\ttotal: 16.7s\tremaining: 37.6s\n",
      "770:\tlearn: 0.2707072\ttotal: 16.8s\tremaining: 37.6s\n",
      "771:\tlearn: 0.2706354\ttotal: 16.8s\tremaining: 37.5s\n",
      "772:\tlearn: 0.2705781\ttotal: 16.8s\tremaining: 37.5s\n",
      "773:\tlearn: 0.2704816\ttotal: 16.8s\tremaining: 37.5s\n",
      "774:\tlearn: 0.2703611\ttotal: 16.8s\tremaining: 37.5s\n",
      "775:\tlearn: 0.2703013\ttotal: 16.9s\tremaining: 37.5s\n",
      "776:\tlearn: 0.2702392\ttotal: 16.9s\tremaining: 37.4s\n",
      "777:\tlearn: 0.2701588\ttotal: 16.9s\tremaining: 37.4s\n",
      "778:\tlearn: 0.2701008\ttotal: 16.9s\tremaining: 37.4s\n",
      "779:\tlearn: 0.2700051\ttotal: 17s\tremaining: 37.4s\n",
      "780:\tlearn: 0.2699390\ttotal: 17s\tremaining: 37.4s\n",
      "781:\tlearn: 0.2698964\ttotal: 17s\tremaining: 37.3s\n",
      "782:\tlearn: 0.2698418\ttotal: 17s\tremaining: 37.3s\n",
      "783:\tlearn: 0.2697884\ttotal: 17s\tremaining: 37.3s\n",
      "784:\tlearn: 0.2697423\ttotal: 17.1s\tremaining: 37.3s\n",
      "785:\tlearn: 0.2695902\ttotal: 17.1s\tremaining: 37.3s\n",
      "786:\tlearn: 0.2695462\ttotal: 17.1s\tremaining: 37.2s\n",
      "787:\tlearn: 0.2694877\ttotal: 17.1s\tremaining: 37.2s\n",
      "788:\tlearn: 0.2693573\ttotal: 17.2s\tremaining: 37.2s\n",
      "789:\tlearn: 0.2692743\ttotal: 17.2s\tremaining: 37.2s\n",
      "790:\tlearn: 0.2692047\ttotal: 17.2s\tremaining: 37.2s\n",
      "791:\tlearn: 0.2691525\ttotal: 17.2s\tremaining: 37.1s\n",
      "792:\tlearn: 0.2690967\ttotal: 17.2s\tremaining: 37.1s\n",
      "793:\tlearn: 0.2690553\ttotal: 17.3s\tremaining: 37.1s\n",
      "794:\tlearn: 0.2690031\ttotal: 17.3s\tremaining: 37.1s\n",
      "795:\tlearn: 0.2689452\ttotal: 17.3s\tremaining: 37s\n",
      "796:\tlearn: 0.2688658\ttotal: 17.3s\tremaining: 37s\n",
      "797:\tlearn: 0.2687088\ttotal: 17.3s\tremaining: 37s\n",
      "798:\tlearn: 0.2685748\ttotal: 17.4s\tremaining: 37s\n",
      "799:\tlearn: 0.2685282\ttotal: 17.4s\tremaining: 37s\n",
      "800:\tlearn: 0.2684708\ttotal: 17.4s\tremaining: 36.9s\n",
      "801:\tlearn: 0.2684185\ttotal: 17.4s\tremaining: 36.9s\n",
      "802:\tlearn: 0.2683586\ttotal: 17.5s\tremaining: 36.9s\n",
      "803:\tlearn: 0.2683128\ttotal: 17.5s\tremaining: 36.9s\n",
      "804:\tlearn: 0.2682640\ttotal: 17.5s\tremaining: 36.9s\n",
      "805:\tlearn: 0.2682120\ttotal: 17.5s\tremaining: 36.8s\n",
      "806:\tlearn: 0.2681563\ttotal: 17.5s\tremaining: 36.8s\n",
      "807:\tlearn: 0.2680637\ttotal: 17.6s\tremaining: 36.8s\n",
      "808:\tlearn: 0.2680107\ttotal: 17.6s\tremaining: 36.8s\n",
      "809:\tlearn: 0.2679620\ttotal: 17.6s\tremaining: 36.7s\n",
      "810:\tlearn: 0.2679205\ttotal: 17.6s\tremaining: 36.7s\n",
      "811:\tlearn: 0.2678764\ttotal: 17.7s\tremaining: 36.7s\n",
      "812:\tlearn: 0.2678338\ttotal: 17.7s\tremaining: 36.7s\n",
      "813:\tlearn: 0.2677787\ttotal: 17.7s\tremaining: 36.6s\n",
      "814:\tlearn: 0.2677272\ttotal: 17.7s\tremaining: 36.6s\n",
      "815:\tlearn: 0.2676217\ttotal: 17.7s\tremaining: 36.6s\n",
      "816:\tlearn: 0.2675210\ttotal: 17.8s\tremaining: 36.6s\n",
      "817:\tlearn: 0.2674095\ttotal: 17.8s\tremaining: 36.6s\n",
      "818:\tlearn: 0.2673583\ttotal: 17.8s\tremaining: 36.5s\n",
      "819:\tlearn: 0.2672682\ttotal: 17.8s\tremaining: 36.5s\n",
      "820:\tlearn: 0.2672189\ttotal: 17.8s\tremaining: 36.5s\n",
      "821:\tlearn: 0.2671809\ttotal: 17.9s\tremaining: 36.5s\n",
      "822:\tlearn: 0.2671293\ttotal: 17.9s\tremaining: 36.4s\n",
      "823:\tlearn: 0.2669982\ttotal: 17.9s\tremaining: 36.4s\n",
      "824:\tlearn: 0.2669233\ttotal: 17.9s\tremaining: 36.4s\n",
      "825:\tlearn: 0.2668731\ttotal: 18s\tremaining: 36.4s\n",
      "826:\tlearn: 0.2668265\ttotal: 18s\tremaining: 36.4s\n",
      "827:\tlearn: 0.2667500\ttotal: 18s\tremaining: 36.3s\n",
      "828:\tlearn: 0.2666840\ttotal: 18s\tremaining: 36.3s\n",
      "829:\tlearn: 0.2665247\ttotal: 18s\tremaining: 36.3s\n",
      "830:\tlearn: 0.2664725\ttotal: 18.1s\tremaining: 36.3s\n",
      "831:\tlearn: 0.2664221\ttotal: 18.1s\tremaining: 36.3s\n",
      "832:\tlearn: 0.2663410\ttotal: 18.1s\tremaining: 36.2s\n",
      "833:\tlearn: 0.2662836\ttotal: 18.1s\tremaining: 36.2s\n",
      "834:\tlearn: 0.2662385\ttotal: 18.1s\tremaining: 36.2s\n",
      "835:\tlearn: 0.2661860\ttotal: 18.2s\tremaining: 36.2s\n",
      "836:\tlearn: 0.2661267\ttotal: 18.2s\tremaining: 36.2s\n",
      "837:\tlearn: 0.2660834\ttotal: 18.2s\tremaining: 36.1s\n",
      "838:\tlearn: 0.2659762\ttotal: 18.2s\tremaining: 36.1s\n",
      "839:\tlearn: 0.2658239\ttotal: 18.3s\tremaining: 36.1s\n",
      "840:\tlearn: 0.2657250\ttotal: 18.3s\tremaining: 36.1s\n",
      "841:\tlearn: 0.2656486\ttotal: 18.3s\tremaining: 36s\n",
      "842:\tlearn: 0.2656055\ttotal: 18.3s\tremaining: 36s\n",
      "843:\tlearn: 0.2655528\ttotal: 18.3s\tremaining: 36s\n",
      "844:\tlearn: 0.2654757\ttotal: 18.4s\tremaining: 36s\n",
      "845:\tlearn: 0.2653848\ttotal: 18.4s\tremaining: 35.9s\n",
      "846:\tlearn: 0.2652505\ttotal: 18.4s\tremaining: 35.9s\n",
      "847:\tlearn: 0.2652114\ttotal: 18.4s\tremaining: 35.9s\n",
      "848:\tlearn: 0.2651457\ttotal: 18.4s\tremaining: 35.9s\n",
      "849:\tlearn: 0.2651076\ttotal: 18.5s\tremaining: 35.9s\n",
      "850:\tlearn: 0.2649632\ttotal: 18.5s\tremaining: 35.8s\n",
      "851:\tlearn: 0.2649163\ttotal: 18.5s\tremaining: 35.8s\n",
      "852:\tlearn: 0.2648743\ttotal: 18.5s\tremaining: 35.8s\n",
      "853:\tlearn: 0.2648102\ttotal: 18.6s\tremaining: 35.8s\n",
      "854:\tlearn: 0.2647644\ttotal: 18.6s\tremaining: 35.7s\n",
      "855:\tlearn: 0.2647170\ttotal: 18.6s\tremaining: 35.7s\n",
      "856:\tlearn: 0.2646676\ttotal: 18.6s\tremaining: 35.7s\n",
      "857:\tlearn: 0.2646231\ttotal: 18.6s\tremaining: 35.7s\n",
      "858:\tlearn: 0.2645722\ttotal: 18.7s\tremaining: 35.6s\n",
      "859:\tlearn: 0.2645051\ttotal: 18.7s\tremaining: 35.6s\n",
      "860:\tlearn: 0.2644613\ttotal: 18.7s\tremaining: 35.6s\n",
      "861:\tlearn: 0.2643851\ttotal: 18.7s\tremaining: 35.6s\n",
      "862:\tlearn: 0.2643305\ttotal: 18.7s\tremaining: 35.6s\n",
      "863:\tlearn: 0.2642881\ttotal: 18.8s\tremaining: 35.5s\n",
      "864:\tlearn: 0.2642339\ttotal: 18.8s\tremaining: 35.5s\n",
      "865:\tlearn: 0.2641723\ttotal: 18.8s\tremaining: 35.5s\n",
      "866:\tlearn: 0.2641335\ttotal: 18.8s\tremaining: 35.5s\n",
      "867:\tlearn: 0.2641021\ttotal: 18.9s\tremaining: 35.4s\n",
      "868:\tlearn: 0.2640610\ttotal: 18.9s\tremaining: 35.4s\n",
      "869:\tlearn: 0.2640214\ttotal: 18.9s\tremaining: 35.4s\n",
      "870:\tlearn: 0.2639762\ttotal: 18.9s\tremaining: 35.4s\n",
      "871:\tlearn: 0.2639356\ttotal: 18.9s\tremaining: 35.3s\n",
      "872:\tlearn: 0.2638921\ttotal: 19s\tremaining: 35.3s\n",
      "873:\tlearn: 0.2637717\ttotal: 19s\tremaining: 35.3s\n",
      "874:\tlearn: 0.2637333\ttotal: 19s\tremaining: 35.3s\n",
      "875:\tlearn: 0.2636778\ttotal: 19s\tremaining: 35.3s\n",
      "876:\tlearn: 0.2635948\ttotal: 19s\tremaining: 35.2s\n",
      "877:\tlearn: 0.2634889\ttotal: 19.1s\tremaining: 35.2s\n",
      "878:\tlearn: 0.2634378\ttotal: 19.1s\tremaining: 35.2s\n",
      "879:\tlearn: 0.2633941\ttotal: 19.1s\tremaining: 35.2s\n",
      "880:\tlearn: 0.2633505\ttotal: 19.1s\tremaining: 35.1s\n",
      "881:\tlearn: 0.2633120\ttotal: 19.1s\tremaining: 35.1s\n",
      "882:\tlearn: 0.2632362\ttotal: 19.2s\tremaining: 35.1s\n",
      "883:\tlearn: 0.2631889\ttotal: 19.2s\tremaining: 35.1s\n",
      "884:\tlearn: 0.2631531\ttotal: 19.2s\tremaining: 35s\n",
      "885:\tlearn: 0.2630783\ttotal: 19.2s\tremaining: 35s\n",
      "886:\tlearn: 0.2630247\ttotal: 19.2s\tremaining: 35s\n",
      "887:\tlearn: 0.2629779\ttotal: 19.3s\tremaining: 35s\n",
      "888:\tlearn: 0.2629344\ttotal: 19.3s\tremaining: 34.9s\n",
      "889:\tlearn: 0.2629022\ttotal: 19.3s\tremaining: 34.9s\n",
      "890:\tlearn: 0.2628628\ttotal: 19.3s\tremaining: 34.9s\n",
      "891:\tlearn: 0.2627668\ttotal: 19.3s\tremaining: 34.9s\n",
      "892:\tlearn: 0.2627297\ttotal: 19.4s\tremaining: 34.8s\n",
      "893:\tlearn: 0.2626894\ttotal: 19.4s\tremaining: 34.8s\n",
      "894:\tlearn: 0.2626385\ttotal: 19.4s\tremaining: 34.8s\n",
      "895:\tlearn: 0.2625663\ttotal: 19.4s\tremaining: 34.8s\n",
      "896:\tlearn: 0.2625205\ttotal: 19.4s\tremaining: 34.7s\n",
      "897:\tlearn: 0.2624766\ttotal: 19.5s\tremaining: 34.7s\n",
      "898:\tlearn: 0.2624288\ttotal: 19.5s\tremaining: 34.7s\n",
      "899:\tlearn: 0.2623830\ttotal: 19.5s\tremaining: 34.7s\n",
      "900:\tlearn: 0.2623450\ttotal: 19.5s\tremaining: 34.6s\n",
      "901:\tlearn: 0.2622831\ttotal: 19.5s\tremaining: 34.6s\n",
      "902:\tlearn: 0.2622268\ttotal: 19.6s\tremaining: 34.6s\n",
      "903:\tlearn: 0.2621894\ttotal: 19.6s\tremaining: 34.6s\n",
      "904:\tlearn: 0.2620731\ttotal: 19.6s\tremaining: 34.5s\n",
      "905:\tlearn: 0.2619788\ttotal: 19.6s\tremaining: 34.5s\n",
      "906:\tlearn: 0.2619381\ttotal: 19.6s\tremaining: 34.5s\n",
      "907:\tlearn: 0.2617571\ttotal: 19.7s\tremaining: 34.5s\n",
      "908:\tlearn: 0.2617020\ttotal: 19.7s\tremaining: 34.4s\n",
      "909:\tlearn: 0.2616480\ttotal: 19.7s\tremaining: 34.4s\n",
      "910:\tlearn: 0.2615986\ttotal: 19.7s\tremaining: 34.4s\n",
      "911:\tlearn: 0.2615548\ttotal: 19.7s\tremaining: 34.4s\n",
      "912:\tlearn: 0.2614224\ttotal: 19.8s\tremaining: 34.3s\n",
      "913:\tlearn: 0.2613712\ttotal: 19.8s\tremaining: 34.3s\n",
      "914:\tlearn: 0.2613269\ttotal: 19.8s\tremaining: 34.3s\n",
      "915:\tlearn: 0.2612838\ttotal: 19.8s\tremaining: 34.3s\n",
      "916:\tlearn: 0.2612485\ttotal: 19.8s\tremaining: 34.2s\n",
      "917:\tlearn: 0.2612050\ttotal: 19.9s\tremaining: 34.2s\n",
      "918:\tlearn: 0.2611306\ttotal: 19.9s\tremaining: 34.2s\n",
      "919:\tlearn: 0.2610867\ttotal: 19.9s\tremaining: 34.2s\n",
      "920:\tlearn: 0.2610378\ttotal: 19.9s\tremaining: 34.1s\n",
      "921:\tlearn: 0.2610060\ttotal: 19.9s\tremaining: 34.1s\n",
      "922:\tlearn: 0.2609651\ttotal: 20s\tremaining: 34.1s\n",
      "923:\tlearn: 0.2609317\ttotal: 20s\tremaining: 34.1s\n",
      "924:\tlearn: 0.2608960\ttotal: 20s\tremaining: 34s\n",
      "925:\tlearn: 0.2608575\ttotal: 20s\tremaining: 34s\n",
      "926:\tlearn: 0.2608170\ttotal: 20s\tremaining: 34s\n",
      "927:\tlearn: 0.2607009\ttotal: 20.1s\tremaining: 34s\n",
      "928:\tlearn: 0.2606569\ttotal: 20.1s\tremaining: 33.9s\n",
      "929:\tlearn: 0.2606072\ttotal: 20.1s\tremaining: 33.9s\n",
      "930:\tlearn: 0.2605712\ttotal: 20.1s\tremaining: 33.9s\n",
      "931:\tlearn: 0.2605301\ttotal: 20.1s\tremaining: 33.9s\n",
      "932:\tlearn: 0.2604874\ttotal: 20.2s\tremaining: 33.9s\n",
      "933:\tlearn: 0.2604446\ttotal: 20.2s\tremaining: 33.8s\n",
      "934:\tlearn: 0.2603747\ttotal: 20.2s\tremaining: 33.8s\n",
      "935:\tlearn: 0.2603351\ttotal: 20.2s\tremaining: 33.8s\n",
      "936:\tlearn: 0.2602238\ttotal: 20.2s\tremaining: 33.7s\n",
      "937:\tlearn: 0.2601799\ttotal: 20.3s\tremaining: 33.7s\n",
      "938:\tlearn: 0.2601264\ttotal: 20.3s\tremaining: 33.7s\n",
      "939:\tlearn: 0.2600750\ttotal: 20.3s\tremaining: 33.7s\n",
      "940:\tlearn: 0.2600221\ttotal: 20.3s\tremaining: 33.7s\n",
      "941:\tlearn: 0.2599708\ttotal: 20.3s\tremaining: 33.6s\n",
      "942:\tlearn: 0.2599348\ttotal: 20.4s\tremaining: 33.6s\n",
      "943:\tlearn: 0.2598889\ttotal: 20.4s\tremaining: 33.6s\n",
      "944:\tlearn: 0.2596938\ttotal: 20.4s\tremaining: 33.6s\n",
      "945:\tlearn: 0.2596416\ttotal: 20.4s\tremaining: 33.5s\n",
      "946:\tlearn: 0.2595925\ttotal: 20.4s\tremaining: 33.5s\n",
      "947:\tlearn: 0.2594677\ttotal: 20.5s\tremaining: 33.5s\n",
      "948:\tlearn: 0.2594280\ttotal: 20.5s\tremaining: 33.5s\n",
      "949:\tlearn: 0.2593695\ttotal: 20.5s\tremaining: 33.4s\n",
      "950:\tlearn: 0.2593260\ttotal: 20.5s\tremaining: 33.4s\n",
      "951:\tlearn: 0.2592782\ttotal: 20.5s\tremaining: 33.4s\n",
      "952:\tlearn: 0.2592398\ttotal: 20.6s\tremaining: 33.4s\n",
      "953:\tlearn: 0.2591874\ttotal: 20.6s\tremaining: 33.3s\n",
      "954:\tlearn: 0.2590980\ttotal: 20.6s\tremaining: 33.3s\n",
      "955:\tlearn: 0.2590634\ttotal: 20.6s\tremaining: 33.3s\n",
      "956:\tlearn: 0.2590313\ttotal: 20.6s\tremaining: 33.3s\n",
      "957:\tlearn: 0.2589918\ttotal: 20.6s\tremaining: 33.2s\n",
      "958:\tlearn: 0.2589495\ttotal: 20.7s\tremaining: 33.2s\n",
      "959:\tlearn: 0.2589105\ttotal: 20.7s\tremaining: 33.2s\n",
      "960:\tlearn: 0.2588586\ttotal: 20.7s\tremaining: 33.2s\n",
      "961:\tlearn: 0.2587166\ttotal: 20.7s\tremaining: 33.1s\n",
      "962:\tlearn: 0.2586687\ttotal: 20.8s\tremaining: 33.1s\n",
      "963:\tlearn: 0.2586298\ttotal: 20.8s\tremaining: 33.1s\n",
      "964:\tlearn: 0.2585916\ttotal: 20.8s\tremaining: 33.1s\n",
      "965:\tlearn: 0.2585563\ttotal: 20.8s\tremaining: 33s\n",
      "966:\tlearn: 0.2584722\ttotal: 20.8s\tremaining: 33s\n",
      "967:\tlearn: 0.2583697\ttotal: 20.8s\tremaining: 33s\n",
      "968:\tlearn: 0.2583271\ttotal: 20.9s\tremaining: 33s\n",
      "969:\tlearn: 0.2582864\ttotal: 20.9s\tremaining: 32.9s\n",
      "970:\tlearn: 0.2582073\ttotal: 20.9s\tremaining: 32.9s\n",
      "971:\tlearn: 0.2580842\ttotal: 20.9s\tremaining: 32.9s\n",
      "972:\tlearn: 0.2580353\ttotal: 20.9s\tremaining: 32.9s\n",
      "973:\tlearn: 0.2579389\ttotal: 21s\tremaining: 32.8s\n",
      "974:\tlearn: 0.2579017\ttotal: 21s\tremaining: 32.8s\n",
      "975:\tlearn: 0.2578613\ttotal: 21s\tremaining: 32.8s\n",
      "976:\tlearn: 0.2578122\ttotal: 21s\tremaining: 32.8s\n",
      "977:\tlearn: 0.2577543\ttotal: 21s\tremaining: 32.7s\n",
      "978:\tlearn: 0.2577212\ttotal: 21.1s\tremaining: 32.7s\n",
      "979:\tlearn: 0.2575699\ttotal: 21.1s\tremaining: 32.7s\n",
      "980:\tlearn: 0.2575213\ttotal: 21.1s\tremaining: 32.7s\n",
      "981:\tlearn: 0.2574241\ttotal: 21.1s\tremaining: 32.7s\n",
      "982:\tlearn: 0.2573875\ttotal: 21.1s\tremaining: 32.6s\n",
      "983:\tlearn: 0.2573443\ttotal: 21.2s\tremaining: 32.6s\n",
      "984:\tlearn: 0.2572980\ttotal: 21.2s\tremaining: 32.6s\n",
      "985:\tlearn: 0.2571459\ttotal: 21.2s\tremaining: 32.6s\n",
      "986:\tlearn: 0.2571021\ttotal: 21.2s\tremaining: 32.5s\n",
      "987:\tlearn: 0.2570699\ttotal: 21.2s\tremaining: 32.5s\n",
      "988:\tlearn: 0.2569968\ttotal: 21.3s\tremaining: 32.5s\n",
      "989:\tlearn: 0.2569545\ttotal: 21.3s\tremaining: 32.5s\n",
      "990:\tlearn: 0.2569040\ttotal: 21.3s\tremaining: 32.4s\n",
      "991:\tlearn: 0.2568581\ttotal: 21.3s\tremaining: 32.4s\n",
      "992:\tlearn: 0.2568165\ttotal: 21.3s\tremaining: 32.4s\n",
      "993:\tlearn: 0.2567556\ttotal: 21.4s\tremaining: 32.4s\n",
      "994:\tlearn: 0.2567065\ttotal: 21.4s\tremaining: 32.3s\n",
      "995:\tlearn: 0.2566677\ttotal: 21.4s\tremaining: 32.3s\n",
      "996:\tlearn: 0.2566311\ttotal: 21.4s\tremaining: 32.3s\n",
      "997:\tlearn: 0.2565868\ttotal: 21.4s\tremaining: 32.3s\n",
      "998:\tlearn: 0.2565267\ttotal: 21.5s\tremaining: 32.2s\n",
      "999:\tlearn: 0.2564923\ttotal: 21.5s\tremaining: 32.2s\n",
      "1000:\tlearn: 0.2564528\ttotal: 21.5s\tremaining: 32.2s\n",
      "1001:\tlearn: 0.2564010\ttotal: 21.5s\tremaining: 32.2s\n",
      "1002:\tlearn: 0.2563466\ttotal: 21.5s\tremaining: 32.1s\n",
      "1003:\tlearn: 0.2563059\ttotal: 21.6s\tremaining: 32.1s\n",
      "1004:\tlearn: 0.2562592\ttotal: 21.6s\tremaining: 32.1s\n",
      "1005:\tlearn: 0.2562158\ttotal: 21.6s\tremaining: 32.1s\n",
      "1006:\tlearn: 0.2561633\ttotal: 21.6s\tremaining: 32.1s\n",
      "1007:\tlearn: 0.2560511\ttotal: 21.6s\tremaining: 32s\n",
      "1008:\tlearn: 0.2560146\ttotal: 21.7s\tremaining: 32s\n",
      "1009:\tlearn: 0.2559728\ttotal: 21.7s\tremaining: 32s\n",
      "1010:\tlearn: 0.2558405\ttotal: 21.7s\tremaining: 32s\n",
      "1011:\tlearn: 0.2558041\ttotal: 21.7s\tremaining: 31.9s\n",
      "1012:\tlearn: 0.2557617\ttotal: 21.7s\tremaining: 31.9s\n",
      "1013:\tlearn: 0.2557070\ttotal: 21.8s\tremaining: 31.9s\n",
      "1014:\tlearn: 0.2556635\ttotal: 21.8s\tremaining: 31.9s\n",
      "1015:\tlearn: 0.2556118\ttotal: 21.8s\tremaining: 31.8s\n",
      "1016:\tlearn: 0.2555662\ttotal: 21.8s\tremaining: 31.8s\n",
      "1017:\tlearn: 0.2555061\ttotal: 21.8s\tremaining: 31.8s\n",
      "1018:\tlearn: 0.2554677\ttotal: 21.9s\tremaining: 31.8s\n",
      "1019:\tlearn: 0.2554207\ttotal: 21.9s\tremaining: 31.7s\n",
      "1020:\tlearn: 0.2553747\ttotal: 21.9s\tremaining: 31.7s\n",
      "1021:\tlearn: 0.2553362\ttotal: 21.9s\tremaining: 31.7s\n",
      "1022:\tlearn: 0.2552482\ttotal: 21.9s\tremaining: 31.7s\n",
      "1023:\tlearn: 0.2552029\ttotal: 22s\tremaining: 31.6s\n",
      "1024:\tlearn: 0.2551598\ttotal: 22s\tremaining: 31.6s\n",
      "1025:\tlearn: 0.2551270\ttotal: 22s\tremaining: 31.6s\n",
      "1026:\tlearn: 0.2550804\ttotal: 22s\tremaining: 31.6s\n",
      "1027:\tlearn: 0.2550496\ttotal: 22s\tremaining: 31.5s\n",
      "1028:\tlearn: 0.2549719\ttotal: 22.1s\tremaining: 31.5s\n",
      "1029:\tlearn: 0.2549276\ttotal: 22.1s\tremaining: 31.5s\n",
      "1030:\tlearn: 0.2547850\ttotal: 22.1s\tremaining: 31.5s\n",
      "1031:\tlearn: 0.2547520\ttotal: 22.1s\tremaining: 31.5s\n",
      "1032:\tlearn: 0.2547116\ttotal: 22.1s\tremaining: 31.4s\n",
      "1033:\tlearn: 0.2546045\ttotal: 22.1s\tremaining: 31.4s\n",
      "1034:\tlearn: 0.2545680\ttotal: 22.2s\tremaining: 31.4s\n",
      "1035:\tlearn: 0.2545354\ttotal: 22.2s\tremaining: 31.4s\n",
      "1036:\tlearn: 0.2544820\ttotal: 22.2s\tremaining: 31.3s\n",
      "1037:\tlearn: 0.2544472\ttotal: 22.2s\tremaining: 31.3s\n",
      "1038:\tlearn: 0.2544009\ttotal: 22.3s\tremaining: 31.3s\n",
      "1039:\tlearn: 0.2543679\ttotal: 22.3s\tremaining: 31.3s\n",
      "1040:\tlearn: 0.2543237\ttotal: 22.3s\tremaining: 31.2s\n",
      "1041:\tlearn: 0.2542846\ttotal: 22.3s\tremaining: 31.2s\n",
      "1042:\tlearn: 0.2542503\ttotal: 22.3s\tremaining: 31.2s\n",
      "1043:\tlearn: 0.2542178\ttotal: 22.3s\tremaining: 31.2s\n",
      "1044:\tlearn: 0.2541667\ttotal: 22.4s\tremaining: 31.1s\n",
      "1045:\tlearn: 0.2540907\ttotal: 22.4s\tremaining: 31.1s\n",
      "1046:\tlearn: 0.2540446\ttotal: 22.4s\tremaining: 31.1s\n",
      "1047:\tlearn: 0.2540037\ttotal: 22.4s\tremaining: 31.1s\n",
      "1048:\tlearn: 0.2539586\ttotal: 22.4s\tremaining: 31s\n",
      "1049:\tlearn: 0.2539098\ttotal: 22.5s\tremaining: 31s\n",
      "1050:\tlearn: 0.2538631\ttotal: 22.5s\tremaining: 31s\n",
      "1051:\tlearn: 0.2537923\ttotal: 22.5s\tremaining: 31s\n",
      "1052:\tlearn: 0.2537490\ttotal: 22.5s\tremaining: 30.9s\n",
      "1053:\tlearn: 0.2537144\ttotal: 22.5s\tremaining: 30.9s\n",
      "1054:\tlearn: 0.2536596\ttotal: 22.6s\tremaining: 30.9s\n",
      "1055:\tlearn: 0.2536060\ttotal: 22.6s\tremaining: 30.9s\n",
      "1056:\tlearn: 0.2535684\ttotal: 22.6s\tremaining: 30.8s\n",
      "1057:\tlearn: 0.2535152\ttotal: 22.6s\tremaining: 30.8s\n",
      "1058:\tlearn: 0.2534836\ttotal: 22.6s\tremaining: 30.8s\n",
      "1059:\tlearn: 0.2534170\ttotal: 22.6s\tremaining: 30.8s\n",
      "1060:\tlearn: 0.2533789\ttotal: 22.7s\tremaining: 30.7s\n",
      "1061:\tlearn: 0.2533365\ttotal: 22.7s\tremaining: 30.7s\n",
      "1062:\tlearn: 0.2532939\ttotal: 22.7s\tremaining: 30.7s\n",
      "1063:\tlearn: 0.2532565\ttotal: 22.7s\tremaining: 30.7s\n",
      "1064:\tlearn: 0.2532021\ttotal: 22.7s\tremaining: 30.6s\n",
      "1065:\tlearn: 0.2531599\ttotal: 22.8s\tremaining: 30.6s\n",
      "1066:\tlearn: 0.2531293\ttotal: 22.8s\tremaining: 30.6s\n",
      "1067:\tlearn: 0.2530985\ttotal: 22.8s\tremaining: 30.6s\n",
      "1068:\tlearn: 0.2530290\ttotal: 22.8s\tremaining: 30.5s\n",
      "1069:\tlearn: 0.2529874\ttotal: 22.8s\tremaining: 30.5s\n",
      "1070:\tlearn: 0.2529351\ttotal: 22.9s\tremaining: 30.5s\n",
      "1071:\tlearn: 0.2528929\ttotal: 22.9s\tremaining: 30.5s\n",
      "1072:\tlearn: 0.2528544\ttotal: 22.9s\tremaining: 30.5s\n",
      "1073:\tlearn: 0.2528197\ttotal: 22.9s\tremaining: 30.4s\n",
      "1074:\tlearn: 0.2527797\ttotal: 22.9s\tremaining: 30.4s\n",
      "1075:\tlearn: 0.2527333\ttotal: 23s\tremaining: 30.4s\n",
      "1076:\tlearn: 0.2526858\ttotal: 23s\tremaining: 30.4s\n",
      "1077:\tlearn: 0.2526018\ttotal: 23s\tremaining: 30.3s\n",
      "1078:\tlearn: 0.2525105\ttotal: 23s\tremaining: 30.3s\n",
      "1079:\tlearn: 0.2524748\ttotal: 23s\tremaining: 30.3s\n",
      "1080:\tlearn: 0.2524256\ttotal: 23.1s\tremaining: 30.3s\n",
      "1081:\tlearn: 0.2523665\ttotal: 23.1s\tremaining: 30.2s\n",
      "1082:\tlearn: 0.2523215\ttotal: 23.1s\tremaining: 30.2s\n",
      "1083:\tlearn: 0.2522769\ttotal: 23.1s\tremaining: 30.2s\n",
      "1084:\tlearn: 0.2522387\ttotal: 23.1s\tremaining: 30.2s\n",
      "1085:\tlearn: 0.2521957\ttotal: 23.2s\tremaining: 30.1s\n",
      "1086:\tlearn: 0.2521574\ttotal: 23.2s\tremaining: 30.1s\n",
      "1087:\tlearn: 0.2521094\ttotal: 23.2s\tremaining: 30.1s\n",
      "1088:\tlearn: 0.2520496\ttotal: 23.2s\tremaining: 30.1s\n",
      "1089:\tlearn: 0.2520141\ttotal: 23.2s\tremaining: 30.1s\n",
      "1090:\tlearn: 0.2519290\ttotal: 23.3s\tremaining: 30s\n",
      "1091:\tlearn: 0.2518925\ttotal: 23.3s\tremaining: 30s\n",
      "1092:\tlearn: 0.2518540\ttotal: 23.3s\tremaining: 30s\n",
      "1093:\tlearn: 0.2518167\ttotal: 23.3s\tremaining: 30s\n",
      "1094:\tlearn: 0.2517798\ttotal: 23.3s\tremaining: 29.9s\n",
      "1095:\tlearn: 0.2517470\ttotal: 23.3s\tremaining: 29.9s\n",
      "1096:\tlearn: 0.2517050\ttotal: 23.4s\tremaining: 29.9s\n",
      "1097:\tlearn: 0.2516644\ttotal: 23.4s\tremaining: 29.9s\n",
      "1098:\tlearn: 0.2516232\ttotal: 23.4s\tremaining: 29.8s\n",
      "1099:\tlearn: 0.2515889\ttotal: 23.4s\tremaining: 29.8s\n",
      "1100:\tlearn: 0.2515623\ttotal: 23.4s\tremaining: 29.8s\n",
      "1101:\tlearn: 0.2514889\ttotal: 23.5s\tremaining: 29.8s\n",
      "1102:\tlearn: 0.2514178\ttotal: 23.5s\tremaining: 29.7s\n",
      "1103:\tlearn: 0.2513318\ttotal: 23.5s\tremaining: 29.7s\n",
      "1104:\tlearn: 0.2512984\ttotal: 23.5s\tremaining: 29.7s\n",
      "1105:\tlearn: 0.2512609\ttotal: 23.5s\tremaining: 29.7s\n",
      "1106:\tlearn: 0.2512122\ttotal: 23.6s\tremaining: 29.6s\n",
      "1107:\tlearn: 0.2511670\ttotal: 23.6s\tremaining: 29.6s\n",
      "1108:\tlearn: 0.2510670\ttotal: 23.6s\tremaining: 29.6s\n",
      "1109:\tlearn: 0.2510025\ttotal: 23.6s\tremaining: 29.6s\n",
      "1110:\tlearn: 0.2509577\ttotal: 23.6s\tremaining: 29.5s\n",
      "1111:\tlearn: 0.2509251\ttotal: 23.7s\tremaining: 29.5s\n",
      "1112:\tlearn: 0.2508298\ttotal: 23.7s\tremaining: 29.5s\n",
      "1113:\tlearn: 0.2507738\ttotal: 23.7s\tremaining: 29.5s\n",
      "1114:\tlearn: 0.2507296\ttotal: 23.7s\tremaining: 29.5s\n",
      "1115:\tlearn: 0.2506910\ttotal: 23.7s\tremaining: 29.4s\n",
      "1116:\tlearn: 0.2506577\ttotal: 23.7s\tremaining: 29.4s\n",
      "1117:\tlearn: 0.2506246\ttotal: 23.8s\tremaining: 29.4s\n",
      "1118:\tlearn: 0.2505826\ttotal: 23.8s\tremaining: 29.4s\n",
      "1119:\tlearn: 0.2505503\ttotal: 23.8s\tremaining: 29.3s\n",
      "1120:\tlearn: 0.2505112\ttotal: 23.8s\tremaining: 29.3s\n",
      "1121:\tlearn: 0.2504680\ttotal: 23.8s\tremaining: 29.3s\n",
      "1122:\tlearn: 0.2503482\ttotal: 23.9s\tremaining: 29.3s\n",
      "1123:\tlearn: 0.2503052\ttotal: 23.9s\tremaining: 29.2s\n",
      "1124:\tlearn: 0.2502636\ttotal: 23.9s\tremaining: 29.2s\n",
      "1125:\tlearn: 0.2502258\ttotal: 23.9s\tremaining: 29.2s\n",
      "1126:\tlearn: 0.2501889\ttotal: 23.9s\tremaining: 29.2s\n",
      "1127:\tlearn: 0.2501487\ttotal: 24s\tremaining: 29.1s\n",
      "1128:\tlearn: 0.2501092\ttotal: 24s\tremaining: 29.1s\n",
      "1129:\tlearn: 0.2500362\ttotal: 24s\tremaining: 29.1s\n",
      "1130:\tlearn: 0.2499942\ttotal: 24s\tremaining: 29.1s\n",
      "1131:\tlearn: 0.2499491\ttotal: 24s\tremaining: 29s\n",
      "1132:\tlearn: 0.2498842\ttotal: 24.1s\tremaining: 29s\n",
      "1133:\tlearn: 0.2498565\ttotal: 24.1s\tremaining: 29s\n",
      "1134:\tlearn: 0.2497980\ttotal: 24.1s\tremaining: 29s\n",
      "1135:\tlearn: 0.2497215\ttotal: 24.1s\tremaining: 29s\n",
      "1136:\tlearn: 0.2496629\ttotal: 24.1s\tremaining: 28.9s\n",
      "1137:\tlearn: 0.2495663\ttotal: 24.2s\tremaining: 28.9s\n",
      "1138:\tlearn: 0.2495210\ttotal: 24.2s\tremaining: 28.9s\n",
      "1139:\tlearn: 0.2494727\ttotal: 24.2s\tremaining: 28.9s\n",
      "1140:\tlearn: 0.2493598\ttotal: 24.2s\tremaining: 28.8s\n",
      "1141:\tlearn: 0.2493057\ttotal: 24.2s\tremaining: 28.8s\n",
      "1142:\tlearn: 0.2492668\ttotal: 24.3s\tremaining: 28.8s\n",
      "1143:\tlearn: 0.2492336\ttotal: 24.3s\tremaining: 28.8s\n",
      "1144:\tlearn: 0.2491887\ttotal: 24.3s\tremaining: 28.8s\n",
      "1145:\tlearn: 0.2490855\ttotal: 24.3s\tremaining: 28.7s\n",
      "1146:\tlearn: 0.2490471\ttotal: 24.3s\tremaining: 28.7s\n",
      "1147:\tlearn: 0.2490196\ttotal: 24.4s\tremaining: 28.7s\n",
      "1148:\tlearn: 0.2489937\ttotal: 24.4s\tremaining: 28.7s\n",
      "1149:\tlearn: 0.2489479\ttotal: 24.4s\tremaining: 28.6s\n",
      "1150:\tlearn: 0.2489134\ttotal: 24.4s\tremaining: 28.6s\n",
      "1151:\tlearn: 0.2488092\ttotal: 24.4s\tremaining: 28.6s\n",
      "1152:\tlearn: 0.2487752\ttotal: 24.4s\tremaining: 28.6s\n",
      "1153:\tlearn: 0.2486529\ttotal: 24.5s\tremaining: 28.5s\n",
      "1154:\tlearn: 0.2486185\ttotal: 24.5s\tremaining: 28.5s\n",
      "1155:\tlearn: 0.2485793\ttotal: 24.5s\tremaining: 28.5s\n",
      "1156:\tlearn: 0.2484968\ttotal: 24.5s\tremaining: 28.5s\n",
      "1157:\tlearn: 0.2484575\ttotal: 24.5s\tremaining: 28.4s\n",
      "1158:\tlearn: 0.2484146\ttotal: 24.6s\tremaining: 28.4s\n",
      "1159:\tlearn: 0.2483679\ttotal: 24.6s\tremaining: 28.4s\n",
      "1160:\tlearn: 0.2482771\ttotal: 24.6s\tremaining: 28.4s\n",
      "1161:\tlearn: 0.2482436\ttotal: 24.6s\tremaining: 28.3s\n",
      "1162:\tlearn: 0.2481714\ttotal: 24.6s\tremaining: 28.3s\n",
      "1163:\tlearn: 0.2481345\ttotal: 24.7s\tremaining: 28.3s\n",
      "1164:\tlearn: 0.2481022\ttotal: 24.7s\tremaining: 28.3s\n",
      "1165:\tlearn: 0.2480644\ttotal: 24.7s\tremaining: 28.2s\n",
      "1166:\tlearn: 0.2480250\ttotal: 24.7s\tremaining: 28.2s\n",
      "1167:\tlearn: 0.2479709\ttotal: 24.7s\tremaining: 28.2s\n",
      "1168:\tlearn: 0.2479240\ttotal: 24.7s\tremaining: 28.2s\n",
      "1169:\tlearn: 0.2478813\ttotal: 24.8s\tremaining: 28.2s\n",
      "1170:\tlearn: 0.2478484\ttotal: 24.8s\tremaining: 28.1s\n",
      "1171:\tlearn: 0.2478129\ttotal: 24.8s\tremaining: 28.1s\n",
      "1172:\tlearn: 0.2477598\ttotal: 24.8s\tremaining: 28.1s\n",
      "1173:\tlearn: 0.2477148\ttotal: 24.8s\tremaining: 28.1s\n",
      "1174:\tlearn: 0.2476581\ttotal: 24.9s\tremaining: 28s\n",
      "1175:\tlearn: 0.2476175\ttotal: 24.9s\tremaining: 28s\n",
      "1176:\tlearn: 0.2475791\ttotal: 24.9s\tremaining: 28s\n",
      "1177:\tlearn: 0.2475466\ttotal: 24.9s\tremaining: 28s\n",
      "1178:\tlearn: 0.2475125\ttotal: 24.9s\tremaining: 27.9s\n",
      "1179:\tlearn: 0.2474714\ttotal: 25s\tremaining: 27.9s\n",
      "1180:\tlearn: 0.2474322\ttotal: 25s\tremaining: 27.9s\n",
      "1181:\tlearn: 0.2474011\ttotal: 25s\tremaining: 27.9s\n",
      "1182:\tlearn: 0.2473539\ttotal: 25s\tremaining: 27.8s\n",
      "1183:\tlearn: 0.2473102\ttotal: 25s\tremaining: 27.8s\n",
      "1184:\tlearn: 0.2472705\ttotal: 25s\tremaining: 27.8s\n",
      "1185:\tlearn: 0.2472330\ttotal: 25.1s\tremaining: 27.8s\n",
      "1186:\tlearn: 0.2472014\ttotal: 25.1s\tremaining: 27.8s\n",
      "1187:\tlearn: 0.2471503\ttotal: 25.1s\tremaining: 27.7s\n",
      "1188:\tlearn: 0.2470888\ttotal: 25.1s\tremaining: 27.7s\n",
      "1189:\tlearn: 0.2470143\ttotal: 25.1s\tremaining: 27.7s\n",
      "1190:\tlearn: 0.2469674\ttotal: 25.2s\tremaining: 27.7s\n",
      "1191:\tlearn: 0.2469375\ttotal: 25.2s\tremaining: 27.6s\n",
      "1192:\tlearn: 0.2468909\ttotal: 25.2s\tremaining: 27.6s\n",
      "1193:\tlearn: 0.2468606\ttotal: 25.2s\tremaining: 27.6s\n",
      "1194:\tlearn: 0.2467734\ttotal: 25.2s\tremaining: 27.6s\n",
      "1195:\tlearn: 0.2467361\ttotal: 25.3s\tremaining: 27.5s\n",
      "1196:\tlearn: 0.2466979\ttotal: 25.3s\tremaining: 27.5s\n",
      "1197:\tlearn: 0.2466564\ttotal: 25.3s\tremaining: 27.5s\n",
      "1198:\tlearn: 0.2466168\ttotal: 25.3s\tremaining: 27.5s\n",
      "1199:\tlearn: 0.2465796\ttotal: 25.3s\tremaining: 27.5s\n",
      "1200:\tlearn: 0.2465467\ttotal: 25.4s\tremaining: 27.4s\n",
      "1201:\tlearn: 0.2465127\ttotal: 25.4s\tremaining: 27.4s\n",
      "1202:\tlearn: 0.2464691\ttotal: 25.4s\tremaining: 27.4s\n",
      "1203:\tlearn: 0.2464267\ttotal: 25.4s\tremaining: 27.4s\n",
      "1204:\tlearn: 0.2463525\ttotal: 25.4s\tremaining: 27.3s\n",
      "1205:\tlearn: 0.2463173\ttotal: 25.5s\tremaining: 27.3s\n",
      "1206:\tlearn: 0.2462430\ttotal: 25.5s\tremaining: 27.3s\n",
      "1207:\tlearn: 0.2462059\ttotal: 25.5s\tremaining: 27.3s\n",
      "1208:\tlearn: 0.2461602\ttotal: 25.5s\tremaining: 27.2s\n",
      "1209:\tlearn: 0.2461260\ttotal: 25.5s\tremaining: 27.2s\n",
      "1210:\tlearn: 0.2460860\ttotal: 25.6s\tremaining: 27.2s\n",
      "1211:\tlearn: 0.2460455\ttotal: 25.6s\tremaining: 27.2s\n",
      "1212:\tlearn: 0.2460124\ttotal: 25.6s\tremaining: 27.2s\n",
      "1213:\tlearn: 0.2459762\ttotal: 25.6s\tremaining: 27.1s\n",
      "1214:\tlearn: 0.2459445\ttotal: 25.6s\tremaining: 27.1s\n",
      "1215:\tlearn: 0.2458902\ttotal: 25.7s\tremaining: 27.1s\n",
      "1216:\tlearn: 0.2458397\ttotal: 25.7s\tremaining: 27.1s\n",
      "1217:\tlearn: 0.2457502\ttotal: 25.7s\tremaining: 27s\n",
      "1218:\tlearn: 0.2457085\ttotal: 25.7s\tremaining: 27s\n",
      "1219:\tlearn: 0.2456730\ttotal: 25.7s\tremaining: 27s\n",
      "1220:\tlearn: 0.2456418\ttotal: 25.8s\tremaining: 27s\n",
      "1221:\tlearn: 0.2455991\ttotal: 25.8s\tremaining: 27s\n",
      "1222:\tlearn: 0.2455649\ttotal: 25.8s\tremaining: 26.9s\n",
      "1223:\tlearn: 0.2454688\ttotal: 25.8s\tremaining: 26.9s\n",
      "1224:\tlearn: 0.2454025\ttotal: 25.8s\tremaining: 26.9s\n",
      "1225:\tlearn: 0.2453760\ttotal: 25.8s\tremaining: 26.9s\n",
      "1226:\tlearn: 0.2453290\ttotal: 25.9s\tremaining: 26.8s\n",
      "1227:\tlearn: 0.2452860\ttotal: 25.9s\tremaining: 26.8s\n",
      "1228:\tlearn: 0.2452502\ttotal: 25.9s\tremaining: 26.8s\n",
      "1229:\tlearn: 0.2452154\ttotal: 25.9s\tremaining: 26.8s\n",
      "1230:\tlearn: 0.2451788\ttotal: 25.9s\tremaining: 26.7s\n",
      "1231:\tlearn: 0.2451416\ttotal: 26s\tremaining: 26.7s\n",
      "1232:\tlearn: 0.2451071\ttotal: 26s\tremaining: 26.7s\n",
      "1233:\tlearn: 0.2450761\ttotal: 26s\tremaining: 26.7s\n",
      "1234:\tlearn: 0.2450388\ttotal: 26s\tremaining: 26.7s\n",
      "1235:\tlearn: 0.2450061\ttotal: 26s\tremaining: 26.6s\n",
      "1236:\tlearn: 0.2449293\ttotal: 26.1s\tremaining: 26.6s\n",
      "1237:\tlearn: 0.2448910\ttotal: 26.1s\tremaining: 26.6s\n",
      "1238:\tlearn: 0.2448377\ttotal: 26.1s\tremaining: 26.6s\n",
      "1239:\tlearn: 0.2448044\ttotal: 26.1s\tremaining: 26.5s\n",
      "1240:\tlearn: 0.2447375\ttotal: 26.1s\tremaining: 26.5s\n",
      "1241:\tlearn: 0.2447007\ttotal: 26.2s\tremaining: 26.5s\n",
      "1242:\tlearn: 0.2446602\ttotal: 26.2s\tremaining: 26.5s\n",
      "1243:\tlearn: 0.2446034\ttotal: 26.2s\tremaining: 26.4s\n",
      "1244:\tlearn: 0.2445679\ttotal: 26.2s\tremaining: 26.4s\n",
      "1245:\tlearn: 0.2445361\ttotal: 26.2s\tremaining: 26.4s\n",
      "1246:\tlearn: 0.2444971\ttotal: 26.3s\tremaining: 26.4s\n",
      "1247:\tlearn: 0.2444411\ttotal: 26.3s\tremaining: 26.4s\n",
      "1248:\tlearn: 0.2443907\ttotal: 26.3s\tremaining: 26.3s\n",
      "1249:\tlearn: 0.2443492\ttotal: 26.3s\tremaining: 26.3s\n",
      "1250:\tlearn: 0.2443190\ttotal: 26.3s\tremaining: 26.3s\n",
      "1251:\tlearn: 0.2442851\ttotal: 26.3s\tremaining: 26.3s\n",
      "1252:\tlearn: 0.2442604\ttotal: 26.4s\tremaining: 26.2s\n",
      "1253:\tlearn: 0.2441820\ttotal: 26.4s\tremaining: 26.2s\n",
      "1254:\tlearn: 0.2441486\ttotal: 26.4s\tremaining: 26.2s\n",
      "1255:\tlearn: 0.2441069\ttotal: 26.4s\tremaining: 26.2s\n",
      "1256:\tlearn: 0.2440624\ttotal: 26.4s\tremaining: 26.1s\n",
      "1257:\tlearn: 0.2440156\ttotal: 26.5s\tremaining: 26.1s\n",
      "1258:\tlearn: 0.2439847\ttotal: 26.5s\tremaining: 26.1s\n",
      "1259:\tlearn: 0.2439460\ttotal: 26.5s\tremaining: 26.1s\n",
      "1260:\tlearn: 0.2438791\ttotal: 26.5s\tremaining: 26.1s\n",
      "1261:\tlearn: 0.2438467\ttotal: 26.5s\tremaining: 26s\n",
      "1262:\tlearn: 0.2438077\ttotal: 26.6s\tremaining: 26s\n",
      "1263:\tlearn: 0.2437730\ttotal: 26.6s\tremaining: 26s\n",
      "1264:\tlearn: 0.2437342\ttotal: 26.6s\tremaining: 26s\n",
      "1265:\tlearn: 0.2436953\ttotal: 26.6s\tremaining: 25.9s\n",
      "1266:\tlearn: 0.2436526\ttotal: 26.6s\tremaining: 25.9s\n",
      "1267:\tlearn: 0.2436275\ttotal: 26.7s\tremaining: 25.9s\n",
      "1268:\tlearn: 0.2435939\ttotal: 26.7s\tremaining: 25.9s\n",
      "1269:\tlearn: 0.2435451\ttotal: 26.7s\tremaining: 25.9s\n",
      "1270:\tlearn: 0.2434932\ttotal: 26.7s\tremaining: 25.8s\n",
      "1271:\tlearn: 0.2434594\ttotal: 26.7s\tremaining: 25.8s\n",
      "1272:\tlearn: 0.2434189\ttotal: 26.8s\tremaining: 25.8s\n",
      "1273:\tlearn: 0.2433832\ttotal: 26.8s\tremaining: 25.8s\n",
      "1274:\tlearn: 0.2433368\ttotal: 26.8s\tremaining: 25.7s\n",
      "1275:\tlearn: 0.2432888\ttotal: 26.8s\tremaining: 25.7s\n",
      "1276:\tlearn: 0.2432547\ttotal: 26.8s\tremaining: 25.7s\n",
      "1277:\tlearn: 0.2432253\ttotal: 26.9s\tremaining: 25.7s\n",
      "1278:\tlearn: 0.2431937\ttotal: 26.9s\tremaining: 25.7s\n",
      "1279:\tlearn: 0.2431552\ttotal: 26.9s\tremaining: 25.6s\n",
      "1280:\tlearn: 0.2431226\ttotal: 26.9s\tremaining: 25.6s\n",
      "1281:\tlearn: 0.2430804\ttotal: 26.9s\tremaining: 25.6s\n",
      "1282:\tlearn: 0.2430359\ttotal: 27s\tremaining: 25.6s\n",
      "1283:\tlearn: 0.2429938\ttotal: 27s\tremaining: 25.5s\n",
      "1284:\tlearn: 0.2429472\ttotal: 27s\tremaining: 25.5s\n",
      "1285:\tlearn: 0.2429142\ttotal: 27s\tremaining: 25.5s\n",
      "1286:\tlearn: 0.2428787\ttotal: 27s\tremaining: 25.5s\n",
      "1287:\tlearn: 0.2428449\ttotal: 27.1s\tremaining: 25.5s\n",
      "1288:\tlearn: 0.2428154\ttotal: 27.1s\tremaining: 25.4s\n",
      "1289:\tlearn: 0.2427849\ttotal: 27.1s\tremaining: 25.4s\n",
      "1290:\tlearn: 0.2427560\ttotal: 27.1s\tremaining: 25.4s\n",
      "1291:\tlearn: 0.2427123\ttotal: 27.1s\tremaining: 25.4s\n",
      "1292:\tlearn: 0.2426752\ttotal: 27.2s\tremaining: 25.3s\n",
      "1293:\tlearn: 0.2425584\ttotal: 27.2s\tremaining: 25.3s\n",
      "1294:\tlearn: 0.2425112\ttotal: 27.2s\tremaining: 25.3s\n",
      "1295:\tlearn: 0.2424718\ttotal: 27.2s\tremaining: 25.3s\n",
      "1296:\tlearn: 0.2424415\ttotal: 27.2s\tremaining: 25.3s\n",
      "1297:\tlearn: 0.2424066\ttotal: 27.3s\tremaining: 25.2s\n",
      "1298:\tlearn: 0.2423728\ttotal: 27.3s\tremaining: 25.2s\n",
      "1299:\tlearn: 0.2422829\ttotal: 27.3s\tremaining: 25.2s\n",
      "1300:\tlearn: 0.2422518\ttotal: 27.3s\tremaining: 25.2s\n",
      "1301:\tlearn: 0.2422158\ttotal: 27.3s\tremaining: 25.1s\n",
      "1302:\tlearn: 0.2421873\ttotal: 27.3s\tremaining: 25.1s\n",
      "1303:\tlearn: 0.2421485\ttotal: 27.4s\tremaining: 25.1s\n",
      "1304:\tlearn: 0.2421181\ttotal: 27.4s\tremaining: 25.1s\n",
      "1305:\tlearn: 0.2419912\ttotal: 27.4s\tremaining: 25.1s\n",
      "1306:\tlearn: 0.2419522\ttotal: 27.4s\tremaining: 25s\n",
      "1307:\tlearn: 0.2419192\ttotal: 27.4s\tremaining: 25s\n",
      "1308:\tlearn: 0.2418854\ttotal: 27.5s\tremaining: 25s\n",
      "1309:\tlearn: 0.2418162\ttotal: 27.5s\tremaining: 25s\n",
      "1310:\tlearn: 0.2417824\ttotal: 27.5s\tremaining: 24.9s\n",
      "1311:\tlearn: 0.2416776\ttotal: 27.5s\tremaining: 24.9s\n",
      "1312:\tlearn: 0.2416472\ttotal: 27.5s\tremaining: 24.9s\n",
      "1313:\tlearn: 0.2416202\ttotal: 27.6s\tremaining: 24.9s\n",
      "1314:\tlearn: 0.2415858\ttotal: 27.6s\tremaining: 24.9s\n",
      "1315:\tlearn: 0.2415495\ttotal: 27.6s\tremaining: 24.8s\n",
      "1316:\tlearn: 0.2414783\ttotal: 27.6s\tremaining: 24.8s\n",
      "1317:\tlearn: 0.2414396\ttotal: 27.6s\tremaining: 24.8s\n",
      "1318:\tlearn: 0.2414016\ttotal: 27.7s\tremaining: 24.8s\n",
      "1319:\tlearn: 0.2413423\ttotal: 27.7s\tremaining: 24.7s\n",
      "1320:\tlearn: 0.2413079\ttotal: 27.7s\tremaining: 24.7s\n",
      "1321:\tlearn: 0.2412247\ttotal: 27.7s\tremaining: 24.7s\n",
      "1322:\tlearn: 0.2411368\ttotal: 27.7s\tremaining: 24.7s\n",
      "1323:\tlearn: 0.2411036\ttotal: 27.8s\tremaining: 24.7s\n",
      "1324:\tlearn: 0.2410671\ttotal: 27.8s\tremaining: 24.6s\n",
      "1325:\tlearn: 0.2410415\ttotal: 27.8s\tremaining: 24.6s\n",
      "1326:\tlearn: 0.2410031\ttotal: 27.8s\tremaining: 24.6s\n",
      "1327:\tlearn: 0.2409634\ttotal: 27.8s\tremaining: 24.6s\n",
      "1328:\tlearn: 0.2408992\ttotal: 27.9s\tremaining: 24.5s\n",
      "1329:\tlearn: 0.2408642\ttotal: 27.9s\tremaining: 24.5s\n",
      "1330:\tlearn: 0.2408234\ttotal: 27.9s\tremaining: 24.5s\n",
      "1331:\tlearn: 0.2407881\ttotal: 27.9s\tremaining: 24.5s\n",
      "1332:\tlearn: 0.2407474\ttotal: 27.9s\tremaining: 24.5s\n",
      "1333:\tlearn: 0.2407178\ttotal: 28s\tremaining: 24.4s\n",
      "1334:\tlearn: 0.2406872\ttotal: 28s\tremaining: 24.4s\n",
      "1335:\tlearn: 0.2406570\ttotal: 28s\tremaining: 24.4s\n",
      "1336:\tlearn: 0.2406190\ttotal: 28s\tremaining: 24.4s\n",
      "1337:\tlearn: 0.2405807\ttotal: 28s\tremaining: 24.3s\n",
      "1338:\tlearn: 0.2405417\ttotal: 28s\tremaining: 24.3s\n",
      "1339:\tlearn: 0.2405165\ttotal: 28.1s\tremaining: 24.3s\n",
      "1340:\tlearn: 0.2404763\ttotal: 28.1s\tremaining: 24.3s\n",
      "1341:\tlearn: 0.2404474\ttotal: 28.1s\tremaining: 24.3s\n",
      "1342:\tlearn: 0.2404189\ttotal: 28.1s\tremaining: 24.2s\n",
      "1343:\tlearn: 0.2403814\ttotal: 28.1s\tremaining: 24.2s\n",
      "1344:\tlearn: 0.2403404\ttotal: 28.2s\tremaining: 24.2s\n",
      "1345:\tlearn: 0.2402974\ttotal: 28.2s\tremaining: 24.2s\n",
      "1346:\tlearn: 0.2402527\ttotal: 28.2s\tremaining: 24.1s\n",
      "1347:\tlearn: 0.2402145\ttotal: 28.2s\tremaining: 24.1s\n",
      "1348:\tlearn: 0.2401829\ttotal: 28.2s\tremaining: 24.1s\n",
      "1349:\tlearn: 0.2401453\ttotal: 28.3s\tremaining: 24.1s\n",
      "1350:\tlearn: 0.2401046\ttotal: 28.3s\tremaining: 24.1s\n",
      "1351:\tlearn: 0.2400592\ttotal: 28.3s\tremaining: 24s\n",
      "1352:\tlearn: 0.2399662\ttotal: 28.3s\tremaining: 24s\n",
      "1353:\tlearn: 0.2398534\ttotal: 28.3s\tremaining: 24s\n",
      "1354:\tlearn: 0.2398148\ttotal: 28.4s\tremaining: 24s\n",
      "1355:\tlearn: 0.2397775\ttotal: 28.4s\tremaining: 23.9s\n",
      "1356:\tlearn: 0.2397266\ttotal: 28.4s\tremaining: 23.9s\n",
      "1357:\tlearn: 0.2396960\ttotal: 28.4s\tremaining: 23.9s\n",
      "1358:\tlearn: 0.2396655\ttotal: 28.4s\tremaining: 23.9s\n",
      "1359:\tlearn: 0.2396354\ttotal: 28.5s\tremaining: 23.8s\n",
      "1360:\tlearn: 0.2395552\ttotal: 28.5s\tremaining: 23.8s\n",
      "1361:\tlearn: 0.2395265\ttotal: 28.5s\tremaining: 23.8s\n",
      "1362:\tlearn: 0.2394912\ttotal: 28.5s\tremaining: 23.8s\n",
      "1363:\tlearn: 0.2394503\ttotal: 28.5s\tremaining: 23.8s\n",
      "1364:\tlearn: 0.2393790\ttotal: 28.5s\tremaining: 23.7s\n",
      "1365:\tlearn: 0.2393477\ttotal: 28.6s\tremaining: 23.7s\n",
      "1366:\tlearn: 0.2393106\ttotal: 28.6s\tremaining: 23.7s\n",
      "1367:\tlearn: 0.2392767\ttotal: 28.6s\tremaining: 23.7s\n",
      "1368:\tlearn: 0.2392389\ttotal: 28.6s\tremaining: 23.6s\n",
      "1369:\tlearn: 0.2392014\ttotal: 28.6s\tremaining: 23.6s\n",
      "1370:\tlearn: 0.2391053\ttotal: 28.7s\tremaining: 23.6s\n",
      "1371:\tlearn: 0.2390708\ttotal: 28.7s\tremaining: 23.6s\n",
      "1372:\tlearn: 0.2390357\ttotal: 28.7s\tremaining: 23.6s\n",
      "1373:\tlearn: 0.2389980\ttotal: 28.7s\tremaining: 23.5s\n",
      "1374:\tlearn: 0.2389677\ttotal: 28.7s\tremaining: 23.5s\n",
      "1375:\tlearn: 0.2389374\ttotal: 28.8s\tremaining: 23.5s\n",
      "1376:\tlearn: 0.2388950\ttotal: 28.8s\tremaining: 23.5s\n",
      "1377:\tlearn: 0.2388631\ttotal: 28.8s\tremaining: 23.4s\n",
      "1378:\tlearn: 0.2388187\ttotal: 28.8s\tremaining: 23.4s\n",
      "1379:\tlearn: 0.2387852\ttotal: 28.8s\tremaining: 23.4s\n",
      "1380:\tlearn: 0.2387527\ttotal: 28.9s\tremaining: 23.4s\n",
      "1381:\tlearn: 0.2386589\ttotal: 28.9s\tremaining: 23.4s\n",
      "1382:\tlearn: 0.2386154\ttotal: 28.9s\tremaining: 23.3s\n",
      "1383:\tlearn: 0.2385873\ttotal: 28.9s\tremaining: 23.3s\n",
      "1384:\tlearn: 0.2385570\ttotal: 28.9s\tremaining: 23.3s\n",
      "1385:\tlearn: 0.2385250\ttotal: 28.9s\tremaining: 23.3s\n",
      "1386:\tlearn: 0.2384265\ttotal: 29s\tremaining: 23.2s\n",
      "1387:\tlearn: 0.2383908\ttotal: 29s\tremaining: 23.2s\n",
      "1388:\tlearn: 0.2383624\ttotal: 29s\tremaining: 23.2s\n",
      "1389:\tlearn: 0.2383262\ttotal: 29s\tremaining: 23.2s\n",
      "1390:\tlearn: 0.2382975\ttotal: 29s\tremaining: 23.2s\n",
      "1391:\tlearn: 0.2382621\ttotal: 29.1s\tremaining: 23.1s\n",
      "1392:\tlearn: 0.2382314\ttotal: 29.1s\tremaining: 23.1s\n",
      "1393:\tlearn: 0.2382077\ttotal: 29.1s\tremaining: 23.1s\n",
      "1394:\tlearn: 0.2381766\ttotal: 29.1s\tremaining: 23.1s\n",
      "1395:\tlearn: 0.2380707\ttotal: 29.1s\tremaining: 23s\n",
      "1396:\tlearn: 0.2380335\ttotal: 29.2s\tremaining: 23s\n",
      "1397:\tlearn: 0.2379830\ttotal: 29.2s\tremaining: 23s\n",
      "1398:\tlearn: 0.2379471\ttotal: 29.2s\tremaining: 23s\n",
      "1399:\tlearn: 0.2379180\ttotal: 29.2s\tremaining: 23s\n",
      "1400:\tlearn: 0.2378891\ttotal: 29.2s\tremaining: 22.9s\n",
      "1401:\tlearn: 0.2378582\ttotal: 29.3s\tremaining: 22.9s\n",
      "1402:\tlearn: 0.2378209\ttotal: 29.3s\tremaining: 22.9s\n",
      "1403:\tlearn: 0.2377917\ttotal: 29.3s\tremaining: 22.9s\n",
      "1404:\tlearn: 0.2377027\ttotal: 29.3s\tremaining: 22.8s\n",
      "1405:\tlearn: 0.2375949\ttotal: 29.3s\tremaining: 22.8s\n",
      "1406:\tlearn: 0.2375596\ttotal: 29.3s\tremaining: 22.8s\n",
      "1407:\tlearn: 0.2375223\ttotal: 29.4s\tremaining: 22.8s\n",
      "1408:\tlearn: 0.2374926\ttotal: 29.4s\tremaining: 22.8s\n",
      "1409:\tlearn: 0.2374569\ttotal: 29.4s\tremaining: 22.7s\n",
      "1410:\tlearn: 0.2374177\ttotal: 29.4s\tremaining: 22.7s\n",
      "1411:\tlearn: 0.2373933\ttotal: 29.4s\tremaining: 22.7s\n",
      "1412:\tlearn: 0.2373549\ttotal: 29.5s\tremaining: 22.7s\n",
      "1413:\tlearn: 0.2372728\ttotal: 29.5s\tremaining: 22.6s\n",
      "1414:\tlearn: 0.2372102\ttotal: 29.5s\tremaining: 22.6s\n",
      "1415:\tlearn: 0.2371910\ttotal: 29.5s\tremaining: 22.6s\n",
      "1416:\tlearn: 0.2371501\ttotal: 29.5s\tremaining: 22.6s\n",
      "1417:\tlearn: 0.2371113\ttotal: 29.6s\tremaining: 22.5s\n",
      "1418:\tlearn: 0.2370789\ttotal: 29.6s\tremaining: 22.5s\n",
      "1419:\tlearn: 0.2370338\ttotal: 29.6s\tremaining: 22.5s\n",
      "1420:\tlearn: 0.2370008\ttotal: 29.6s\tremaining: 22.5s\n",
      "1421:\tlearn: 0.2369578\ttotal: 29.6s\tremaining: 22.5s\n",
      "1422:\tlearn: 0.2369216\ttotal: 29.6s\tremaining: 22.4s\n",
      "1423:\tlearn: 0.2368884\ttotal: 29.7s\tremaining: 22.4s\n",
      "1424:\tlearn: 0.2368507\ttotal: 29.7s\tremaining: 22.4s\n",
      "1425:\tlearn: 0.2368191\ttotal: 29.7s\tremaining: 22.4s\n",
      "1426:\tlearn: 0.2367846\ttotal: 29.7s\tremaining: 22.3s\n",
      "1427:\tlearn: 0.2366767\ttotal: 29.7s\tremaining: 22.3s\n",
      "1428:\tlearn: 0.2366434\ttotal: 29.8s\tremaining: 22.3s\n",
      "1429:\tlearn: 0.2366155\ttotal: 29.8s\tremaining: 22.3s\n",
      "1430:\tlearn: 0.2365796\ttotal: 29.8s\tremaining: 22.3s\n",
      "1431:\tlearn: 0.2365453\ttotal: 29.8s\tremaining: 22.2s\n",
      "1432:\tlearn: 0.2364669\ttotal: 29.8s\tremaining: 22.2s\n",
      "1433:\tlearn: 0.2364327\ttotal: 29.9s\tremaining: 22.2s\n",
      "1434:\tlearn: 0.2364007\ttotal: 29.9s\tremaining: 22.2s\n",
      "1435:\tlearn: 0.2363551\ttotal: 29.9s\tremaining: 22.1s\n",
      "1436:\tlearn: 0.2363119\ttotal: 29.9s\tremaining: 22.1s\n",
      "1437:\tlearn: 0.2362754\ttotal: 29.9s\tremaining: 22.1s\n",
      "1438:\tlearn: 0.2362451\ttotal: 29.9s\tremaining: 22.1s\n",
      "1439:\tlearn: 0.2362088\ttotal: 30s\tremaining: 22.1s\n",
      "1440:\tlearn: 0.2361692\ttotal: 30s\tremaining: 22s\n",
      "1441:\tlearn: 0.2361380\ttotal: 30s\tremaining: 22s\n",
      "1442:\tlearn: 0.2360424\ttotal: 30s\tremaining: 22s\n",
      "1443:\tlearn: 0.2360126\ttotal: 30s\tremaining: 22s\n",
      "1444:\tlearn: 0.2359780\ttotal: 30.1s\tremaining: 21.9s\n",
      "1445:\tlearn: 0.2359352\ttotal: 30.1s\tremaining: 21.9s\n",
      "1446:\tlearn: 0.2358882\ttotal: 30.1s\tremaining: 21.9s\n",
      "1447:\tlearn: 0.2358653\ttotal: 30.1s\tremaining: 21.9s\n",
      "1448:\tlearn: 0.2358339\ttotal: 30.1s\tremaining: 21.9s\n",
      "1449:\tlearn: 0.2358017\ttotal: 30.2s\tremaining: 21.8s\n",
      "1450:\tlearn: 0.2357403\ttotal: 30.2s\tremaining: 21.8s\n",
      "1451:\tlearn: 0.2357055\ttotal: 30.2s\tremaining: 21.8s\n",
      "1452:\tlearn: 0.2356654\ttotal: 30.2s\tremaining: 21.8s\n",
      "1453:\tlearn: 0.2356299\ttotal: 30.2s\tremaining: 21.7s\n",
      "1454:\tlearn: 0.2355929\ttotal: 30.2s\tremaining: 21.7s\n",
      "1455:\tlearn: 0.2355600\ttotal: 30.3s\tremaining: 21.7s\n",
      "1456:\tlearn: 0.2355227\ttotal: 30.3s\tremaining: 21.7s\n",
      "1457:\tlearn: 0.2354939\ttotal: 30.3s\tremaining: 21.7s\n",
      "1458:\tlearn: 0.2354611\ttotal: 30.3s\tremaining: 21.6s\n",
      "1459:\tlearn: 0.2354234\ttotal: 30.3s\tremaining: 21.6s\n",
      "1460:\tlearn: 0.2353826\ttotal: 30.4s\tremaining: 21.6s\n",
      "1461:\tlearn: 0.2353427\ttotal: 30.4s\tremaining: 21.6s\n",
      "1462:\tlearn: 0.2353075\ttotal: 30.4s\tremaining: 21.5s\n",
      "1463:\tlearn: 0.2352701\ttotal: 30.4s\tremaining: 21.5s\n",
      "1464:\tlearn: 0.2352363\ttotal: 30.4s\tremaining: 21.5s\n",
      "1465:\tlearn: 0.2351965\ttotal: 30.5s\tremaining: 21.5s\n",
      "1466:\tlearn: 0.2351654\ttotal: 30.5s\tremaining: 21.5s\n",
      "1467:\tlearn: 0.2351215\ttotal: 30.5s\tremaining: 21.4s\n",
      "1468:\tlearn: 0.2350924\ttotal: 30.5s\tremaining: 21.4s\n",
      "1469:\tlearn: 0.2350118\ttotal: 30.5s\tremaining: 21.4s\n",
      "1470:\tlearn: 0.2349388\ttotal: 30.6s\tremaining: 21.4s\n",
      "1471:\tlearn: 0.2348980\ttotal: 30.6s\tremaining: 21.4s\n",
      "1472:\tlearn: 0.2348565\ttotal: 30.6s\tremaining: 21.3s\n",
      "1473:\tlearn: 0.2348233\ttotal: 30.6s\tremaining: 21.3s\n",
      "1474:\tlearn: 0.2347853\ttotal: 30.6s\tremaining: 21.3s\n",
      "1475:\tlearn: 0.2347437\ttotal: 30.6s\tremaining: 21.3s\n",
      "1476:\tlearn: 0.2347125\ttotal: 30.7s\tremaining: 21.2s\n",
      "1477:\tlearn: 0.2346633\ttotal: 30.7s\tremaining: 21.2s\n",
      "1478:\tlearn: 0.2346381\ttotal: 30.7s\tremaining: 21.2s\n",
      "1479:\tlearn: 0.2346003\ttotal: 30.7s\tremaining: 21.2s\n",
      "1480:\tlearn: 0.2345643\ttotal: 30.7s\tremaining: 21.1s\n",
      "1481:\tlearn: 0.2345387\ttotal: 30.8s\tremaining: 21.1s\n",
      "1482:\tlearn: 0.2345029\ttotal: 30.8s\tremaining: 21.1s\n",
      "1483:\tlearn: 0.2344688\ttotal: 30.8s\tremaining: 21.1s\n",
      "1484:\tlearn: 0.2344354\ttotal: 30.8s\tremaining: 21.1s\n",
      "1485:\tlearn: 0.2344020\ttotal: 30.8s\tremaining: 21s\n",
      "1486:\tlearn: 0.2343033\ttotal: 30.9s\tremaining: 21s\n",
      "1487:\tlearn: 0.2342213\ttotal: 30.9s\tremaining: 21s\n",
      "1488:\tlearn: 0.2341966\ttotal: 30.9s\tremaining: 21s\n",
      "1489:\tlearn: 0.2341740\ttotal: 30.9s\tremaining: 21s\n",
      "1490:\tlearn: 0.2341412\ttotal: 30.9s\tremaining: 20.9s\n",
      "1491:\tlearn: 0.2340893\ttotal: 30.9s\tremaining: 20.9s\n",
      "1492:\tlearn: 0.2340541\ttotal: 31s\tremaining: 20.9s\n",
      "1493:\tlearn: 0.2340182\ttotal: 31s\tremaining: 20.9s\n",
      "1494:\tlearn: 0.2339709\ttotal: 31s\tremaining: 20.8s\n",
      "1495:\tlearn: 0.2339433\ttotal: 31s\tremaining: 20.8s\n",
      "1496:\tlearn: 0.2339092\ttotal: 31s\tremaining: 20.8s\n",
      "1497:\tlearn: 0.2338758\ttotal: 31.1s\tremaining: 20.8s\n",
      "1498:\tlearn: 0.2338222\ttotal: 31.1s\tremaining: 20.8s\n",
      "1499:\tlearn: 0.2337917\ttotal: 31.1s\tremaining: 20.7s\n",
      "1500:\tlearn: 0.2337620\ttotal: 31.1s\tremaining: 20.7s\n",
      "1501:\tlearn: 0.2337253\ttotal: 31.1s\tremaining: 20.7s\n",
      "1502:\tlearn: 0.2336848\ttotal: 31.2s\tremaining: 20.7s\n",
      "1503:\tlearn: 0.2336436\ttotal: 31.2s\tremaining: 20.6s\n",
      "1504:\tlearn: 0.2336100\ttotal: 31.2s\tremaining: 20.6s\n",
      "1505:\tlearn: 0.2335871\ttotal: 31.2s\tremaining: 20.6s\n",
      "1506:\tlearn: 0.2335552\ttotal: 31.2s\tremaining: 20.6s\n",
      "1507:\tlearn: 0.2335159\ttotal: 31.3s\tremaining: 20.6s\n",
      "1508:\tlearn: 0.2334518\ttotal: 31.3s\tremaining: 20.5s\n",
      "1509:\tlearn: 0.2334260\ttotal: 31.3s\tremaining: 20.5s\n",
      "1510:\tlearn: 0.2333990\ttotal: 31.3s\tremaining: 20.5s\n",
      "1511:\tlearn: 0.2333498\ttotal: 31.3s\tremaining: 20.5s\n",
      "1512:\tlearn: 0.2333100\ttotal: 31.3s\tremaining: 20.4s\n",
      "1513:\tlearn: 0.2332785\ttotal: 31.4s\tremaining: 20.4s\n",
      "1514:\tlearn: 0.2332507\ttotal: 31.4s\tremaining: 20.4s\n",
      "1515:\tlearn: 0.2332200\ttotal: 31.4s\tremaining: 20.4s\n",
      "1516:\tlearn: 0.2331929\ttotal: 31.4s\tremaining: 20.4s\n",
      "1517:\tlearn: 0.2331343\ttotal: 31.4s\tremaining: 20.3s\n",
      "1518:\tlearn: 0.2331025\ttotal: 31.4s\tremaining: 20.3s\n",
      "1519:\tlearn: 0.2330732\ttotal: 31.5s\tremaining: 20.3s\n",
      "1520:\tlearn: 0.2330444\ttotal: 31.5s\tremaining: 20.3s\n",
      "1521:\tlearn: 0.2330111\ttotal: 31.5s\tremaining: 20.2s\n",
      "1522:\tlearn: 0.2329792\ttotal: 31.5s\tremaining: 20.2s\n",
      "1523:\tlearn: 0.2329413\ttotal: 31.5s\tremaining: 20.2s\n",
      "1524:\tlearn: 0.2329074\ttotal: 31.6s\tremaining: 20.2s\n",
      "1525:\tlearn: 0.2328717\ttotal: 31.6s\tremaining: 20.2s\n",
      "1526:\tlearn: 0.2328325\ttotal: 31.6s\tremaining: 20.1s\n",
      "1527:\tlearn: 0.2327992\ttotal: 31.6s\tremaining: 20.1s\n",
      "1528:\tlearn: 0.2327539\ttotal: 31.6s\tremaining: 20.1s\n",
      "1529:\tlearn: 0.2327164\ttotal: 31.7s\tremaining: 20.1s\n",
      "1530:\tlearn: 0.2326839\ttotal: 31.7s\tremaining: 20s\n",
      "1531:\tlearn: 0.2326384\ttotal: 31.7s\tremaining: 20s\n",
      "1532:\tlearn: 0.2326055\ttotal: 31.7s\tremaining: 20s\n",
      "1533:\tlearn: 0.2325696\ttotal: 31.7s\tremaining: 20s\n",
      "1534:\tlearn: 0.2325291\ttotal: 31.7s\tremaining: 20s\n",
      "1535:\tlearn: 0.2324895\ttotal: 31.8s\tremaining: 19.9s\n",
      "1536:\tlearn: 0.2324558\ttotal: 31.8s\tremaining: 19.9s\n",
      "1537:\tlearn: 0.2323910\ttotal: 31.8s\tremaining: 19.9s\n",
      "1538:\tlearn: 0.2323555\ttotal: 31.8s\tremaining: 19.9s\n",
      "1539:\tlearn: 0.2323331\ttotal: 31.8s\tremaining: 19.8s\n",
      "1540:\tlearn: 0.2322973\ttotal: 31.9s\tremaining: 19.8s\n",
      "1541:\tlearn: 0.2322595\ttotal: 31.9s\tremaining: 19.8s\n",
      "1542:\tlearn: 0.2322309\ttotal: 31.9s\tremaining: 19.8s\n",
      "1543:\tlearn: 0.2321973\ttotal: 31.9s\tremaining: 19.8s\n",
      "1544:\tlearn: 0.2321663\ttotal: 31.9s\tremaining: 19.7s\n",
      "1545:\tlearn: 0.2321333\ttotal: 31.9s\tremaining: 19.7s\n",
      "1546:\tlearn: 0.2321046\ttotal: 32s\tremaining: 19.7s\n",
      "1547:\tlearn: 0.2320664\ttotal: 32s\tremaining: 19.7s\n",
      "1548:\tlearn: 0.2320034\ttotal: 32s\tremaining: 19.6s\n",
      "1549:\tlearn: 0.2319688\ttotal: 32s\tremaining: 19.6s\n",
      "1550:\tlearn: 0.2319300\ttotal: 32s\tremaining: 19.6s\n",
      "1551:\tlearn: 0.2318884\ttotal: 32.1s\tremaining: 19.6s\n",
      "1552:\tlearn: 0.2318525\ttotal: 32.1s\tremaining: 19.6s\n",
      "1553:\tlearn: 0.2318260\ttotal: 32.1s\tremaining: 19.5s\n",
      "1554:\tlearn: 0.2317879\ttotal: 32.1s\tremaining: 19.5s\n",
      "1555:\tlearn: 0.2317269\ttotal: 32.1s\tremaining: 19.5s\n",
      "1556:\tlearn: 0.2316595\ttotal: 32.1s\tremaining: 19.5s\n",
      "1557:\tlearn: 0.2316270\ttotal: 32.2s\tremaining: 19.4s\n",
      "1558:\tlearn: 0.2315909\ttotal: 32.2s\tremaining: 19.4s\n",
      "1559:\tlearn: 0.2315438\ttotal: 32.2s\tremaining: 19.4s\n",
      "1560:\tlearn: 0.2315234\ttotal: 32.2s\tremaining: 19.4s\n",
      "1561:\tlearn: 0.2314852\ttotal: 32.2s\tremaining: 19.4s\n",
      "1562:\tlearn: 0.2314445\ttotal: 32.3s\tremaining: 19.3s\n",
      "1563:\tlearn: 0.2314137\ttotal: 32.3s\tremaining: 19.3s\n",
      "1564:\tlearn: 0.2313751\ttotal: 32.3s\tremaining: 19.3s\n",
      "1565:\tlearn: 0.2313435\ttotal: 32.3s\tremaining: 19.3s\n",
      "1566:\tlearn: 0.2313211\ttotal: 32.3s\tremaining: 19.3s\n",
      "1567:\tlearn: 0.2312946\ttotal: 32.4s\tremaining: 19.2s\n",
      "1568:\tlearn: 0.2312634\ttotal: 32.4s\tremaining: 19.2s\n",
      "1569:\tlearn: 0.2312312\ttotal: 32.4s\tremaining: 19.2s\n",
      "1570:\tlearn: 0.2311948\ttotal: 32.4s\tremaining: 19.2s\n",
      "1571:\tlearn: 0.2311583\ttotal: 32.4s\tremaining: 19.1s\n",
      "1572:\tlearn: 0.2311332\ttotal: 32.4s\tremaining: 19.1s\n",
      "1573:\tlearn: 0.2310450\ttotal: 32.5s\tremaining: 19.1s\n",
      "1574:\tlearn: 0.2310075\ttotal: 32.5s\tremaining: 19.1s\n",
      "1575:\tlearn: 0.2309571\ttotal: 32.5s\tremaining: 19.1s\n",
      "1576:\tlearn: 0.2309224\ttotal: 32.5s\tremaining: 19s\n",
      "1577:\tlearn: 0.2308526\ttotal: 32.5s\tremaining: 19s\n",
      "1578:\tlearn: 0.2308166\ttotal: 32.5s\tremaining: 19s\n",
      "1579:\tlearn: 0.2307888\ttotal: 32.6s\tremaining: 19s\n",
      "1580:\tlearn: 0.2307556\ttotal: 32.6s\tremaining: 18.9s\n",
      "1581:\tlearn: 0.2307254\ttotal: 32.6s\tremaining: 18.9s\n",
      "1582:\tlearn: 0.2306895\ttotal: 32.6s\tremaining: 18.9s\n",
      "1583:\tlearn: 0.2306519\ttotal: 32.6s\tremaining: 18.9s\n",
      "1584:\tlearn: 0.2305705\ttotal: 32.7s\tremaining: 18.9s\n",
      "1585:\tlearn: 0.2305375\ttotal: 32.7s\tremaining: 18.8s\n",
      "1586:\tlearn: 0.2304913\ttotal: 32.7s\tremaining: 18.8s\n",
      "1587:\tlearn: 0.2304586\ttotal: 32.7s\tremaining: 18.8s\n",
      "1588:\tlearn: 0.2303608\ttotal: 32.7s\tremaining: 18.8s\n",
      "1589:\tlearn: 0.2303273\ttotal: 32.7s\tremaining: 18.7s\n",
      "1590:\tlearn: 0.2302314\ttotal: 32.8s\tremaining: 18.7s\n",
      "1591:\tlearn: 0.2301898\ttotal: 32.8s\tremaining: 18.7s\n",
      "1592:\tlearn: 0.2301556\ttotal: 32.8s\tremaining: 18.7s\n",
      "1593:\tlearn: 0.2301162\ttotal: 32.8s\tremaining: 18.7s\n",
      "1594:\tlearn: 0.2300821\ttotal: 32.8s\tremaining: 18.6s\n",
      "1595:\tlearn: 0.2300473\ttotal: 32.9s\tremaining: 18.6s\n",
      "1596:\tlearn: 0.2300105\ttotal: 32.9s\tremaining: 18.6s\n",
      "1597:\tlearn: 0.2299759\ttotal: 32.9s\tremaining: 18.6s\n",
      "1598:\tlearn: 0.2299469\ttotal: 32.9s\tremaining: 18.5s\n",
      "1599:\tlearn: 0.2299115\ttotal: 32.9s\tremaining: 18.5s\n",
      "1600:\tlearn: 0.2298773\ttotal: 32.9s\tremaining: 18.5s\n",
      "1601:\tlearn: 0.2298511\ttotal: 33s\tremaining: 18.5s\n",
      "1602:\tlearn: 0.2298308\ttotal: 33s\tremaining: 18.5s\n",
      "1603:\tlearn: 0.2297949\ttotal: 33s\tremaining: 18.4s\n",
      "1604:\tlearn: 0.2297001\ttotal: 33s\tremaining: 18.4s\n",
      "1605:\tlearn: 0.2296619\ttotal: 33s\tremaining: 18.4s\n",
      "1606:\tlearn: 0.2296159\ttotal: 33.1s\tremaining: 18.4s\n",
      "1607:\tlearn: 0.2295838\ttotal: 33.1s\tremaining: 18.3s\n",
      "1608:\tlearn: 0.2295164\ttotal: 33.1s\tremaining: 18.3s\n",
      "1609:\tlearn: 0.2294787\ttotal: 33.1s\tremaining: 18.3s\n",
      "1610:\tlearn: 0.2294429\ttotal: 33.1s\tremaining: 18.3s\n",
      "1611:\tlearn: 0.2294110\ttotal: 33.1s\tremaining: 18.3s\n",
      "1612:\tlearn: 0.2293772\ttotal: 33.2s\tremaining: 18.2s\n",
      "1613:\tlearn: 0.2293322\ttotal: 33.2s\tremaining: 18.2s\n",
      "1614:\tlearn: 0.2292982\ttotal: 33.2s\tremaining: 18.2s\n",
      "1615:\tlearn: 0.2292805\ttotal: 33.2s\tremaining: 18.2s\n",
      "1616:\tlearn: 0.2292479\ttotal: 33.2s\tremaining: 18.1s\n",
      "1617:\tlearn: 0.2292120\ttotal: 33.2s\tremaining: 18.1s\n",
      "1618:\tlearn: 0.2291861\ttotal: 33.3s\tremaining: 18.1s\n",
      "1619:\tlearn: 0.2291404\ttotal: 33.3s\tremaining: 18.1s\n",
      "1620:\tlearn: 0.2291105\ttotal: 33.3s\tremaining: 18.1s\n",
      "1621:\tlearn: 0.2290767\ttotal: 33.3s\tremaining: 18s\n",
      "1622:\tlearn: 0.2290419\ttotal: 33.3s\tremaining: 18s\n",
      "1623:\tlearn: 0.2289998\ttotal: 33.4s\tremaining: 18s\n",
      "1624:\tlearn: 0.2289685\ttotal: 33.4s\tremaining: 18s\n",
      "1625:\tlearn: 0.2289181\ttotal: 33.4s\tremaining: 17.9s\n",
      "1626:\tlearn: 0.2288900\ttotal: 33.4s\tremaining: 17.9s\n",
      "1627:\tlearn: 0.2288577\ttotal: 33.4s\tremaining: 17.9s\n",
      "1628:\tlearn: 0.2288131\ttotal: 33.4s\tremaining: 17.9s\n",
      "1629:\tlearn: 0.2287512\ttotal: 33.5s\tremaining: 17.9s\n",
      "1630:\tlearn: 0.2286828\ttotal: 33.5s\tremaining: 17.8s\n",
      "1631:\tlearn: 0.2286453\ttotal: 33.5s\tremaining: 17.8s\n",
      "1632:\tlearn: 0.2286111\ttotal: 33.5s\tremaining: 17.8s\n",
      "1633:\tlearn: 0.2285796\ttotal: 33.5s\tremaining: 17.8s\n",
      "1634:\tlearn: 0.2285520\ttotal: 33.6s\tremaining: 17.8s\n",
      "1635:\tlearn: 0.2285210\ttotal: 33.6s\tremaining: 17.7s\n",
      "1636:\tlearn: 0.2284833\ttotal: 33.6s\tremaining: 17.7s\n",
      "1637:\tlearn: 0.2284517\ttotal: 33.6s\tremaining: 17.7s\n",
      "1638:\tlearn: 0.2284198\ttotal: 33.6s\tremaining: 17.7s\n",
      "1639:\tlearn: 0.2283852\ttotal: 33.6s\tremaining: 17.6s\n",
      "1640:\tlearn: 0.2283572\ttotal: 33.7s\tremaining: 17.6s\n",
      "1641:\tlearn: 0.2283254\ttotal: 33.7s\tremaining: 17.6s\n",
      "1642:\tlearn: 0.2282915\ttotal: 33.7s\tremaining: 17.6s\n",
      "1643:\tlearn: 0.2282616\ttotal: 33.7s\tremaining: 17.6s\n",
      "1644:\tlearn: 0.2282281\ttotal: 33.7s\tremaining: 17.5s\n",
      "1645:\tlearn: 0.2281760\ttotal: 33.8s\tremaining: 17.5s\n",
      "1646:\tlearn: 0.2281404\ttotal: 33.8s\tremaining: 17.5s\n",
      "1647:\tlearn: 0.2281110\ttotal: 33.8s\tremaining: 17.5s\n",
      "1648:\tlearn: 0.2280758\ttotal: 33.8s\tremaining: 17.4s\n",
      "1649:\tlearn: 0.2280497\ttotal: 33.8s\tremaining: 17.4s\n",
      "1650:\tlearn: 0.2280174\ttotal: 33.8s\tremaining: 17.4s\n",
      "1651:\tlearn: 0.2279875\ttotal: 33.9s\tremaining: 17.4s\n",
      "1652:\tlearn: 0.2279616\ttotal: 33.9s\tremaining: 17.4s\n",
      "1653:\tlearn: 0.2279205\ttotal: 33.9s\tremaining: 17.3s\n",
      "1654:\tlearn: 0.2278894\ttotal: 33.9s\tremaining: 17.3s\n",
      "1655:\tlearn: 0.2278621\ttotal: 33.9s\tremaining: 17.3s\n",
      "1656:\tlearn: 0.2278296\ttotal: 34s\tremaining: 17.3s\n",
      "1657:\tlearn: 0.2277989\ttotal: 34s\tremaining: 17.3s\n",
      "1658:\tlearn: 0.2277613\ttotal: 34s\tremaining: 17.2s\n",
      "1659:\tlearn: 0.2277259\ttotal: 34s\tremaining: 17.2s\n",
      "1660:\tlearn: 0.2276940\ttotal: 34s\tremaining: 17.2s\n",
      "1661:\tlearn: 0.2276363\ttotal: 34s\tremaining: 17.2s\n",
      "1662:\tlearn: 0.2276021\ttotal: 34.1s\tremaining: 17.1s\n",
      "1663:\tlearn: 0.2275696\ttotal: 34.1s\tremaining: 17.1s\n",
      "1664:\tlearn: 0.2275401\ttotal: 34.1s\tremaining: 17.1s\n",
      "1665:\tlearn: 0.2275050\ttotal: 34.1s\tremaining: 17.1s\n",
      "1666:\tlearn: 0.2274584\ttotal: 34.1s\tremaining: 17.1s\n",
      "1667:\tlearn: 0.2274171\ttotal: 34.1s\tremaining: 17s\n",
      "1668:\tlearn: 0.2273775\ttotal: 34.2s\tremaining: 17s\n",
      "1669:\tlearn: 0.2273301\ttotal: 34.2s\tremaining: 17s\n",
      "1670:\tlearn: 0.2273031\ttotal: 34.2s\tremaining: 17s\n",
      "1671:\tlearn: 0.2272379\ttotal: 34.2s\tremaining: 16.9s\n",
      "1672:\tlearn: 0.2272080\ttotal: 34.2s\tremaining: 16.9s\n",
      "1673:\tlearn: 0.2271690\ttotal: 34.3s\tremaining: 16.9s\n",
      "1674:\tlearn: 0.2271356\ttotal: 34.3s\tremaining: 16.9s\n",
      "1675:\tlearn: 0.2271068\ttotal: 34.3s\tremaining: 16.9s\n",
      "1676:\tlearn: 0.2270750\ttotal: 34.3s\tremaining: 16.8s\n",
      "1677:\tlearn: 0.2270382\ttotal: 34.3s\tremaining: 16.8s\n",
      "1678:\tlearn: 0.2269949\ttotal: 34.4s\tremaining: 16.8s\n",
      "1679:\tlearn: 0.2269245\ttotal: 34.4s\tremaining: 16.8s\n",
      "1680:\tlearn: 0.2268848\ttotal: 34.4s\tremaining: 16.8s\n",
      "1681:\tlearn: 0.2268537\ttotal: 34.4s\tremaining: 16.7s\n",
      "1682:\tlearn: 0.2268260\ttotal: 34.4s\tremaining: 16.7s\n",
      "1683:\tlearn: 0.2267910\ttotal: 34.4s\tremaining: 16.7s\n",
      "1684:\tlearn: 0.2267501\ttotal: 34.5s\tremaining: 16.7s\n",
      "1685:\tlearn: 0.2267108\ttotal: 34.5s\tremaining: 16.6s\n",
      "1686:\tlearn: 0.2266729\ttotal: 34.5s\tremaining: 16.6s\n",
      "1687:\tlearn: 0.2266466\ttotal: 34.5s\tremaining: 16.6s\n",
      "1688:\tlearn: 0.2266130\ttotal: 34.5s\tremaining: 16.6s\n",
      "1689:\tlearn: 0.2265789\ttotal: 34.5s\tremaining: 16.6s\n",
      "1690:\tlearn: 0.2265355\ttotal: 34.6s\tremaining: 16.5s\n",
      "1691:\tlearn: 0.2265053\ttotal: 34.6s\tremaining: 16.5s\n",
      "1692:\tlearn: 0.2264742\ttotal: 34.6s\tremaining: 16.5s\n",
      "1693:\tlearn: 0.2264472\ttotal: 34.6s\tremaining: 16.5s\n",
      "1694:\tlearn: 0.2264120\ttotal: 34.6s\tremaining: 16.4s\n",
      "1695:\tlearn: 0.2263797\ttotal: 34.7s\tremaining: 16.4s\n",
      "1696:\tlearn: 0.2263439\ttotal: 34.7s\tremaining: 16.4s\n",
      "1697:\tlearn: 0.2262870\ttotal: 34.7s\tremaining: 16.4s\n",
      "1698:\tlearn: 0.2262535\ttotal: 34.7s\tremaining: 16.4s\n",
      "1699:\tlearn: 0.2262095\ttotal: 34.7s\tremaining: 16.3s\n",
      "1700:\tlearn: 0.2261615\ttotal: 34.7s\tremaining: 16.3s\n",
      "1701:\tlearn: 0.2261265\ttotal: 34.8s\tremaining: 16.3s\n",
      "1702:\tlearn: 0.2260976\ttotal: 34.8s\tremaining: 16.3s\n",
      "1703:\tlearn: 0.2260678\ttotal: 34.8s\tremaining: 16.3s\n",
      "1704:\tlearn: 0.2260344\ttotal: 34.8s\tremaining: 16.2s\n",
      "1705:\tlearn: 0.2259977\ttotal: 34.8s\tremaining: 16.2s\n",
      "1706:\tlearn: 0.2259683\ttotal: 34.9s\tremaining: 16.2s\n",
      "1707:\tlearn: 0.2259339\ttotal: 34.9s\tremaining: 16.2s\n",
      "1708:\tlearn: 0.2258974\ttotal: 34.9s\tremaining: 16.1s\n",
      "1709:\tlearn: 0.2258538\ttotal: 34.9s\tremaining: 16.1s\n",
      "1710:\tlearn: 0.2258244\ttotal: 34.9s\tremaining: 16.1s\n",
      "1711:\tlearn: 0.2257984\ttotal: 34.9s\tremaining: 16.1s\n",
      "1712:\tlearn: 0.2257671\ttotal: 35s\tremaining: 16.1s\n",
      "1713:\tlearn: 0.2257285\ttotal: 35s\tremaining: 16s\n",
      "1714:\tlearn: 0.2256901\ttotal: 35s\tremaining: 16s\n",
      "1715:\tlearn: 0.2256559\ttotal: 35s\tremaining: 16s\n",
      "1716:\tlearn: 0.2256216\ttotal: 35s\tremaining: 16s\n",
      "1717:\tlearn: 0.2255778\ttotal: 35.1s\tremaining: 16s\n",
      "1718:\tlearn: 0.2255458\ttotal: 35.1s\tremaining: 15.9s\n",
      "1719:\tlearn: 0.2255095\ttotal: 35.1s\tremaining: 15.9s\n",
      "1720:\tlearn: 0.2254716\ttotal: 35.1s\tremaining: 15.9s\n",
      "1721:\tlearn: 0.2254378\ttotal: 35.1s\tremaining: 15.9s\n",
      "1722:\tlearn: 0.2254021\ttotal: 35.1s\tremaining: 15.8s\n",
      "1723:\tlearn: 0.2253751\ttotal: 35.2s\tremaining: 15.8s\n",
      "1724:\tlearn: 0.2253417\ttotal: 35.2s\tremaining: 15.8s\n",
      "1725:\tlearn: 0.2253059\ttotal: 35.2s\tremaining: 15.8s\n",
      "1726:\tlearn: 0.2252720\ttotal: 35.2s\tremaining: 15.8s\n",
      "1727:\tlearn: 0.2252436\ttotal: 35.2s\tremaining: 15.7s\n",
      "1728:\tlearn: 0.2252140\ttotal: 35.2s\tremaining: 15.7s\n",
      "1729:\tlearn: 0.2251781\ttotal: 35.3s\tremaining: 15.7s\n",
      "1730:\tlearn: 0.2251495\ttotal: 35.3s\tremaining: 15.7s\n",
      "1731:\tlearn: 0.2250923\ttotal: 35.3s\tremaining: 15.7s\n",
      "1732:\tlearn: 0.2250619\ttotal: 35.3s\tremaining: 15.6s\n",
      "1733:\tlearn: 0.2250305\ttotal: 35.3s\tremaining: 15.6s\n",
      "1734:\tlearn: 0.2249927\ttotal: 35.4s\tremaining: 15.6s\n",
      "1735:\tlearn: 0.2249609\ttotal: 35.4s\tremaining: 15.6s\n",
      "1736:\tlearn: 0.2249261\ttotal: 35.4s\tremaining: 15.5s\n",
      "1737:\tlearn: 0.2248877\ttotal: 35.4s\tremaining: 15.5s\n",
      "1738:\tlearn: 0.2248585\ttotal: 35.4s\tremaining: 15.5s\n",
      "1739:\tlearn: 0.2248322\ttotal: 35.4s\tremaining: 15.5s\n",
      "1740:\tlearn: 0.2247945\ttotal: 35.5s\tremaining: 15.5s\n",
      "1741:\tlearn: 0.2247555\ttotal: 35.5s\tremaining: 15.4s\n",
      "1742:\tlearn: 0.2247214\ttotal: 35.5s\tremaining: 15.4s\n",
      "1743:\tlearn: 0.2246774\ttotal: 35.5s\tremaining: 15.4s\n",
      "1744:\tlearn: 0.2246415\ttotal: 35.5s\tremaining: 15.4s\n",
      "1745:\tlearn: 0.2246102\ttotal: 35.6s\tremaining: 15.4s\n",
      "1746:\tlearn: 0.2245810\ttotal: 35.6s\tremaining: 15.3s\n",
      "1747:\tlearn: 0.2244988\ttotal: 35.6s\tremaining: 15.3s\n",
      "1748:\tlearn: 0.2244594\ttotal: 35.6s\tremaining: 15.3s\n",
      "1749:\tlearn: 0.2244258\ttotal: 35.6s\tremaining: 15.3s\n",
      "1750:\tlearn: 0.2243843\ttotal: 35.6s\tremaining: 15.2s\n",
      "1751:\tlearn: 0.2243460\ttotal: 35.7s\tremaining: 15.2s\n",
      "1752:\tlearn: 0.2243129\ttotal: 35.7s\tremaining: 15.2s\n",
      "1753:\tlearn: 0.2242835\ttotal: 35.7s\tremaining: 15.2s\n",
      "1754:\tlearn: 0.2242093\ttotal: 35.7s\tremaining: 15.2s\n",
      "1755:\tlearn: 0.2241758\ttotal: 35.7s\tremaining: 15.1s\n",
      "1756:\tlearn: 0.2241475\ttotal: 35.7s\tremaining: 15.1s\n",
      "1757:\tlearn: 0.2241167\ttotal: 35.8s\tremaining: 15.1s\n",
      "1758:\tlearn: 0.2240868\ttotal: 35.8s\tremaining: 15.1s\n",
      "1759:\tlearn: 0.2240511\ttotal: 35.8s\tremaining: 15.1s\n",
      "1760:\tlearn: 0.2239690\ttotal: 35.8s\tremaining: 15s\n",
      "1761:\tlearn: 0.2239447\ttotal: 35.8s\tremaining: 15s\n",
      "1762:\tlearn: 0.2238892\ttotal: 35.9s\tremaining: 15s\n",
      "1763:\tlearn: 0.2238542\ttotal: 35.9s\tremaining: 15s\n",
      "1764:\tlearn: 0.2238211\ttotal: 35.9s\tremaining: 14.9s\n",
      "1765:\tlearn: 0.2237851\ttotal: 35.9s\tremaining: 14.9s\n",
      "1766:\tlearn: 0.2237296\ttotal: 35.9s\tremaining: 14.9s\n",
      "1767:\tlearn: 0.2236821\ttotal: 35.9s\tremaining: 14.9s\n",
      "1768:\tlearn: 0.2236499\ttotal: 36s\tremaining: 14.9s\n",
      "1769:\tlearn: 0.2235665\ttotal: 36s\tremaining: 14.8s\n",
      "1770:\tlearn: 0.2235349\ttotal: 36s\tremaining: 14.8s\n",
      "1771:\tlearn: 0.2234493\ttotal: 36s\tremaining: 14.8s\n",
      "1772:\tlearn: 0.2234054\ttotal: 36s\tremaining: 14.8s\n",
      "1773:\tlearn: 0.2233802\ttotal: 36s\tremaining: 14.8s\n",
      "1774:\tlearn: 0.2233498\ttotal: 36.1s\tremaining: 14.7s\n",
      "1775:\tlearn: 0.2233234\ttotal: 36.1s\tremaining: 14.7s\n",
      "1776:\tlearn: 0.2232828\ttotal: 36.1s\tremaining: 14.7s\n",
      "1777:\tlearn: 0.2232503\ttotal: 36.1s\tremaining: 14.7s\n",
      "1778:\tlearn: 0.2232144\ttotal: 36.1s\tremaining: 14.6s\n",
      "1779:\tlearn: 0.2231746\ttotal: 36.2s\tremaining: 14.6s\n",
      "1780:\tlearn: 0.2231405\ttotal: 36.2s\tremaining: 14.6s\n",
      "1781:\tlearn: 0.2231078\ttotal: 36.2s\tremaining: 14.6s\n",
      "1782:\tlearn: 0.2230776\ttotal: 36.2s\tremaining: 14.6s\n",
      "1783:\tlearn: 0.2230443\ttotal: 36.2s\tremaining: 14.5s\n",
      "1784:\tlearn: 0.2230017\ttotal: 36.2s\tremaining: 14.5s\n",
      "1785:\tlearn: 0.2229667\ttotal: 36.3s\tremaining: 14.5s\n",
      "1786:\tlearn: 0.2229380\ttotal: 36.3s\tremaining: 14.5s\n",
      "1787:\tlearn: 0.2228964\ttotal: 36.3s\tremaining: 14.5s\n",
      "1788:\tlearn: 0.2228661\ttotal: 36.3s\tremaining: 14.4s\n",
      "1789:\tlearn: 0.2228319\ttotal: 36.3s\tremaining: 14.4s\n",
      "1790:\tlearn: 0.2227972\ttotal: 36.4s\tremaining: 14.4s\n",
      "1791:\tlearn: 0.2227600\ttotal: 36.4s\tremaining: 14.4s\n",
      "1792:\tlearn: 0.2227256\ttotal: 36.4s\tremaining: 14.3s\n",
      "1793:\tlearn: 0.2226774\ttotal: 36.4s\tremaining: 14.3s\n",
      "1794:\tlearn: 0.2226316\ttotal: 36.4s\tremaining: 14.3s\n",
      "1795:\tlearn: 0.2226058\ttotal: 36.4s\tremaining: 14.3s\n",
      "1796:\tlearn: 0.2225696\ttotal: 36.5s\tremaining: 14.3s\n",
      "1797:\tlearn: 0.2225357\ttotal: 36.5s\tremaining: 14.2s\n",
      "1798:\tlearn: 0.2224885\ttotal: 36.5s\tremaining: 14.2s\n",
      "1799:\tlearn: 0.2224132\ttotal: 36.5s\tremaining: 14.2s\n",
      "1800:\tlearn: 0.2223662\ttotal: 36.5s\tremaining: 14.2s\n",
      "1801:\tlearn: 0.2223265\ttotal: 36.5s\tremaining: 14.2s\n",
      "1802:\tlearn: 0.2222971\ttotal: 36.6s\tremaining: 14.1s\n",
      "1803:\tlearn: 0.2222684\ttotal: 36.6s\tremaining: 14.1s\n",
      "1804:\tlearn: 0.2222269\ttotal: 36.6s\tremaining: 14.1s\n",
      "1805:\tlearn: 0.2221927\ttotal: 36.6s\tremaining: 14.1s\n",
      "1806:\tlearn: 0.2221558\ttotal: 36.6s\tremaining: 14s\n",
      "1807:\tlearn: 0.2221191\ttotal: 36.6s\tremaining: 14s\n",
      "1808:\tlearn: 0.2220885\ttotal: 36.7s\tremaining: 14s\n",
      "1809:\tlearn: 0.2220555\ttotal: 36.7s\tremaining: 14s\n",
      "1810:\tlearn: 0.2220186\ttotal: 36.7s\tremaining: 14s\n",
      "1811:\tlearn: 0.2219760\ttotal: 36.7s\tremaining: 13.9s\n",
      "1812:\tlearn: 0.2219403\ttotal: 36.7s\tremaining: 13.9s\n",
      "1813:\tlearn: 0.2219025\ttotal: 36.8s\tremaining: 13.9s\n",
      "1814:\tlearn: 0.2218768\ttotal: 36.8s\tremaining: 13.9s\n",
      "1815:\tlearn: 0.2218467\ttotal: 36.8s\tremaining: 13.9s\n",
      "1816:\tlearn: 0.2217759\ttotal: 36.8s\tremaining: 13.8s\n",
      "1817:\tlearn: 0.2217311\ttotal: 36.8s\tremaining: 13.8s\n",
      "1818:\tlearn: 0.2216965\ttotal: 36.8s\tremaining: 13.8s\n",
      "1819:\tlearn: 0.2216574\ttotal: 36.9s\tremaining: 13.8s\n",
      "1820:\tlearn: 0.2216240\ttotal: 36.9s\tremaining: 13.8s\n",
      "1821:\tlearn: 0.2215885\ttotal: 36.9s\tremaining: 13.7s\n",
      "1822:\tlearn: 0.2215461\ttotal: 36.9s\tremaining: 13.7s\n",
      "1823:\tlearn: 0.2215069\ttotal: 36.9s\tremaining: 13.7s\n",
      "1824:\tlearn: 0.2214693\ttotal: 37s\tremaining: 13.7s\n",
      "1825:\tlearn: 0.2214372\ttotal: 37s\tremaining: 13.6s\n",
      "1826:\tlearn: 0.2214047\ttotal: 37s\tremaining: 13.6s\n",
      "1827:\tlearn: 0.2213736\ttotal: 37s\tremaining: 13.6s\n",
      "1828:\tlearn: 0.2213440\ttotal: 37s\tremaining: 13.6s\n",
      "1829:\tlearn: 0.2213068\ttotal: 37s\tremaining: 13.6s\n",
      "1830:\tlearn: 0.2212762\ttotal: 37.1s\tremaining: 13.5s\n",
      "1831:\tlearn: 0.2212250\ttotal: 37.1s\tremaining: 13.5s\n",
      "1832:\tlearn: 0.2211985\ttotal: 37.1s\tremaining: 13.5s\n",
      "1833:\tlearn: 0.2211627\ttotal: 37.1s\tremaining: 13.5s\n",
      "1834:\tlearn: 0.2211345\ttotal: 37.1s\tremaining: 13.5s\n",
      "1835:\tlearn: 0.2211005\ttotal: 37.1s\tremaining: 13.4s\n",
      "1836:\tlearn: 0.2210728\ttotal: 37.2s\tremaining: 13.4s\n",
      "1837:\tlearn: 0.2210363\ttotal: 37.2s\tremaining: 13.4s\n",
      "1838:\tlearn: 0.2210030\ttotal: 37.2s\tremaining: 13.4s\n",
      "1839:\tlearn: 0.2209703\ttotal: 37.2s\tremaining: 13.3s\n",
      "1840:\tlearn: 0.2209359\ttotal: 37.2s\tremaining: 13.3s\n",
      "1841:\tlearn: 0.2209029\ttotal: 37.2s\tremaining: 13.3s\n",
      "1842:\tlearn: 0.2208643\ttotal: 37.3s\tremaining: 13.3s\n",
      "1843:\tlearn: 0.2208129\ttotal: 37.3s\tremaining: 13.3s\n",
      "1844:\tlearn: 0.2207700\ttotal: 37.3s\tremaining: 13.2s\n",
      "1845:\tlearn: 0.2207331\ttotal: 37.3s\tremaining: 13.2s\n",
      "1846:\tlearn: 0.2206958\ttotal: 37.3s\tremaining: 13.2s\n",
      "1847:\tlearn: 0.2206629\ttotal: 37.4s\tremaining: 13.2s\n",
      "1848:\tlearn: 0.2206259\ttotal: 37.4s\tremaining: 13.2s\n",
      "1849:\tlearn: 0.2206007\ttotal: 37.4s\tremaining: 13.1s\n",
      "1850:\tlearn: 0.2205638\ttotal: 37.4s\tremaining: 13.1s\n",
      "1851:\tlearn: 0.2205286\ttotal: 37.4s\tremaining: 13.1s\n",
      "1852:\tlearn: 0.2204985\ttotal: 37.4s\tremaining: 13.1s\n",
      "1853:\tlearn: 0.2204508\ttotal: 37.5s\tremaining: 13.1s\n",
      "1854:\tlearn: 0.2204173\ttotal: 37.5s\tremaining: 13s\n",
      "1855:\tlearn: 0.2203885\ttotal: 37.5s\tremaining: 13s\n",
      "1856:\tlearn: 0.2203493\ttotal: 37.5s\tremaining: 13s\n",
      "1857:\tlearn: 0.2203224\ttotal: 37.5s\tremaining: 13s\n",
      "1858:\tlearn: 0.2202899\ttotal: 37.5s\tremaining: 12.9s\n",
      "1859:\tlearn: 0.2202450\ttotal: 37.6s\tremaining: 12.9s\n",
      "1860:\tlearn: 0.2202069\ttotal: 37.6s\tremaining: 12.9s\n",
      "1861:\tlearn: 0.2201775\ttotal: 37.6s\tremaining: 12.9s\n",
      "1862:\tlearn: 0.2201292\ttotal: 37.6s\tremaining: 12.9s\n",
      "1863:\tlearn: 0.2201023\ttotal: 37.6s\tremaining: 12.8s\n",
      "1864:\tlearn: 0.2200757\ttotal: 37.6s\tremaining: 12.8s\n",
      "1865:\tlearn: 0.2200450\ttotal: 37.7s\tremaining: 12.8s\n",
      "1866:\tlearn: 0.2200091\ttotal: 37.7s\tremaining: 12.8s\n",
      "1867:\tlearn: 0.2199724\ttotal: 37.7s\tremaining: 12.8s\n",
      "1868:\tlearn: 0.2199401\ttotal: 37.7s\tremaining: 12.7s\n",
      "1869:\tlearn: 0.2198948\ttotal: 37.7s\tremaining: 12.7s\n",
      "1870:\tlearn: 0.2198596\ttotal: 37.7s\tremaining: 12.7s\n",
      "1871:\tlearn: 0.2198255\ttotal: 37.8s\tremaining: 12.7s\n",
      "1872:\tlearn: 0.2197936\ttotal: 37.8s\tremaining: 12.6s\n",
      "1873:\tlearn: 0.2197654\ttotal: 37.8s\tremaining: 12.6s\n",
      "1874:\tlearn: 0.2197315\ttotal: 37.8s\tremaining: 12.6s\n",
      "1875:\tlearn: 0.2196979\ttotal: 37.8s\tremaining: 12.6s\n",
      "1876:\tlearn: 0.2196579\ttotal: 37.9s\tremaining: 12.6s\n",
      "1877:\tlearn: 0.2196077\ttotal: 37.9s\tremaining: 12.5s\n",
      "1878:\tlearn: 0.2195754\ttotal: 37.9s\tremaining: 12.5s\n",
      "1879:\tlearn: 0.2195340\ttotal: 37.9s\tremaining: 12.5s\n",
      "1880:\tlearn: 0.2194978\ttotal: 37.9s\tremaining: 12.5s\n",
      "1881:\tlearn: 0.2194643\ttotal: 37.9s\tremaining: 12.5s\n",
      "1882:\tlearn: 0.2194323\ttotal: 38s\tremaining: 12.4s\n",
      "1883:\tlearn: 0.2194048\ttotal: 38s\tremaining: 12.4s\n",
      "1884:\tlearn: 0.2193725\ttotal: 38s\tremaining: 12.4s\n",
      "1885:\tlearn: 0.2193393\ttotal: 38s\tremaining: 12.4s\n",
      "1886:\tlearn: 0.2192953\ttotal: 38s\tremaining: 12.4s\n",
      "1887:\tlearn: 0.2192658\ttotal: 38s\tremaining: 12.3s\n",
      "1888:\tlearn: 0.2192328\ttotal: 38.1s\tremaining: 12.3s\n",
      "1889:\tlearn: 0.2192022\ttotal: 38.1s\tremaining: 12.3s\n",
      "1890:\tlearn: 0.2191646\ttotal: 38.1s\tremaining: 12.3s\n",
      "1891:\tlearn: 0.2191226\ttotal: 38.1s\tremaining: 12.3s\n",
      "1892:\tlearn: 0.2190782\ttotal: 38.1s\tremaining: 12.2s\n",
      "1893:\tlearn: 0.2190489\ttotal: 38.2s\tremaining: 12.2s\n",
      "1894:\tlearn: 0.2189769\ttotal: 38.2s\tremaining: 12.2s\n",
      "1895:\tlearn: 0.2189476\ttotal: 38.2s\tremaining: 12.2s\n",
      "1896:\tlearn: 0.2189105\ttotal: 38.2s\tremaining: 12.1s\n",
      "1897:\tlearn: 0.2188712\ttotal: 38.2s\tremaining: 12.1s\n",
      "1898:\tlearn: 0.2188378\ttotal: 38.2s\tremaining: 12.1s\n",
      "1899:\tlearn: 0.2188022\ttotal: 38.3s\tremaining: 12.1s\n",
      "1900:\tlearn: 0.2187705\ttotal: 38.3s\tremaining: 12.1s\n",
      "1901:\tlearn: 0.2187431\ttotal: 38.3s\tremaining: 12s\n",
      "1902:\tlearn: 0.2187147\ttotal: 38.3s\tremaining: 12s\n",
      "1903:\tlearn: 0.2186797\ttotal: 38.3s\tremaining: 12s\n",
      "1904:\tlearn: 0.2186360\ttotal: 38.3s\tremaining: 12s\n",
      "1905:\tlearn: 0.2186008\ttotal: 38.4s\tremaining: 12s\n",
      "1906:\tlearn: 0.2185608\ttotal: 38.4s\tremaining: 11.9s\n",
      "1907:\tlearn: 0.2185184\ttotal: 38.4s\tremaining: 11.9s\n",
      "1908:\tlearn: 0.2184885\ttotal: 38.4s\tremaining: 11.9s\n",
      "1909:\tlearn: 0.2184505\ttotal: 38.4s\tremaining: 11.9s\n",
      "1910:\tlearn: 0.2184144\ttotal: 38.4s\tremaining: 11.8s\n",
      "1911:\tlearn: 0.2183761\ttotal: 38.5s\tremaining: 11.8s\n",
      "1912:\tlearn: 0.2183420\ttotal: 38.5s\tremaining: 11.8s\n",
      "1913:\tlearn: 0.2183023\ttotal: 38.5s\tremaining: 11.8s\n",
      "1914:\tlearn: 0.2182718\ttotal: 38.5s\tremaining: 11.8s\n",
      "1915:\tlearn: 0.2182139\ttotal: 38.5s\tremaining: 11.7s\n",
      "1916:\tlearn: 0.2181808\ttotal: 38.6s\tremaining: 11.7s\n",
      "1917:\tlearn: 0.2181441\ttotal: 38.6s\tremaining: 11.7s\n",
      "1918:\tlearn: 0.2181087\ttotal: 38.6s\tremaining: 11.7s\n",
      "1919:\tlearn: 0.2180168\ttotal: 38.6s\tremaining: 11.7s\n",
      "1920:\tlearn: 0.2179842\ttotal: 38.6s\tremaining: 11.6s\n",
      "1921:\tlearn: 0.2179555\ttotal: 38.6s\tremaining: 11.6s\n",
      "1922:\tlearn: 0.2179195\ttotal: 38.7s\tremaining: 11.6s\n",
      "1923:\tlearn: 0.2178869\ttotal: 38.7s\tremaining: 11.6s\n",
      "1924:\tlearn: 0.2178527\ttotal: 38.7s\tremaining: 11.6s\n",
      "1925:\tlearn: 0.2178131\ttotal: 38.7s\tremaining: 11.5s\n",
      "1926:\tlearn: 0.2177752\ttotal: 38.7s\tremaining: 11.5s\n",
      "1927:\tlearn: 0.2177429\ttotal: 38.8s\tremaining: 11.5s\n",
      "1928:\tlearn: 0.2176884\ttotal: 38.8s\tremaining: 11.5s\n",
      "1929:\tlearn: 0.2176612\ttotal: 38.8s\tremaining: 11.5s\n",
      "1930:\tlearn: 0.2176180\ttotal: 38.8s\tremaining: 11.4s\n",
      "1931:\tlearn: 0.2175721\ttotal: 38.8s\tremaining: 11.4s\n",
      "1932:\tlearn: 0.2175312\ttotal: 38.8s\tremaining: 11.4s\n",
      "1933:\tlearn: 0.2175045\ttotal: 38.9s\tremaining: 11.4s\n",
      "1934:\tlearn: 0.2174654\ttotal: 38.9s\tremaining: 11.4s\n",
      "1935:\tlearn: 0.2174294\ttotal: 38.9s\tremaining: 11.3s\n",
      "1936:\tlearn: 0.2173965\ttotal: 38.9s\tremaining: 11.3s\n",
      "1937:\tlearn: 0.2173610\ttotal: 38.9s\tremaining: 11.3s\n",
      "1938:\tlearn: 0.2173303\ttotal: 38.9s\tremaining: 11.3s\n",
      "1939:\tlearn: 0.2172971\ttotal: 39s\tremaining: 11.2s\n",
      "1940:\tlearn: 0.2172629\ttotal: 39s\tremaining: 11.2s\n",
      "1941:\tlearn: 0.2172295\ttotal: 39s\tremaining: 11.2s\n",
      "1942:\tlearn: 0.2172092\ttotal: 39s\tremaining: 11.2s\n",
      "1943:\tlearn: 0.2171631\ttotal: 39s\tremaining: 11.2s\n",
      "1944:\tlearn: 0.2171136\ttotal: 39s\tremaining: 11.1s\n",
      "1945:\tlearn: 0.2170807\ttotal: 39.1s\tremaining: 11.1s\n",
      "1946:\tlearn: 0.2170060\ttotal: 39.1s\tremaining: 11.1s\n",
      "1947:\tlearn: 0.2169703\ttotal: 39.1s\tremaining: 11.1s\n",
      "1948:\tlearn: 0.2169268\ttotal: 39.1s\tremaining: 11.1s\n",
      "1949:\tlearn: 0.2168922\ttotal: 39.1s\tremaining: 11s\n",
      "1950:\tlearn: 0.2168593\ttotal: 39.2s\tremaining: 11s\n",
      "1951:\tlearn: 0.2168294\ttotal: 39.2s\tremaining: 11s\n",
      "1952:\tlearn: 0.2167614\ttotal: 39.2s\tremaining: 11s\n",
      "1953:\tlearn: 0.2167360\ttotal: 39.2s\tremaining: 11s\n",
      "1954:\tlearn: 0.2167027\ttotal: 39.2s\tremaining: 10.9s\n",
      "1955:\tlearn: 0.2166566\ttotal: 39.2s\tremaining: 10.9s\n",
      "1956:\tlearn: 0.2166091\ttotal: 39.3s\tremaining: 10.9s\n",
      "1957:\tlearn: 0.2165710\ttotal: 39.3s\tremaining: 10.9s\n",
      "1958:\tlearn: 0.2165333\ttotal: 39.3s\tremaining: 10.9s\n",
      "1959:\tlearn: 0.2165025\ttotal: 39.3s\tremaining: 10.8s\n",
      "1960:\tlearn: 0.2164659\ttotal: 39.3s\tremaining: 10.8s\n",
      "1961:\tlearn: 0.2164297\ttotal: 39.3s\tremaining: 10.8s\n",
      "1962:\tlearn: 0.2163821\ttotal: 39.4s\tremaining: 10.8s\n",
      "1963:\tlearn: 0.2163031\ttotal: 39.4s\tremaining: 10.7s\n",
      "1964:\tlearn: 0.2162674\ttotal: 39.4s\tremaining: 10.7s\n",
      "1965:\tlearn: 0.2162318\ttotal: 39.4s\tremaining: 10.7s\n",
      "1966:\tlearn: 0.2161996\ttotal: 39.4s\tremaining: 10.7s\n",
      "1967:\tlearn: 0.2161688\ttotal: 39.5s\tremaining: 10.7s\n",
      "1968:\tlearn: 0.2161252\ttotal: 39.5s\tremaining: 10.6s\n",
      "1969:\tlearn: 0.2160902\ttotal: 39.5s\tremaining: 10.6s\n",
      "1970:\tlearn: 0.2160586\ttotal: 39.5s\tremaining: 10.6s\n",
      "1971:\tlearn: 0.2159719\ttotal: 39.5s\tremaining: 10.6s\n",
      "1972:\tlearn: 0.2159156\ttotal: 39.5s\tremaining: 10.6s\n",
      "1973:\tlearn: 0.2158751\ttotal: 39.6s\tremaining: 10.5s\n",
      "1974:\tlearn: 0.2158417\ttotal: 39.6s\tremaining: 10.5s\n",
      "1975:\tlearn: 0.2158114\ttotal: 39.6s\tremaining: 10.5s\n",
      "1976:\tlearn: 0.2157781\ttotal: 39.6s\tremaining: 10.5s\n",
      "1977:\tlearn: 0.2157381\ttotal: 39.6s\tremaining: 10.5s\n",
      "1978:\tlearn: 0.2157059\ttotal: 39.6s\tremaining: 10.4s\n",
      "1979:\tlearn: 0.2156669\ttotal: 39.7s\tremaining: 10.4s\n",
      "1980:\tlearn: 0.2156326\ttotal: 39.7s\tremaining: 10.4s\n",
      "1981:\tlearn: 0.2155442\ttotal: 39.7s\tremaining: 10.4s\n",
      "1982:\tlearn: 0.2155105\ttotal: 39.7s\tremaining: 10.4s\n",
      "1983:\tlearn: 0.2154705\ttotal: 39.7s\tremaining: 10.3s\n",
      "1984:\tlearn: 0.2154325\ttotal: 39.8s\tremaining: 10.3s\n",
      "1985:\tlearn: 0.2153939\ttotal: 39.8s\tremaining: 10.3s\n",
      "1986:\tlearn: 0.2153502\ttotal: 39.8s\tremaining: 10.3s\n",
      "1987:\tlearn: 0.2153124\ttotal: 39.8s\tremaining: 10.3s\n",
      "1988:\tlearn: 0.2152679\ttotal: 39.8s\tremaining: 10.2s\n",
      "1989:\tlearn: 0.2152310\ttotal: 39.8s\tremaining: 10.2s\n",
      "1990:\tlearn: 0.2151939\ttotal: 39.9s\tremaining: 10.2s\n",
      "1991:\tlearn: 0.2151581\ttotal: 39.9s\tremaining: 10.2s\n",
      "1992:\tlearn: 0.2151248\ttotal: 39.9s\tremaining: 10.1s\n",
      "1993:\tlearn: 0.2150911\ttotal: 39.9s\tremaining: 10.1s\n",
      "1994:\tlearn: 0.2150521\ttotal: 39.9s\tremaining: 10.1s\n",
      "1995:\tlearn: 0.2150229\ttotal: 39.9s\tremaining: 10.1s\n",
      "1996:\tlearn: 0.2149833\ttotal: 40s\tremaining: 10.1s\n",
      "1997:\tlearn: 0.2149515\ttotal: 40s\tremaining: 10s\n",
      "1998:\tlearn: 0.2149055\ttotal: 40s\tremaining: 10s\n",
      "1999:\tlearn: 0.2148648\ttotal: 40s\tremaining: 10s\n",
      "2000:\tlearn: 0.2148328\ttotal: 40s\tremaining: 9.98s\n",
      "2001:\tlearn: 0.2147880\ttotal: 40.1s\tremaining: 9.96s\n",
      "2002:\tlearn: 0.2147569\ttotal: 40.1s\tremaining: 9.94s\n",
      "2003:\tlearn: 0.2147256\ttotal: 40.1s\tremaining: 9.92s\n",
      "2004:\tlearn: 0.2146901\ttotal: 40.1s\tremaining: 9.9s\n",
      "2005:\tlearn: 0.2146563\ttotal: 40.1s\tremaining: 9.88s\n",
      "2006:\tlearn: 0.2145979\ttotal: 40.1s\tremaining: 9.86s\n",
      "2007:\tlearn: 0.2145632\ttotal: 40.2s\tremaining: 9.84s\n",
      "2008:\tlearn: 0.2145333\ttotal: 40.2s\tremaining: 9.82s\n",
      "2009:\tlearn: 0.2144960\ttotal: 40.2s\tremaining: 9.8s\n",
      "2010:\tlearn: 0.2144594\ttotal: 40.2s\tremaining: 9.78s\n",
      "2011:\tlearn: 0.2144275\ttotal: 40.2s\tremaining: 9.76s\n",
      "2012:\tlearn: 0.2143924\ttotal: 40.2s\tremaining: 9.74s\n",
      "2013:\tlearn: 0.2143584\ttotal: 40.3s\tremaining: 9.71s\n",
      "2014:\tlearn: 0.2143249\ttotal: 40.3s\tremaining: 9.69s\n",
      "2015:\tlearn: 0.2142859\ttotal: 40.3s\tremaining: 9.67s\n",
      "2016:\tlearn: 0.2142522\ttotal: 40.3s\tremaining: 9.65s\n",
      "2017:\tlearn: 0.2142082\ttotal: 40.3s\tremaining: 9.63s\n",
      "2018:\tlearn: 0.2141488\ttotal: 40.3s\tremaining: 9.61s\n",
      "2019:\tlearn: 0.2141123\ttotal: 40.4s\tremaining: 9.59s\n",
      "2020:\tlearn: 0.2140840\ttotal: 40.4s\tremaining: 9.57s\n",
      "2021:\tlearn: 0.2140426\ttotal: 40.4s\tremaining: 9.55s\n",
      "2022:\tlearn: 0.2139979\ttotal: 40.4s\tremaining: 9.53s\n",
      "2023:\tlearn: 0.2139543\ttotal: 40.4s\tremaining: 9.51s\n",
      "2024:\tlearn: 0.2139226\ttotal: 40.5s\tremaining: 9.49s\n",
      "2025:\tlearn: 0.2138922\ttotal: 40.5s\tremaining: 9.47s\n",
      "2026:\tlearn: 0.2138612\ttotal: 40.5s\tremaining: 9.45s\n",
      "2027:\tlearn: 0.2138086\ttotal: 40.5s\tremaining: 9.43s\n",
      "2028:\tlearn: 0.2137754\ttotal: 40.5s\tremaining: 9.41s\n",
      "2029:\tlearn: 0.2137304\ttotal: 40.5s\tremaining: 9.39s\n",
      "2030:\tlearn: 0.2136915\ttotal: 40.6s\tremaining: 9.37s\n",
      "2031:\tlearn: 0.2136511\ttotal: 40.6s\tremaining: 9.35s\n",
      "2032:\tlearn: 0.2136204\ttotal: 40.6s\tremaining: 9.32s\n",
      "2033:\tlearn: 0.2135815\ttotal: 40.6s\tremaining: 9.3s\n",
      "2034:\tlearn: 0.2135258\ttotal: 40.6s\tremaining: 9.28s\n",
      "2035:\tlearn: 0.2134869\ttotal: 40.6s\tremaining: 9.26s\n",
      "2036:\tlearn: 0.2134619\ttotal: 40.7s\tremaining: 9.24s\n",
      "2037:\tlearn: 0.2134106\ttotal: 40.7s\tremaining: 9.22s\n",
      "2038:\tlearn: 0.2133636\ttotal: 40.7s\tremaining: 9.2s\n",
      "2039:\tlearn: 0.2133240\ttotal: 40.7s\tremaining: 9.18s\n",
      "2040:\tlearn: 0.2132845\ttotal: 40.7s\tremaining: 9.16s\n",
      "2041:\tlearn: 0.2132487\ttotal: 40.8s\tremaining: 9.14s\n",
      "2042:\tlearn: 0.2131892\ttotal: 40.8s\tremaining: 9.12s\n",
      "2043:\tlearn: 0.2131430\ttotal: 40.8s\tremaining: 9.1s\n",
      "2044:\tlearn: 0.2131073\ttotal: 40.8s\tremaining: 9.08s\n",
      "2045:\tlearn: 0.2130704\ttotal: 40.8s\tremaining: 9.06s\n",
      "2046:\tlearn: 0.2130222\ttotal: 40.8s\tremaining: 9.04s\n",
      "2047:\tlearn: 0.2129859\ttotal: 40.9s\tremaining: 9.02s\n",
      "2048:\tlearn: 0.2129523\ttotal: 40.9s\tremaining: 9s\n",
      "2049:\tlearn: 0.2129142\ttotal: 40.9s\tremaining: 8.98s\n",
      "2050:\tlearn: 0.2128789\ttotal: 40.9s\tremaining: 8.96s\n",
      "2051:\tlearn: 0.2128268\ttotal: 40.9s\tremaining: 8.94s\n",
      "2052:\tlearn: 0.2127865\ttotal: 41s\tremaining: 8.92s\n",
      "2053:\tlearn: 0.2127512\ttotal: 41s\tremaining: 8.9s\n",
      "2054:\tlearn: 0.2127214\ttotal: 41s\tremaining: 8.88s\n",
      "2055:\tlearn: 0.2126770\ttotal: 41s\tremaining: 8.86s\n",
      "2056:\tlearn: 0.2125676\ttotal: 41s\tremaining: 8.83s\n",
      "2057:\tlearn: 0.2125365\ttotal: 41s\tremaining: 8.81s\n",
      "2058:\tlearn: 0.2125033\ttotal: 41.1s\tremaining: 8.79s\n",
      "2059:\tlearn: 0.2124691\ttotal: 41.1s\tremaining: 8.77s\n",
      "2060:\tlearn: 0.2124406\ttotal: 41.1s\tremaining: 8.75s\n",
      "2061:\tlearn: 0.2123894\ttotal: 41.1s\tremaining: 8.73s\n",
      "2062:\tlearn: 0.2123518\ttotal: 41.1s\tremaining: 8.71s\n",
      "2063:\tlearn: 0.2123170\ttotal: 41.1s\tremaining: 8.69s\n",
      "2064:\tlearn: 0.2122787\ttotal: 41.2s\tremaining: 8.67s\n",
      "2065:\tlearn: 0.2122499\ttotal: 41.2s\tremaining: 8.65s\n",
      "2066:\tlearn: 0.2122183\ttotal: 41.2s\tremaining: 8.63s\n",
      "2067:\tlearn: 0.2121875\ttotal: 41.2s\tremaining: 8.61s\n",
      "2068:\tlearn: 0.2121508\ttotal: 41.2s\tremaining: 8.59s\n",
      "2069:\tlearn: 0.2121214\ttotal: 41.2s\tremaining: 8.57s\n",
      "2070:\tlearn: 0.2120900\ttotal: 41.3s\tremaining: 8.55s\n",
      "2071:\tlearn: 0.2120385\ttotal: 41.3s\tremaining: 8.53s\n",
      "2072:\tlearn: 0.2120030\ttotal: 41.3s\tremaining: 8.51s\n",
      "2073:\tlearn: 0.2119709\ttotal: 41.3s\tremaining: 8.49s\n",
      "2074:\tlearn: 0.2119321\ttotal: 41.3s\tremaining: 8.47s\n",
      "2075:\tlearn: 0.2118974\ttotal: 41.4s\tremaining: 8.45s\n",
      "2076:\tlearn: 0.2118569\ttotal: 41.4s\tremaining: 8.43s\n",
      "2077:\tlearn: 0.2118200\ttotal: 41.4s\tremaining: 8.4s\n",
      "2078:\tlearn: 0.2117778\ttotal: 41.4s\tremaining: 8.38s\n",
      "2079:\tlearn: 0.2117465\ttotal: 41.4s\tremaining: 8.37s\n",
      "2080:\tlearn: 0.2117112\ttotal: 41.4s\tremaining: 8.35s\n",
      "2081:\tlearn: 0.2116822\ttotal: 41.5s\tremaining: 8.32s\n",
      "2082:\tlearn: 0.2116471\ttotal: 41.5s\tremaining: 8.3s\n",
      "2083:\tlearn: 0.2116124\ttotal: 41.5s\tremaining: 8.28s\n",
      "2084:\tlearn: 0.2115837\ttotal: 41.5s\tremaining: 8.26s\n",
      "2085:\tlearn: 0.2115411\ttotal: 41.5s\tremaining: 8.24s\n",
      "2086:\tlearn: 0.2115089\ttotal: 41.6s\tremaining: 8.22s\n",
      "2087:\tlearn: 0.2114753\ttotal: 41.6s\tremaining: 8.2s\n",
      "2088:\tlearn: 0.2114456\ttotal: 41.6s\tremaining: 8.18s\n",
      "2089:\tlearn: 0.2114150\ttotal: 41.6s\tremaining: 8.16s\n",
      "2090:\tlearn: 0.2113712\ttotal: 41.6s\tremaining: 8.14s\n",
      "2091:\tlearn: 0.2113292\ttotal: 41.6s\tremaining: 8.12s\n",
      "2092:\tlearn: 0.2112941\ttotal: 41.7s\tremaining: 8.1s\n",
      "2093:\tlearn: 0.2112624\ttotal: 41.7s\tremaining: 8.08s\n",
      "2094:\tlearn: 0.2111975\ttotal: 41.7s\tremaining: 8.06s\n",
      "2095:\tlearn: 0.2111589\ttotal: 41.7s\tremaining: 8.04s\n",
      "2096:\tlearn: 0.2111262\ttotal: 41.7s\tremaining: 8.02s\n",
      "2097:\tlearn: 0.2110942\ttotal: 41.7s\tremaining: 8s\n",
      "2098:\tlearn: 0.2110542\ttotal: 41.8s\tremaining: 7.98s\n",
      "2099:\tlearn: 0.2110107\ttotal: 41.8s\tremaining: 7.96s\n",
      "2100:\tlearn: 0.2109842\ttotal: 41.8s\tremaining: 7.94s\n",
      "2101:\tlearn: 0.2109480\ttotal: 41.8s\tremaining: 7.92s\n",
      "2102:\tlearn: 0.2109098\ttotal: 41.8s\tremaining: 7.9s\n",
      "2103:\tlearn: 0.2108769\ttotal: 41.9s\tremaining: 7.88s\n",
      "2104:\tlearn: 0.2108335\ttotal: 41.9s\tremaining: 7.86s\n",
      "2105:\tlearn: 0.2108091\ttotal: 41.9s\tremaining: 7.84s\n",
      "2106:\tlearn: 0.2107606\ttotal: 41.9s\tremaining: 7.82s\n",
      "2107:\tlearn: 0.2107250\ttotal: 41.9s\tremaining: 7.8s\n",
      "2108:\tlearn: 0.2106850\ttotal: 41.9s\tremaining: 7.78s\n",
      "2109:\tlearn: 0.2106387\ttotal: 42s\tremaining: 7.76s\n",
      "2110:\tlearn: 0.2106068\ttotal: 42s\tremaining: 7.74s\n",
      "2111:\tlearn: 0.2105701\ttotal: 42s\tremaining: 7.71s\n",
      "2112:\tlearn: 0.2105372\ttotal: 42s\tremaining: 7.69s\n",
      "2113:\tlearn: 0.2104992\ttotal: 42s\tremaining: 7.67s\n",
      "2114:\tlearn: 0.2104573\ttotal: 42.1s\tremaining: 7.65s\n",
      "2115:\tlearn: 0.2104203\ttotal: 42.1s\tremaining: 7.63s\n",
      "2116:\tlearn: 0.2103789\ttotal: 42.1s\tremaining: 7.61s\n",
      "2117:\tlearn: 0.2103406\ttotal: 42.1s\tremaining: 7.59s\n",
      "2118:\tlearn: 0.2103151\ttotal: 42.1s\tremaining: 7.57s\n",
      "2119:\tlearn: 0.2102293\ttotal: 42.1s\tremaining: 7.55s\n",
      "2120:\tlearn: 0.2101848\ttotal: 42.2s\tremaining: 7.53s\n",
      "2121:\tlearn: 0.2101521\ttotal: 42.2s\tremaining: 7.51s\n",
      "2122:\tlearn: 0.2101086\ttotal: 42.2s\tremaining: 7.49s\n",
      "2123:\tlearn: 0.2100772\ttotal: 42.2s\tremaining: 7.47s\n",
      "2124:\tlearn: 0.2100395\ttotal: 42.2s\tremaining: 7.45s\n",
      "2125:\tlearn: 0.2100033\ttotal: 42.2s\tremaining: 7.43s\n",
      "2126:\tlearn: 0.2099665\ttotal: 42.3s\tremaining: 7.41s\n",
      "2127:\tlearn: 0.2099231\ttotal: 42.3s\tremaining: 7.39s\n",
      "2128:\tlearn: 0.2098867\ttotal: 42.3s\tremaining: 7.37s\n",
      "2129:\tlearn: 0.2098497\ttotal: 42.3s\tremaining: 7.35s\n",
      "2130:\tlearn: 0.2098167\ttotal: 42.3s\tremaining: 7.33s\n",
      "2131:\tlearn: 0.2097453\ttotal: 42.4s\tremaining: 7.31s\n",
      "2132:\tlearn: 0.2096934\ttotal: 42.4s\tremaining: 7.29s\n",
      "2133:\tlearn: 0.2096301\ttotal: 42.4s\tremaining: 7.27s\n",
      "2134:\tlearn: 0.2095794\ttotal: 42.4s\tremaining: 7.25s\n",
      "2135:\tlearn: 0.2095452\ttotal: 42.4s\tremaining: 7.23s\n",
      "2136:\tlearn: 0.2095050\ttotal: 42.5s\tremaining: 7.21s\n",
      "2137:\tlearn: 0.2094780\ttotal: 42.5s\tremaining: 7.19s\n",
      "2138:\tlearn: 0.2094381\ttotal: 42.5s\tremaining: 7.17s\n",
      "2139:\tlearn: 0.2094098\ttotal: 42.5s\tremaining: 7.15s\n",
      "2140:\tlearn: 0.2093630\ttotal: 42.5s\tremaining: 7.13s\n",
      "2141:\tlearn: 0.2093081\ttotal: 42.5s\tremaining: 7.11s\n",
      "2142:\tlearn: 0.2092761\ttotal: 42.6s\tremaining: 7.09s\n",
      "2143:\tlearn: 0.2092441\ttotal: 42.6s\tremaining: 7.07s\n",
      "2144:\tlearn: 0.2092101\ttotal: 42.6s\tremaining: 7.05s\n",
      "2145:\tlearn: 0.2091810\ttotal: 42.6s\tremaining: 7.03s\n",
      "2146:\tlearn: 0.2091232\ttotal: 42.6s\tremaining: 7.01s\n",
      "2147:\tlearn: 0.2090819\ttotal: 42.7s\tremaining: 6.99s\n",
      "2148:\tlearn: 0.2090466\ttotal: 42.7s\tremaining: 6.97s\n",
      "2149:\tlearn: 0.2089998\ttotal: 42.7s\tremaining: 6.95s\n",
      "2150:\tlearn: 0.2089598\ttotal: 42.7s\tremaining: 6.93s\n",
      "2151:\tlearn: 0.2089179\ttotal: 42.7s\tremaining: 6.91s\n",
      "2152:\tlearn: 0.2088885\ttotal: 42.7s\tremaining: 6.89s\n",
      "2153:\tlearn: 0.2088549\ttotal: 42.8s\tremaining: 6.87s\n",
      "2154:\tlearn: 0.2088131\ttotal: 42.8s\tremaining: 6.85s\n",
      "2155:\tlearn: 0.2087802\ttotal: 42.8s\tremaining: 6.83s\n",
      "2156:\tlearn: 0.2087440\ttotal: 42.8s\tremaining: 6.81s\n",
      "2157:\tlearn: 0.2086931\ttotal: 42.8s\tremaining: 6.79s\n",
      "2158:\tlearn: 0.2086242\ttotal: 42.8s\tremaining: 6.77s\n",
      "2159:\tlearn: 0.2085914\ttotal: 42.9s\tremaining: 6.75s\n",
      "2160:\tlearn: 0.2085586\ttotal: 42.9s\tremaining: 6.73s\n",
      "2161:\tlearn: 0.2085273\ttotal: 42.9s\tremaining: 6.71s\n",
      "2162:\tlearn: 0.2084924\ttotal: 42.9s\tremaining: 6.69s\n",
      "2163:\tlearn: 0.2084545\ttotal: 42.9s\tremaining: 6.67s\n",
      "2164:\tlearn: 0.2083679\ttotal: 42.9s\tremaining: 6.64s\n",
      "2165:\tlearn: 0.2083229\ttotal: 43s\tremaining: 6.63s\n",
      "2166:\tlearn: 0.2082862\ttotal: 43s\tremaining: 6.61s\n",
      "2167:\tlearn: 0.2082423\ttotal: 43s\tremaining: 6.58s\n",
      "2168:\tlearn: 0.2082085\ttotal: 43s\tremaining: 6.56s\n",
      "2169:\tlearn: 0.2081833\ttotal: 43s\tremaining: 6.54s\n",
      "2170:\tlearn: 0.2081469\ttotal: 43s\tremaining: 6.52s\n",
      "2171:\tlearn: 0.2081144\ttotal: 43.1s\tremaining: 6.5s\n",
      "2172:\tlearn: 0.2080803\ttotal: 43.1s\tremaining: 6.48s\n",
      "2173:\tlearn: 0.2080507\ttotal: 43.1s\tremaining: 6.46s\n",
      "2174:\tlearn: 0.2080088\ttotal: 43.1s\tremaining: 6.44s\n",
      "2175:\tlearn: 0.2079758\ttotal: 43.1s\tremaining: 6.42s\n",
      "2176:\tlearn: 0.2079316\ttotal: 43.2s\tremaining: 6.4s\n",
      "2177:\tlearn: 0.2079016\ttotal: 43.2s\tremaining: 6.38s\n",
      "2178:\tlearn: 0.2078589\ttotal: 43.2s\tremaining: 6.36s\n",
      "2179:\tlearn: 0.2078251\ttotal: 43.2s\tremaining: 6.34s\n",
      "2180:\tlearn: 0.2077537\ttotal: 43.2s\tremaining: 6.32s\n",
      "2181:\tlearn: 0.2077221\ttotal: 43.2s\tremaining: 6.3s\n",
      "2182:\tlearn: 0.2076870\ttotal: 43.3s\tremaining: 6.28s\n",
      "2183:\tlearn: 0.2076545\ttotal: 43.3s\tremaining: 6.26s\n",
      "2184:\tlearn: 0.2075735\ttotal: 43.3s\tremaining: 6.24s\n",
      "2185:\tlearn: 0.2075403\ttotal: 43.3s\tremaining: 6.22s\n",
      "2186:\tlearn: 0.2075108\ttotal: 43.3s\tremaining: 6.2s\n",
      "2187:\tlearn: 0.2074640\ttotal: 43.3s\tremaining: 6.18s\n",
      "2188:\tlearn: 0.2074296\ttotal: 43.4s\tremaining: 6.16s\n",
      "2189:\tlearn: 0.2073873\ttotal: 43.4s\tremaining: 6.14s\n",
      "2190:\tlearn: 0.2073447\ttotal: 43.4s\tremaining: 6.12s\n",
      "2191:\tlearn: 0.2073135\ttotal: 43.4s\tremaining: 6.1s\n",
      "2192:\tlearn: 0.2072743\ttotal: 43.4s\tremaining: 6.08s\n",
      "2193:\tlearn: 0.2072467\ttotal: 43.4s\tremaining: 6.06s\n",
      "2194:\tlearn: 0.2072091\ttotal: 43.5s\tremaining: 6.04s\n",
      "2195:\tlearn: 0.2071830\ttotal: 43.5s\tremaining: 6.02s\n",
      "2196:\tlearn: 0.2071365\ttotal: 43.5s\tremaining: 6s\n",
      "2197:\tlearn: 0.2070725\ttotal: 43.5s\tremaining: 5.98s\n",
      "2198:\tlearn: 0.2070331\ttotal: 43.5s\tremaining: 5.96s\n",
      "2199:\tlearn: 0.2069921\ttotal: 43.6s\tremaining: 5.94s\n",
      "2200:\tlearn: 0.2069560\ttotal: 43.6s\tremaining: 5.92s\n",
      "2201:\tlearn: 0.2069220\ttotal: 43.6s\tremaining: 5.9s\n",
      "2202:\tlearn: 0.2068731\ttotal: 43.6s\tremaining: 5.88s\n",
      "2203:\tlearn: 0.2068280\ttotal: 43.6s\tremaining: 5.86s\n",
      "2204:\tlearn: 0.2067927\ttotal: 43.6s\tremaining: 5.84s\n",
      "2205:\tlearn: 0.2067424\ttotal: 43.7s\tremaining: 5.82s\n",
      "2206:\tlearn: 0.2067111\ttotal: 43.7s\tremaining: 5.8s\n",
      "2207:\tlearn: 0.2066840\ttotal: 43.7s\tremaining: 5.78s\n",
      "2208:\tlearn: 0.2066551\ttotal: 43.7s\tremaining: 5.76s\n",
      "2209:\tlearn: 0.2065900\ttotal: 43.7s\tremaining: 5.74s\n",
      "2210:\tlearn: 0.2065453\ttotal: 43.7s\tremaining: 5.72s\n",
      "2211:\tlearn: 0.2065061\ttotal: 43.8s\tremaining: 5.7s\n",
      "2212:\tlearn: 0.2064703\ttotal: 43.8s\tremaining: 5.68s\n",
      "2213:\tlearn: 0.2064351\ttotal: 43.8s\tremaining: 5.66s\n",
      "2214:\tlearn: 0.2063930\ttotal: 43.8s\tremaining: 5.64s\n",
      "2215:\tlearn: 0.2063580\ttotal: 43.8s\tremaining: 5.62s\n",
      "2216:\tlearn: 0.2063204\ttotal: 43.8s\tremaining: 5.6s\n",
      "2217:\tlearn: 0.2062541\ttotal: 43.9s\tremaining: 5.58s\n",
      "2218:\tlearn: 0.2062021\ttotal: 43.9s\tremaining: 5.56s\n",
      "2219:\tlearn: 0.2061627\ttotal: 43.9s\tremaining: 5.54s\n",
      "2220:\tlearn: 0.2061234\ttotal: 43.9s\tremaining: 5.52s\n",
      "2221:\tlearn: 0.2060856\ttotal: 43.9s\tremaining: 5.5s\n",
      "2222:\tlearn: 0.2060479\ttotal: 44s\tremaining: 5.48s\n",
      "2223:\tlearn: 0.2060118\ttotal: 44s\tremaining: 5.46s\n",
      "2224:\tlearn: 0.2059776\ttotal: 44s\tremaining: 5.44s\n",
      "2225:\tlearn: 0.2059514\ttotal: 44s\tremaining: 5.42s\n",
      "2226:\tlearn: 0.2059139\ttotal: 44s\tremaining: 5.39s\n",
      "2227:\tlearn: 0.2058785\ttotal: 44s\tremaining: 5.38s\n",
      "2228:\tlearn: 0.2058221\ttotal: 44.1s\tremaining: 5.36s\n",
      "2229:\tlearn: 0.2057891\ttotal: 44.1s\tremaining: 5.33s\n",
      "2230:\tlearn: 0.2057537\ttotal: 44.1s\tremaining: 5.32s\n",
      "2231:\tlearn: 0.2057308\ttotal: 44.1s\tremaining: 5.29s\n",
      "2232:\tlearn: 0.2056822\ttotal: 44.1s\tremaining: 5.28s\n",
      "2233:\tlearn: 0.2056531\ttotal: 44.1s\tremaining: 5.26s\n",
      "2234:\tlearn: 0.2056190\ttotal: 44.2s\tremaining: 5.24s\n",
      "2235:\tlearn: 0.2055866\ttotal: 44.2s\tremaining: 5.22s\n",
      "2236:\tlearn: 0.2055506\ttotal: 44.2s\tremaining: 5.2s\n",
      "2237:\tlearn: 0.2054652\ttotal: 44.2s\tremaining: 5.18s\n",
      "2238:\tlearn: 0.2054283\ttotal: 44.2s\tremaining: 5.16s\n",
      "2239:\tlearn: 0.2053842\ttotal: 44.3s\tremaining: 5.14s\n",
      "2240:\tlearn: 0.2053440\ttotal: 44.3s\tremaining: 5.12s\n",
      "2241:\tlearn: 0.2053100\ttotal: 44.3s\tremaining: 5.1s\n",
      "2242:\tlearn: 0.2052730\ttotal: 44.3s\tremaining: 5.08s\n",
      "2243:\tlearn: 0.2052361\ttotal: 44.3s\tremaining: 5.06s\n",
      "2244:\tlearn: 0.2051968\ttotal: 44.3s\tremaining: 5.04s\n",
      "2245:\tlearn: 0.2051454\ttotal: 44.4s\tremaining: 5.02s\n",
      "2246:\tlearn: 0.2050855\ttotal: 44.4s\tremaining: 5s\n",
      "2247:\tlearn: 0.2050433\ttotal: 44.4s\tremaining: 4.98s\n",
      "2248:\tlearn: 0.2050066\ttotal: 44.4s\tremaining: 4.96s\n",
      "2249:\tlearn: 0.2049701\ttotal: 44.4s\tremaining: 4.94s\n",
      "2250:\tlearn: 0.2049145\ttotal: 44.5s\tremaining: 4.92s\n",
      "2251:\tlearn: 0.2048742\ttotal: 44.5s\tremaining: 4.9s\n",
      "2252:\tlearn: 0.2048409\ttotal: 44.5s\tremaining: 4.88s\n",
      "2253:\tlearn: 0.2047918\ttotal: 44.5s\tremaining: 4.86s\n",
      "2254:\tlearn: 0.2047612\ttotal: 44.5s\tremaining: 4.84s\n",
      "2255:\tlearn: 0.2047265\ttotal: 44.5s\tremaining: 4.82s\n",
      "2256:\tlearn: 0.2046871\ttotal: 44.6s\tremaining: 4.8s\n",
      "2257:\tlearn: 0.2046496\ttotal: 44.6s\tremaining: 4.78s\n",
      "2258:\tlearn: 0.2046181\ttotal: 44.6s\tremaining: 4.76s\n",
      "2259:\tlearn: 0.2045814\ttotal: 44.6s\tremaining: 4.74s\n",
      "2260:\tlearn: 0.2045495\ttotal: 44.6s\tremaining: 4.72s\n",
      "2261:\tlearn: 0.2045133\ttotal: 44.6s\tremaining: 4.7s\n",
      "2262:\tlearn: 0.2044786\ttotal: 44.7s\tremaining: 4.68s\n",
      "2263:\tlearn: 0.2044423\ttotal: 44.7s\tremaining: 4.66s\n",
      "2264:\tlearn: 0.2044022\ttotal: 44.7s\tremaining: 4.64s\n",
      "2265:\tlearn: 0.2043684\ttotal: 44.7s\tremaining: 4.62s\n",
      "2266:\tlearn: 0.2043358\ttotal: 44.7s\tremaining: 4.6s\n",
      "2267:\tlearn: 0.2042907\ttotal: 44.8s\tremaining: 4.58s\n",
      "2268:\tlearn: 0.2042502\ttotal: 44.8s\tremaining: 4.56s\n",
      "2269:\tlearn: 0.2042095\ttotal: 44.8s\tremaining: 4.54s\n",
      "2270:\tlearn: 0.2041644\ttotal: 44.8s\tremaining: 4.52s\n",
      "2271:\tlearn: 0.2041121\ttotal: 44.8s\tremaining: 4.5s\n",
      "2272:\tlearn: 0.2040799\ttotal: 44.8s\tremaining: 4.48s\n",
      "2273:\tlearn: 0.2040448\ttotal: 44.9s\tremaining: 4.46s\n",
      "2274:\tlearn: 0.2039761\ttotal: 44.9s\tremaining: 4.44s\n",
      "2275:\tlearn: 0.2039315\ttotal: 44.9s\tremaining: 4.42s\n",
      "2276:\tlearn: 0.2038907\ttotal: 44.9s\tremaining: 4.4s\n",
      "2277:\tlearn: 0.2038567\ttotal: 44.9s\tremaining: 4.38s\n",
      "2278:\tlearn: 0.2038206\ttotal: 45s\tremaining: 4.36s\n",
      "2279:\tlearn: 0.2037841\ttotal: 45s\tremaining: 4.34s\n",
      "2280:\tlearn: 0.2037499\ttotal: 45s\tremaining: 4.32s\n",
      "2281:\tlearn: 0.2037110\ttotal: 45s\tremaining: 4.3s\n",
      "2282:\tlearn: 0.2036808\ttotal: 45s\tremaining: 4.28s\n",
      "2283:\tlearn: 0.2036487\ttotal: 45s\tremaining: 4.26s\n",
      "2284:\tlearn: 0.2036098\ttotal: 45.1s\tremaining: 4.24s\n",
      "2285:\tlearn: 0.2035764\ttotal: 45.1s\tremaining: 4.22s\n",
      "2286:\tlearn: 0.2035420\ttotal: 45.1s\tremaining: 4.2s\n",
      "2287:\tlearn: 0.2035053\ttotal: 45.1s\tremaining: 4.18s\n",
      "2288:\tlearn: 0.2034705\ttotal: 45.1s\tremaining: 4.16s\n",
      "2289:\tlearn: 0.2034300\ttotal: 45.1s\tremaining: 4.14s\n",
      "2290:\tlearn: 0.2033948\ttotal: 45.2s\tremaining: 4.12s\n",
      "2291:\tlearn: 0.2033623\ttotal: 45.2s\tremaining: 4.1s\n",
      "2292:\tlearn: 0.2033243\ttotal: 45.2s\tremaining: 4.08s\n",
      "2293:\tlearn: 0.2032880\ttotal: 45.2s\tremaining: 4.06s\n",
      "2294:\tlearn: 0.2032501\ttotal: 45.2s\tremaining: 4.04s\n",
      "2295:\tlearn: 0.2032118\ttotal: 45.2s\tremaining: 4.02s\n",
      "2296:\tlearn: 0.2031827\ttotal: 45.3s\tremaining: 4s\n",
      "2297:\tlearn: 0.2031511\ttotal: 45.3s\tremaining: 3.98s\n",
      "2298:\tlearn: 0.2031088\ttotal: 45.3s\tremaining: 3.96s\n",
      "2299:\tlearn: 0.2030789\ttotal: 45.3s\tremaining: 3.94s\n",
      "2300:\tlearn: 0.2030313\ttotal: 45.3s\tremaining: 3.92s\n",
      "2301:\tlearn: 0.2029933\ttotal: 45.3s\tremaining: 3.9s\n",
      "2302:\tlearn: 0.2029564\ttotal: 45.4s\tremaining: 3.88s\n",
      "2303:\tlearn: 0.2029068\ttotal: 45.4s\tremaining: 3.86s\n",
      "2304:\tlearn: 0.2028772\ttotal: 45.4s\tremaining: 3.84s\n",
      "2305:\tlearn: 0.2028390\ttotal: 45.4s\tremaining: 3.82s\n",
      "2306:\tlearn: 0.2028074\ttotal: 45.4s\tremaining: 3.8s\n",
      "2307:\tlearn: 0.2027727\ttotal: 45.5s\tremaining: 3.78s\n",
      "2308:\tlearn: 0.2027361\ttotal: 45.5s\tremaining: 3.76s\n",
      "2309:\tlearn: 0.2027001\ttotal: 45.5s\tremaining: 3.74s\n",
      "2310:\tlearn: 0.2026590\ttotal: 45.5s\tremaining: 3.72s\n",
      "2311:\tlearn: 0.2026119\ttotal: 45.5s\tremaining: 3.7s\n",
      "2312:\tlearn: 0.2025766\ttotal: 45.5s\tremaining: 3.68s\n",
      "2313:\tlearn: 0.2025301\ttotal: 45.5s\tremaining: 3.66s\n",
      "2314:\tlearn: 0.2024951\ttotal: 45.6s\tremaining: 3.64s\n",
      "2315:\tlearn: 0.2024612\ttotal: 45.6s\tremaining: 3.62s\n",
      "2316:\tlearn: 0.2023910\ttotal: 45.6s\tremaining: 3.6s\n",
      "2317:\tlearn: 0.2023534\ttotal: 45.6s\tremaining: 3.58s\n",
      "2318:\tlearn: 0.2023206\ttotal: 45.6s\tremaining: 3.56s\n",
      "2319:\tlearn: 0.2022880\ttotal: 45.7s\tremaining: 3.54s\n",
      "2320:\tlearn: 0.2022563\ttotal: 45.7s\tremaining: 3.52s\n",
      "2321:\tlearn: 0.2022221\ttotal: 45.7s\tremaining: 3.5s\n",
      "2322:\tlearn: 0.2021880\ttotal: 45.7s\tremaining: 3.48s\n",
      "2323:\tlearn: 0.2021559\ttotal: 45.7s\tremaining: 3.46s\n",
      "2324:\tlearn: 0.2021141\ttotal: 45.7s\tremaining: 3.44s\n",
      "2325:\tlearn: 0.2020638\ttotal: 45.8s\tremaining: 3.42s\n",
      "2326:\tlearn: 0.2020303\ttotal: 45.8s\tremaining: 3.4s\n",
      "2327:\tlearn: 0.2020004\ttotal: 45.8s\tremaining: 3.38s\n",
      "2328:\tlearn: 0.2019521\ttotal: 45.8s\tremaining: 3.36s\n",
      "2329:\tlearn: 0.2019170\ttotal: 45.8s\tremaining: 3.34s\n",
      "2330:\tlearn: 0.2018803\ttotal: 45.8s\tremaining: 3.32s\n",
      "2331:\tlearn: 0.2018434\ttotal: 45.9s\tremaining: 3.3s\n",
      "2332:\tlearn: 0.2017961\ttotal: 45.9s\tremaining: 3.28s\n",
      "2333:\tlearn: 0.2017563\ttotal: 45.9s\tremaining: 3.26s\n",
      "2334:\tlearn: 0.2017226\ttotal: 45.9s\tremaining: 3.24s\n",
      "2335:\tlearn: 0.2016839\ttotal: 45.9s\tremaining: 3.22s\n",
      "2336:\tlearn: 0.2016451\ttotal: 45.9s\tremaining: 3.2s\n",
      "2337:\tlearn: 0.2016135\ttotal: 46s\tremaining: 3.18s\n",
      "2338:\tlearn: 0.2015311\ttotal: 46s\tremaining: 3.17s\n",
      "2339:\tlearn: 0.2014987\ttotal: 46s\tremaining: 3.15s\n",
      "2340:\tlearn: 0.2014652\ttotal: 46s\tremaining: 3.13s\n",
      "2341:\tlearn: 0.2014129\ttotal: 46s\tremaining: 3.1s\n",
      "2342:\tlearn: 0.2013885\ttotal: 46.1s\tremaining: 3.09s\n",
      "2343:\tlearn: 0.2013451\ttotal: 46.1s\tremaining: 3.07s\n",
      "2344:\tlearn: 0.2013127\ttotal: 46.1s\tremaining: 3.05s\n",
      "2345:\tlearn: 0.2012845\ttotal: 46.1s\tremaining: 3.03s\n",
      "2346:\tlearn: 0.2012454\ttotal: 46.1s\tremaining: 3.01s\n",
      "2347:\tlearn: 0.2012121\ttotal: 46.1s\tremaining: 2.99s\n",
      "2348:\tlearn: 0.2011760\ttotal: 46.2s\tremaining: 2.97s\n",
      "2349:\tlearn: 0.2011408\ttotal: 46.2s\tremaining: 2.95s\n",
      "2350:\tlearn: 0.2010907\ttotal: 46.2s\tremaining: 2.93s\n",
      "2351:\tlearn: 0.2010595\ttotal: 46.2s\tremaining: 2.91s\n",
      "2352:\tlearn: 0.2010240\ttotal: 46.2s\tremaining: 2.89s\n",
      "2353:\tlearn: 0.2009903\ttotal: 46.3s\tremaining: 2.87s\n",
      "2354:\tlearn: 0.2009434\ttotal: 46.3s\tremaining: 2.85s\n",
      "2355:\tlearn: 0.2009042\ttotal: 46.3s\tremaining: 2.83s\n",
      "2356:\tlearn: 0.2008763\ttotal: 46.3s\tremaining: 2.81s\n",
      "2357:\tlearn: 0.2008369\ttotal: 46.3s\tremaining: 2.79s\n",
      "2358:\tlearn: 0.2008039\ttotal: 46.3s\tremaining: 2.77s\n",
      "2359:\tlearn: 0.2007770\ttotal: 46.4s\tremaining: 2.75s\n",
      "2360:\tlearn: 0.2007370\ttotal: 46.4s\tremaining: 2.73s\n",
      "2361:\tlearn: 0.2006999\ttotal: 46.4s\tremaining: 2.71s\n",
      "2362:\tlearn: 0.2006631\ttotal: 46.4s\tremaining: 2.69s\n",
      "2363:\tlearn: 0.2006305\ttotal: 46.4s\tremaining: 2.67s\n",
      "2364:\tlearn: 0.2005869\ttotal: 46.4s\tremaining: 2.65s\n",
      "2365:\tlearn: 0.2005484\ttotal: 46.5s\tremaining: 2.63s\n",
      "2366:\tlearn: 0.2005178\ttotal: 46.5s\tremaining: 2.61s\n",
      "2367:\tlearn: 0.2004811\ttotal: 46.5s\tremaining: 2.59s\n",
      "2368:\tlearn: 0.2004461\ttotal: 46.5s\tremaining: 2.57s\n",
      "2369:\tlearn: 0.2004171\ttotal: 46.5s\tremaining: 2.55s\n",
      "2370:\tlearn: 0.2003778\ttotal: 46.5s\tremaining: 2.53s\n",
      "2371:\tlearn: 0.2003372\ttotal: 46.6s\tremaining: 2.51s\n",
      "2372:\tlearn: 0.2002893\ttotal: 46.6s\tremaining: 2.49s\n",
      "2373:\tlearn: 0.2002507\ttotal: 46.6s\tremaining: 2.47s\n",
      "2374:\tlearn: 0.2002098\ttotal: 46.6s\tremaining: 2.45s\n",
      "2375:\tlearn: 0.2001789\ttotal: 46.6s\tremaining: 2.43s\n",
      "2376:\tlearn: 0.2001394\ttotal: 46.7s\tremaining: 2.41s\n",
      "2377:\tlearn: 0.2001119\ttotal: 46.7s\tremaining: 2.39s\n",
      "2378:\tlearn: 0.2000768\ttotal: 46.7s\tremaining: 2.37s\n",
      "2379:\tlearn: 0.2000361\ttotal: 46.7s\tremaining: 2.35s\n",
      "2380:\tlearn: 0.2000008\ttotal: 46.7s\tremaining: 2.33s\n",
      "2381:\tlearn: 0.1999658\ttotal: 46.7s\tremaining: 2.31s\n",
      "2382:\tlearn: 0.1999177\ttotal: 46.8s\tremaining: 2.29s\n",
      "2383:\tlearn: 0.1998764\ttotal: 46.8s\tremaining: 2.28s\n",
      "2384:\tlearn: 0.1998374\ttotal: 46.8s\tremaining: 2.26s\n",
      "2385:\tlearn: 0.1997966\ttotal: 46.8s\tremaining: 2.24s\n",
      "2386:\tlearn: 0.1997628\ttotal: 46.8s\tremaining: 2.22s\n",
      "2387:\tlearn: 0.1997245\ttotal: 46.8s\tremaining: 2.2s\n",
      "2388:\tlearn: 0.1996872\ttotal: 46.9s\tremaining: 2.18s\n",
      "2389:\tlearn: 0.1996472\ttotal: 46.9s\tremaining: 2.16s\n",
      "2390:\tlearn: 0.1996215\ttotal: 46.9s\tremaining: 2.14s\n",
      "2391:\tlearn: 0.1995839\ttotal: 46.9s\tremaining: 2.12s\n",
      "2392:\tlearn: 0.1995526\ttotal: 46.9s\tremaining: 2.1s\n",
      "2393:\tlearn: 0.1995047\ttotal: 46.9s\tremaining: 2.08s\n",
      "2394:\tlearn: 0.1994726\ttotal: 47s\tremaining: 2.06s\n",
      "2395:\tlearn: 0.1994358\ttotal: 47s\tremaining: 2.04s\n",
      "2396:\tlearn: 0.1993908\ttotal: 47s\tremaining: 2.02s\n",
      "2397:\tlearn: 0.1993568\ttotal: 47s\tremaining: 2s\n",
      "2398:\tlearn: 0.1993157\ttotal: 47s\tremaining: 1.98s\n",
      "2399:\tlearn: 0.1992841\ttotal: 47.1s\tremaining: 1.96s\n",
      "2400:\tlearn: 0.1992453\ttotal: 47.1s\tremaining: 1.94s\n",
      "2401:\tlearn: 0.1992109\ttotal: 47.1s\tremaining: 1.92s\n",
      "2402:\tlearn: 0.1991807\ttotal: 47.1s\tremaining: 1.9s\n",
      "2403:\tlearn: 0.1991500\ttotal: 47.1s\tremaining: 1.88s\n",
      "2404:\tlearn: 0.1991105\ttotal: 47.1s\tremaining: 1.86s\n",
      "2405:\tlearn: 0.1990800\ttotal: 47.2s\tremaining: 1.84s\n",
      "2406:\tlearn: 0.1990416\ttotal: 47.2s\tremaining: 1.82s\n",
      "2407:\tlearn: 0.1990115\ttotal: 47.2s\tremaining: 1.8s\n",
      "2408:\tlearn: 0.1989705\ttotal: 47.2s\tremaining: 1.78s\n",
      "2409:\tlearn: 0.1989292\ttotal: 47.2s\tremaining: 1.76s\n",
      "2410:\tlearn: 0.1988984\ttotal: 47.3s\tremaining: 1.74s\n",
      "2411:\tlearn: 0.1988611\ttotal: 47.3s\tremaining: 1.72s\n",
      "2412:\tlearn: 0.1988206\ttotal: 47.3s\tremaining: 1.71s\n",
      "2413:\tlearn: 0.1987851\ttotal: 47.3s\tremaining: 1.69s\n",
      "2414:\tlearn: 0.1987315\ttotal: 47.3s\tremaining: 1.67s\n",
      "2415:\tlearn: 0.1986964\ttotal: 47.3s\tremaining: 1.65s\n",
      "2416:\tlearn: 0.1986683\ttotal: 47.4s\tremaining: 1.63s\n",
      "2417:\tlearn: 0.1986339\ttotal: 47.4s\tremaining: 1.61s\n",
      "2418:\tlearn: 0.1986057\ttotal: 47.4s\tremaining: 1.59s\n",
      "2419:\tlearn: 0.1985628\ttotal: 47.4s\tremaining: 1.57s\n",
      "2420:\tlearn: 0.1985209\ttotal: 47.4s\tremaining: 1.55s\n",
      "2421:\tlearn: 0.1984848\ttotal: 47.5s\tremaining: 1.53s\n",
      "2422:\tlearn: 0.1984493\ttotal: 47.5s\tremaining: 1.51s\n",
      "2423:\tlearn: 0.1984091\ttotal: 47.5s\tremaining: 1.49s\n",
      "2424:\tlearn: 0.1983727\ttotal: 47.5s\tremaining: 1.47s\n",
      "2425:\tlearn: 0.1983338\ttotal: 47.5s\tremaining: 1.45s\n",
      "2426:\tlearn: 0.1983001\ttotal: 47.5s\tremaining: 1.43s\n",
      "2427:\tlearn: 0.1982692\ttotal: 47.6s\tremaining: 1.41s\n",
      "2428:\tlearn: 0.1982325\ttotal: 47.6s\tremaining: 1.39s\n",
      "2429:\tlearn: 0.1981956\ttotal: 47.6s\tremaining: 1.37s\n",
      "2430:\tlearn: 0.1981585\ttotal: 47.6s\tremaining: 1.35s\n",
      "2431:\tlearn: 0.1981275\ttotal: 47.6s\tremaining: 1.33s\n",
      "2432:\tlearn: 0.1980782\ttotal: 47.7s\tremaining: 1.31s\n",
      "2433:\tlearn: 0.1980461\ttotal: 47.7s\tremaining: 1.29s\n",
      "2434:\tlearn: 0.1980161\ttotal: 47.7s\tremaining: 1.27s\n",
      "2435:\tlearn: 0.1979697\ttotal: 47.7s\tremaining: 1.25s\n",
      "2436:\tlearn: 0.1979332\ttotal: 47.7s\tremaining: 1.23s\n",
      "2437:\tlearn: 0.1978923\ttotal: 47.7s\tremaining: 1.21s\n",
      "2438:\tlearn: 0.1978234\ttotal: 47.8s\tremaining: 1.19s\n",
      "2439:\tlearn: 0.1977887\ttotal: 47.8s\tremaining: 1.17s\n",
      "2440:\tlearn: 0.1977099\ttotal: 47.8s\tremaining: 1.16s\n",
      "2441:\tlearn: 0.1976703\ttotal: 47.8s\tremaining: 1.14s\n",
      "2442:\tlearn: 0.1976287\ttotal: 47.8s\tremaining: 1.11s\n",
      "2443:\tlearn: 0.1976003\ttotal: 47.8s\tremaining: 1.1s\n",
      "2444:\tlearn: 0.1975717\ttotal: 47.9s\tremaining: 1.08s\n",
      "2445:\tlearn: 0.1975422\ttotal: 47.9s\tremaining: 1.06s\n",
      "2446:\tlearn: 0.1975127\ttotal: 47.9s\tremaining: 1.04s\n",
      "2447:\tlearn: 0.1974845\ttotal: 47.9s\tremaining: 1.02s\n",
      "2448:\tlearn: 0.1974550\ttotal: 47.9s\tremaining: 998ms\n",
      "2449:\tlearn: 0.1974211\ttotal: 48s\tremaining: 979ms\n",
      "2450:\tlearn: 0.1973796\ttotal: 48s\tremaining: 959ms\n",
      "2451:\tlearn: 0.1973446\ttotal: 48s\tremaining: 940ms\n",
      "2452:\tlearn: 0.1973064\ttotal: 48s\tremaining: 920ms\n",
      "2453:\tlearn: 0.1972704\ttotal: 48s\tremaining: 900ms\n",
      "2454:\tlearn: 0.1972352\ttotal: 48s\tremaining: 881ms\n",
      "2455:\tlearn: 0.1971989\ttotal: 48.1s\tremaining: 861ms\n",
      "2456:\tlearn: 0.1971739\ttotal: 48.1s\tremaining: 841ms\n",
      "2457:\tlearn: 0.1971453\ttotal: 48.1s\tremaining: 822ms\n",
      "2458:\tlearn: 0.1971135\ttotal: 48.1s\tremaining: 802ms\n",
      "2459:\tlearn: 0.1970749\ttotal: 48.1s\tremaining: 783ms\n",
      "2460:\tlearn: 0.1970357\ttotal: 48.1s\tremaining: 763ms\n",
      "2461:\tlearn: 0.1970050\ttotal: 48.2s\tremaining: 743ms\n",
      "2462:\tlearn: 0.1969706\ttotal: 48.2s\tremaining: 724ms\n",
      "2463:\tlearn: 0.1969362\ttotal: 48.2s\tremaining: 704ms\n",
      "2464:\tlearn: 0.1969012\ttotal: 48.2s\tremaining: 685ms\n",
      "2465:\tlearn: 0.1968705\ttotal: 48.2s\tremaining: 665ms\n",
      "2466:\tlearn: 0.1968296\ttotal: 48.3s\tremaining: 645ms\n",
      "2467:\tlearn: 0.1967962\ttotal: 48.3s\tremaining: 626ms\n",
      "2468:\tlearn: 0.1967599\ttotal: 48.3s\tremaining: 606ms\n",
      "2469:\tlearn: 0.1967251\ttotal: 48.3s\tremaining: 587ms\n",
      "2470:\tlearn: 0.1966957\ttotal: 48.3s\tremaining: 567ms\n",
      "2471:\tlearn: 0.1966522\ttotal: 48.3s\tremaining: 548ms\n",
      "2472:\tlearn: 0.1966147\ttotal: 48.4s\tremaining: 528ms\n",
      "2473:\tlearn: 0.1965823\ttotal: 48.4s\tremaining: 508ms\n",
      "2474:\tlearn: 0.1965462\ttotal: 48.4s\tremaining: 489ms\n",
      "2475:\tlearn: 0.1965126\ttotal: 48.4s\tremaining: 469ms\n",
      "2476:\tlearn: 0.1964800\ttotal: 48.4s\tremaining: 450ms\n",
      "2477:\tlearn: 0.1964467\ttotal: 48.4s\tremaining: 430ms\n",
      "2478:\tlearn: 0.1964083\ttotal: 48.5s\tremaining: 411ms\n",
      "2479:\tlearn: 0.1963374\ttotal: 48.5s\tremaining: 391ms\n",
      "2480:\tlearn: 0.1963019\ttotal: 48.5s\tremaining: 371ms\n",
      "2481:\tlearn: 0.1962614\ttotal: 48.5s\tremaining: 352ms\n",
      "2482:\tlearn: 0.1962313\ttotal: 48.5s\tremaining: 332ms\n",
      "2483:\tlearn: 0.1961933\ttotal: 48.6s\tremaining: 313ms\n",
      "2484:\tlearn: 0.1961551\ttotal: 48.6s\tremaining: 293ms\n",
      "2485:\tlearn: 0.1961238\ttotal: 48.6s\tremaining: 274ms\n",
      "2486:\tlearn: 0.1960941\ttotal: 48.6s\tremaining: 254ms\n",
      "2487:\tlearn: 0.1960495\ttotal: 48.6s\tremaining: 234ms\n",
      "2488:\tlearn: 0.1960131\ttotal: 48.6s\tremaining: 215ms\n",
      "2489:\tlearn: 0.1959684\ttotal: 48.7s\tremaining: 195ms\n",
      "2490:\tlearn: 0.1959334\ttotal: 48.7s\tremaining: 176ms\n",
      "2491:\tlearn: 0.1959004\ttotal: 48.7s\tremaining: 156ms\n",
      "2492:\tlearn: 0.1958657\ttotal: 48.7s\tremaining: 137ms\n",
      "2493:\tlearn: 0.1958325\ttotal: 48.7s\tremaining: 117ms\n",
      "2494:\tlearn: 0.1957975\ttotal: 48.7s\tremaining: 97.7ms\n",
      "2495:\tlearn: 0.1957609\ttotal: 48.8s\tremaining: 78.1ms\n",
      "2496:\tlearn: 0.1957292\ttotal: 48.8s\tremaining: 58.6ms\n",
      "2497:\tlearn: 0.1957115\ttotal: 48.8s\tremaining: 39.1ms\n",
      "2498:\tlearn: 0.1956730\ttotal: 48.8s\tremaining: 19.5ms\n",
      "2499:\tlearn: 0.1956326\ttotal: 48.8s\tremaining: 0us\n",
      "最佳参数: {'depth': 11, 'grow_policy': 'Lossguide', 'iterations': 2500, 'l2_leaf_reg': 3, 'learning_rate': 0.005, 'min_data_in_leaf': 5, 'scale_pos_weight': 0.8}\n",
      "交叉验证AUC: 0.9481\n",
      "评估模型: CatBoost...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.1801\n",
      "\n",
      "验证集结果 - CatBoost:\n",
      "阈值: 0.1801, AUC: 0.7960, F1: 0.5290, 准确率: 0.7393\n",
      "测试集结果 - CatBoost:\n",
      "阈值: 0.1801, AUC: 0.7849, F1: 0.5002, 准确率: 0.7322\n",
      "\n",
      "==================================================\n",
      "处理模型: Decision Tree\n",
      "==================================================\n",
      "树模型 Decision Tree 使用所有原始特征\n",
      "树模型预处理后特征数量: 50\n",
      "平衡后训练集大小: 21096 (正样本: 0.5000)\n",
      "开始网格搜索: Decision Tree...\n",
      "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n",
      "最佳参数: {'ccp_alpha': 0, 'criterion': 'gini', 'max_depth': None, 'min_samples_leaf': 2, 'min_samples_split': 5}\n",
      "交叉验证AUC: 0.8331\n",
      "评估模型: Decision Tree...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.2500\n",
      "\n",
      "验证集结果 - Decision Tree:\n",
      "阈值: 0.2500, AUC: 0.6107, F1: 0.3758, 准确率: 0.6937\n",
      "测试集结果 - Decision Tree:\n",
      "阈值: 0.2500, AUC: 0.6074, F1: 0.3688, 准确率: 0.7060\n",
      "\n",
      "==================================================\n",
      "处理模型: Random Forest\n",
      "==================================================\n",
      "树模型 Random Forest 使用所有原始特征\n",
      "树模型预处理后特征数量: 50\n",
      "平衡后训练集大小: 21096 (正样本: 0.5000)\n",
      "开始网格搜索: Random Forest...\n",
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "最佳参数: {'class_weight': 'balanced', 'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 1500}\n",
      "交叉验证AUC: 0.9577\n",
      "评估模型: Random Forest...\n",
      "使用阈值方法 'youden' 找到的最佳阈值: 0.3195\n",
      "\n",
      "验证集结果 - Random Forest:\n",
      "阈值: 0.3195, AUC: 0.7924, F1: 0.5360, 准确率: 0.7566\n",
      "测试集结果 - Random Forest:\n",
      "阈值: 0.3195, AUC: 0.7747, F1: 0.4974, 准确率: 0.7447\n",
      "\n",
      "结果已保存至 'model_results_with_thresholds.csv'\n",
      "最佳阈值信息已保存至 'model_optimal_thresholds.csv'\n",
      "生成可视化图表...\n",
      "图表已保存为 'roc_curves.png' 和 'performance_heatmap.png'\n",
      "\n",
      "训练完成!\n",
      "训练日志已保存至: model_training_log_20250915_224737.txt\n",
      "\n",
      "开始提取最佳参数...\n",
      "\n",
      "============================================================\n",
      "成功提取 9 个模型的最佳参数\n",
      "参数文件已保存: model_best_parameters_20250915_230728.json\n",
      "============================================================\n",
      "\n",
      "最佳参数预览:\n",
      "--------------------------------------------------------------------------------\n",
      "模型: Logistic Regression\n",
      "  C: 1\n",
      "  class_weight: {0: 1, 1: 0.8}\n",
      "  penalty: l2\n",
      "  solver: saga\n",
      "--------------------------------------------------------------------------------\n",
      "模型: Ridge Regression\n",
      "  estimator__alpha: 10\n",
      "--------------------------------------------------------------------------------\n",
      "模型: SVM\n",
      "  estimator__C: 10\n",
      "  estimator__class_weight: balanced\n",
      "  estimator__gamma: scale\n",
      "  estimator__kernel: rbf\n",
      "--------------------------------------------------------------------------------\n",
      "模型: KNN\n",
      "  estimator__n_neighbors: 11\n",
      "  estimator__p: 2\n",
      "  estimator__weights: distance\n",
      "--------------------------------------------------------------------------------\n",
      "模型: XGBoost\n",
      "  colsample_bytree: 0.8\n",
      "  gamma: 0.1\n",
      "  learning_rate: 0.005\n",
      "  max_depth: 12\n",
      "  n_estimators: 4000\n",
      "  reg_alpha: 0.1\n",
      "  reg_lambda: 0.1\n",
      "  scale_pos_weight: 0.8\n",
      "  subsample: 0.7\n",
      "--------------------------------------------------------------------------------\n",
      "模型: LightGBM\n",
      "  feature_fraction: 0.8\n",
      "  lambda_l1: 0\n",
      "  lambda_l2: 0.1\n",
      "  learning_rate: 0.005\n",
      "  max_depth: -1\n",
      "  min_data_in_leaf: 15\n",
      "  n_estimators: 2000\n",
      "  num_leaves: 128\n",
      "  scale_pos_weight: 0.8\n",
      "--------------------------------------------------------------------------------\n",
      "模型: CatBoost\n",
      "  depth: 11\n",
      "  grow_policy: Lossguide\n",
      "  iterations: 2500\n",
      "  l2_leaf_reg: 3\n",
      "  learning_rate: 0.005\n",
      "  min_data_in_leaf: 5\n",
      "  scale_pos_weight: 0.8\n",
      "--------------------------------------------------------------------------------\n",
      "模型: Decision Tree\n",
      "  ccp_alpha: 0\n",
      "  criterion: gini\n",
      "  max_depth: None\n",
      "  min_samples_leaf: 2\n",
      "  min_samples_split: 5\n",
      "--------------------------------------------------------------------------------\n",
      "模型: Random Forest\n",
      "  class_weight: balanced\n",
      "  max_depth: None\n",
      "  max_features: sqrt\n",
      "  min_samples_leaf: 2\n",
      "  min_samples_split: 5\n",
      "  n_estimators: 1500\n",
      "--------------------------------------------------------------------------------\n",
      "\n",
      "运行完成! 请检查输出文件获取完整参数详情\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.linear_model import LogisticRegression, RidgeClassifier\n",
    "from sklearn.calibration import CalibratedClassifierCV\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from catboost import CatBoostClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "from imblearn.combine import SMOTETomek\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import (\n",
    "    roc_auc_score, accuracy_score, precision_score, recall_score, f1_score,\n",
    "    confusion_matrix, balanced_accuracy_score, matthews_corrcoef,\n",
    "    cohen_kappa_score, log_loss, brier_score_loss, mean_squared_error, \n",
    "    mean_absolute_error, roc_curve, precision_recall_curve\n",
    ")\n",
    "from sklearn.feature_selection import SelectKBest, f_classif, VarianceThreshold\n",
    "from sklearn.svm import SVC\n",
    "import warnings\n",
    "import sys\n",
    "import re\n",
    "import os\n",
    "import json\n",
    "import ast\n",
    "from datetime import datetime\n",
    "import shap\n",
    "\n",
    "warnings.filterwarnings('ignore', category=UserWarning)\n",
    "\n",
    "# ==================== 全局设置 ====================\n",
    "N_JOBS = os.cpu_count() - 1\n",
    "print(f\"可用CPU核心数: {os.cpu_count()}，使用核心数: {N_JOBS}\")\n",
    "\n",
    "# ==================== GPU检测与设置 ====================\n",
    "def check_gpu_availability():\n",
    "    \"\"\"检测是否有可用的独立GPU\"\"\"\n",
    "    try:\n",
    "        # 尝试导入PyTorch来检测GPU\n",
    "        import torch\n",
    "        if torch.cuda.is_available():\n",
    "            print(f\"检测到独立GPU: {torch.cuda.get_device_name(0)}\")\n",
    "            return True\n",
    "    except ImportError:\n",
    "        pass\n",
    "    \n",
    "    try:\n",
    "        # 尝试使用TensorFlow检测GPU\n",
    "        import tensorflow as tf\n",
    "        gpus = tf.config.list_physical_devices('GPU')\n",
    "        if gpus:\n",
    "            print(f\"检测到独立GPU: {gpus[0].name}\")\n",
    "            return True\n",
    "    except ImportError:\n",
    "        pass\n",
    "    \n",
    "    # 尝试使用nvidia-smi命令检测\n",
    "    try:\n",
    "        import subprocess\n",
    "        result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
    "        if result.returncode == 0:\n",
    "            print(\"检测到独立GPU (通过nvidia-smi)\")\n",
    "            return True\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "    print(\"未检测到独立GPU，将使用CPU加速\")\n",
    "    return False\n",
    "\n",
    "# 全局GPU设置\n",
    "USE_GPU = check_gpu_availability()\n",
    "\n",
    "# ==================== 增强参数网格 ====================\n",
    "param_grids = {\n",
    "    'XGBoost': {\n",
    "        'learning_rate': [0.005],\n",
    "        'max_depth': [12],\n",
    "        'n_estimators': [4000],\n",
    "        'gamma': [0.1],\n",
    "        'reg_lambda': [0.1],\n",
    "        'reg_alpha': [0.1],\n",
    "        'subsample': [0.7],\n",
    "        'colsample_bytree': [0.8],\n",
    "        'scale_pos_weight': [0.8]\n",
    "    },\n",
    "    'CatBoost': {\n",
    "        'learning_rate': [0.005],\n",
    "        'depth': [11],\n",
    "        'iterations': [2500],\n",
    "        'l2_leaf_reg': [3],\n",
    "        'min_data_in_leaf': [5],\n",
    "        'grow_policy': ['Lossguide'],\n",
    "        'scale_pos_weight': [0.8]\n",
    "    },\n",
    "    'LightGBM': {\n",
    "        'learning_rate': [0.005],\n",
    "        'num_leaves': [128],\n",
    "        'min_data_in_leaf': [15],\n",
    "        'max_depth': [-1],\n",
    "        'n_estimators': [2000],\n",
    "        'lambda_l1': [0],\n",
    "        'lambda_l2': [0.1],\n",
    "        'feature_fraction': [0.8],\n",
    "        'scale_pos_weight': [0.8]\n",
    "    },\n",
    "    'SVM': {\n",
    "        'estimator__C': [10],\n",
    "        'estimator__kernel': ['rbf'],\n",
    "        'estimator__gamma': ['scale'],\n",
    "        'estimator__class_weight': ['balanced']\n",
    "    },\n",
    "    'Random Forest': {\n",
    "        'n_estimators': [1500],\n",
    "        'max_depth': [None],\n",
    "        'min_samples_split': [5],\n",
    "        'min_samples_leaf': [2],\n",
    "        'max_features': ['sqrt'],\n",
    "        'class_weight': ['balanced']\n",
    "    },\n",
    "    'Logistic Regression': {\n",
    "        'C': [0.01, 0.1, 1],\n",
    "        'penalty': ['l1', 'l2'],\n",
    "        'solver': ['saga'],\n",
    "        'class_weight': ['balanced', {0:1, 1:0.8}]\n",
    "    },\n",
    "    'Decision Tree': {\n",
    "        'criterion': ['gini'],\n",
    "        'max_depth': [None],\n",
    "        'min_samples_split': [2, 5],\n",
    "        'min_samples_leaf': [1, 2],\n",
    "        'ccp_alpha': [0]\n",
    "    },\n",
    "    'Ridge Regression': {\n",
    "        'estimator__alpha': [10]\n",
    "    }, \n",
    "    'KNN': {\n",
    "        'estimator__n_neighbors': [11],\n",
    "        'estimator__weights': ['distance'],\n",
    "        'estimator__p': [1],\n",
    "        'estimator__metric': ['cosine']\n",
    "    }\n",
    "}\n",
    "\n",
    "# ==================== 特征筛选函数 ====================\n",
    "def prefilter_features(X, threshold=0.85):\n",
    "    \"\"\"剔除高缺失率和低方差的特征\"\"\"\n",
    "    # 计算缺失率\n",
    "    missing_rate = X.isnull().mean()\n",
    "    low_missing = missing_rate[missing_rate < threshold].index.tolist()\n",
    "    \n",
    "    # 计算方差\n",
    "    numerical = X.select_dtypes(include=np.number).columns.tolist()\n",
    "    selector = VarianceThreshold(threshold=0.05)\n",
    "    selector.fit(X[numerical])\n",
    "    high_variance = selector.get_feature_names_out(numerical)\n",
    "    \n",
    "    # 合并结果\n",
    "    return list(set(low_missing) & set(high_variance))\n",
    "\n",
    "\n",
    "def select_kbest_features(X, y, k=30):\n",
    "    \"\"\"使用SelectKBest进行特征选择\"\"\"\n",
    "    selector = SelectKBest(f_classif, k=k)\n",
    "    selector.fit(X, y)\n",
    "    return X.columns[selector.get_support()].tolist()\n",
    "\n",
    "def remove_high_correlation(X, threshold=0.95, min_features=30):\n",
    "    \"\"\"剔除高度相关的特征，但确保至少保留min_features个特征\"\"\"\n",
    "    corr_matrix = X.corr().abs()\n",
    "    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1) > threshold)\n",
    "    to_drop = [column for column in upper.columns if any(upper[column])]\n",
    "    \n",
    "    # 确保不会剔除所有特征\n",
    "    remaining_features = [col for col in X.columns if col not in to_drop]\n",
    "    \n",
    "    if len(remaining_features) < min_features:\n",
    "        print(f\"警告：剔除高相关特征后只剩{len(remaining_features)}个特征，少于最小值{min_features}\")\n",
    "        print(\"将保留所有特征\")\n",
    "        return X.columns.tolist()\n",
    "    \n",
    "    return remaining_features\n",
    "\n",
    "def boruta_feature_selection(X, y, min_features=30):\n",
    "    \"\"\"使用Boruta进行特征选择，确保至少保留min_features个特征\"\"\"\n",
    "    from boruta import BorutaPy\n",
    "    rf = RandomForestClassifier(n_estimators=200, class_weight='balanced', n_jobs=-1)\n",
    "    boruta = BorutaPy(\n",
    "        estimator=rf, \n",
    "        n_estimators='auto', \n",
    "        verbose=0, \n",
    "        perc=90  # 更严格的阈值\n",
    "    )\n",
    "    boruta.fit(X.values, y.values)\n",
    "    selected_features = X.columns[boruta.support_].tolist()\n",
    "    \n",
    "    if len(selected_features) < min_features:\n",
    "        print(f\"警告：Boruta只选择了{len(selected_features)}个特征，少于最小值{min_features}\")\n",
    "        print(\"将补充一些重要特征\")\n",
    "        \n",
    "        # 获取特征重要性排名\n",
    "        rf.fit(X, y)\n",
    "        importances = pd.Series(rf.feature_importances_, index=X.columns)\n",
    "        top_features = importances.sort_values(ascending=False).index[:min_features]\n",
    "        return top_features.tolist()\n",
    "    \n",
    "    return selected_features\n",
    "\n",
    "# ==================== 最佳阈值函数 ====================\n",
    "def find_optimal_threshold(y_true, y_proba, method='youden'):\n",
    "    \"\"\"\n",
    "    寻找验证集上的最佳分类阈值\n",
    "    支持三种方法：\n",
    "    - 'youden': 最大化约登指数 (敏感度 + 特异度 - 1)\n",
    "    - 'f1': 最大化F1分数\n",
    "    - 'closest': 最接近(0,1)的点\n",
    "    \"\"\"\n",
    "    if method == 'youden':\n",
    "        fpr, tpr, thresholds = roc_curve(y_true, y_proba)\n",
    "        j_scores = tpr - fpr\n",
    "        optimal_idx = np.argmax(j_scores)\n",
    "        optimal_threshold = thresholds[optimal_idx]\n",
    "        return optimal_threshold\n",
    "    elif method == 'f1':\n",
    "        precision, recall, thresholds = precision_recall_curve(y_true, y_proba)\n",
    "        f1_scores = 2 * (precision * recall) / (precision + recall + 1e-9)\n",
    "        optimal_idx = np.argmax(f1_scores)\n",
    "        optimal_threshold = thresholds[optimal_idx]\n",
    "        return optimal_threshold\n",
    "    elif method == 'closest':\n",
    "        fpr, tpr, thresholds = roc_curve(y_true, y_proba)\n",
    "        dist = np.sqrt(fpr**2 + (tpr - 1)**2)\n",
    "        optimal_idx = np.argmin(dist)\n",
    "        optimal_threshold = thresholds[optimal_idx]\n",
    "        return optimal_threshold\n",
    "    else:\n",
    "        return 0.5  # 默认阈值\n",
    "\n",
    "# ==================== 数据加载与预处理 ====================\n",
    "def load_and_split_data(file_path, sample_size=None):\n",
    "    data = pd.read_csv(file_path)\n",
    "    \n",
    "    if sample_size is not None and len(data) > sample_size:\n",
    "        data = data.sample(n=sample_size, random_state=42)\n",
    "        print(f\"使用 {sample_size} 个样本进行测试\")\n",
    "    \n",
    "    # 删除所有时间窗的谵妄标签\n",
    "    X = data.drop(['delirium_within_7days'], axis=1)\n",
    "    y = data['delirium_within_7days']\n",
    "    \n",
    "    # 划分训练集、验证集和测试集\n",
    "    X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "    X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.2, random_state=42, stratify=y_temp)\n",
    "    \n",
    "    print(f\"训练集大小: {len(X_train)}, 验证集大小: {len(X_val)}, 测试集大小: {len(X_test)}\")\n",
    "    print(f\"正样本比例 - 训练集: {y_train.mean():.4f}, 验证集: {y_val.mean():.4f}, 测试集: {y_test.mean():.4f}\")\n",
    "    \n",
    "    return X_train, X_val, X_test, y_train, y_val, y_test\n",
    "\n",
    "# ==================== 修改点1：分离预处理函数 ====================\n",
    "def preprocess_data_for_tree(X_tr, X_val, X_test, numerical, categorical):\n",
    "    \"\"\"树模型的预处理：只进行标准化，不进行独热编码\"\"\"\n",
    "    scaler = StandardScaler()\n",
    "    Xn_train = scaler.fit_transform(X_tr[numerical])\n",
    "    Xn_val = scaler.transform(X_val[numerical])\n",
    "    Xn_test = scaler.transform(X_test[numerical])\n",
    "    \n",
    "    # 分类特征直接使用原始值\n",
    "    Xc_train = X_tr[categorical].values\n",
    "    Xc_val = X_val[categorical].values\n",
    "    Xc_test = X_test[categorical].values\n",
    "    \n",
    "    # 合并特征\n",
    "    X_train_proc = np.hstack([Xn_train, Xc_train])\n",
    "    X_val_proc = np.hstack([Xn_val, Xc_val])\n",
    "    X_test_proc = np.hstack([Xn_test, Xc_test])\n",
    "    \n",
    "    fnames = numerical + categorical\n",
    "    cat_indices = list(range(len(numerical), len(numerical) + len(categorical)))\n",
    "    \n",
    "    print(f\"树模型预处理后特征数量: {X_train_proc.shape[1]}\")\n",
    "    return X_train_proc, X_val_proc, X_test_proc, fnames, cat_indices\n",
    "\n",
    "def preprocess_data_for_linear(X_tr, X_val, X_test, numerical, categorical):\n",
    "    \"\"\"线性模型/SVM/KNN的预处理：先独热编码，再进行特征选择\"\"\"\n",
    "    # 1. 独热编码分类特征\n",
    "    ohe = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
    "    Xc_train = ohe.fit_transform(X_tr[categorical])\n",
    "    Xc_val = ohe.transform(X_val[categorical])\n",
    "    Xc_test = ohe.transform(X_test[categorical])\n",
    "    \n",
    "    # 2. 标准化数值特征\n",
    "    scaler = StandardScaler()\n",
    "    Xn_train = scaler.fit_transform(X_tr[numerical])\n",
    "    Xn_val = scaler.transform(X_val[numerical])\n",
    "    Xn_test = scaler.transform(X_test[numerical])\n",
    "    \n",
    "    # 3. 合并特征\n",
    "    X_train_full = np.hstack([Xn_train, Xc_train])\n",
    "    X_val_full = np.hstack([Xn_val, Xc_val])\n",
    "    X_test_full = np.hstack([Xn_test, Xc_test])\n",
    "    \n",
    "    # 4. 特征选择（在编码后的特征上进行）\n",
    "    selector = SelectKBest(f_classif, k=30)\n",
    "    selector.fit(X_train_full, y_train)\n",
    "    selected_indices = selector.get_support(indices=True)\n",
    "    \n",
    "    X_train_proc = X_train_full[:, selected_indices]\n",
    "    X_val_proc = X_val_full[:, selected_indices]\n",
    "    X_test_proc = X_test_full[:, selected_indices]\n",
    "    \n",
    "    # 获取特征名称\n",
    "    cat_names = list(ohe.get_feature_names_out(categorical))\n",
    "    all_names = numerical + cat_names\n",
    "    fnames = [all_names[i] for i in selected_indices]\n",
    "    \n",
    "    print(f\"线性模型预处理后特征数量: {X_train_proc.shape[1]}\")\n",
    "    return X_train_proc, X_val_proc, X_test_proc, fnames, None\n",
    "\n",
    "def balance_data(X_train, y_train):\n",
    "    smt = SMOTETomek(random_state=42)\n",
    "    X_bal, y_bal = smt.fit_resample(X_train, y_train)\n",
    "    print(f\"平衡后训练集大小: {len(X_bal)} (正样本: {y_bal.mean():.4f})\")\n",
    "    return X_bal, y_bal\n",
    "\n",
    "# ==================== 概率校准 ====================\n",
    "def enhanced_probability_calibration(model, name):\n",
    "    if name in ['SVM', 'KNN', 'Ridge Regression']:\n",
    "        return CalibratedClassifierCV(model, method='isotonic', cv=5)\n",
    "    return model\n",
    "\n",
    "# ==================== 网格搜索 ====================\n",
    "def perform_grid_search(model, param_grid, X, y, name):\n",
    "    n_splits = 5 if name in ['KNN', 'SVM'] else 5\n",
    "    \n",
    "    if name == 'KNN':\n",
    "        param_grid = {\n",
    "            'estimator__n_neighbors': [3, 7, 11],\n",
    "            'estimator__weights': ['distance'],\n",
    "            'estimator__p': [2]\n",
    "        }\n",
    "        n_splits = 5\n",
    "    \n",
    "    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n",
    "    \n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=model,\n",
    "        param_grid=param_grid,\n",
    "        cv=cv,\n",
    "        scoring='roc_auc',\n",
    "        n_jobs=-1,\n",
    "        verbose=2,\n",
    "        refit=True,\n",
    "        error_score='raise'\n",
    "    )\n",
    "    \n",
    "    grid_search.fit(X, y)\n",
    "    return grid_search.best_estimator_, grid_search.best_params_, grid_search.best_score_\n",
    "\n",
    "# ==================== 评估函数 (使用最佳阈值) ====================\n",
    "def evaluate_model_with_optimal_threshold(model, X_val, y_val, X_test, y_test, threshold_method='youden'):\n",
    "    try:\n",
    "        # 获取概率预测\n",
    "        if hasattr(model, \"predict_proba\"):\n",
    "            val_proba = model.predict_proba(X_val)[:, 1]\n",
    "            test_proba = model.predict_proba(X_test)[:, 1]\n",
    "        else:\n",
    "            val_proba = model.decision_function(X_val)\n",
    "            test_proba = model.decision_function(X_test)\n",
    "            val_proba = (val_proba - val_proba.min()) / (val_proba.max() - val_proba.min())\n",
    "            test_proba = (test_proba - test_proba.min()) / (test_proba.max() - test_proba.min())\n",
    "        \n",
    "        # 计算验证集上的最佳阈值\n",
    "        optimal_threshold = find_optimal_threshold(y_val, val_proba, method=threshold_method)\n",
    "        print(f\"使用阈值方法 '{threshold_method}' 找到的最佳阈值: {optimal_threshold:.4f}\")\n",
    "        \n",
    "        # 使用最佳阈值进行预测\n",
    "        val_pred = (val_proba >= optimal_threshold).astype(int)\n",
    "        test_pred = (test_proba >= optimal_threshold).astype(int)\n",
    "        \n",
    "        # 计算指标\n",
    "        val_metrics = calculate_metrics(y_val, val_pred, val_proba, optimal_threshold)\n",
    "        test_metrics = calculate_metrics(y_test, test_pred, test_proba, optimal_threshold)\n",
    "        \n",
    "        return val_metrics, test_metrics, val_proba, test_proba, optimal_threshold\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"评估模型时出错: {str(e)}\")\n",
    "        empty_metrics = {\n",
    "            'AUROC': 0.5, 'LogLoss': float('nan'), 'Brier': float('nan'),\n",
    "            'Accuracy': 0.5, 'Precision': 0, 'Recall': 0, 'F1': 0,\n",
    "            'Specificity': 0.5, 'NPV': 0.5, 'BalancedAcc': 0.5,\n",
    "            'MCC': 0, 'Kappa': 0, 'MSE': float('nan'), 'MAE': float('nan'),\n",
    "            'Threshold': 0.5\n",
    "        }\n",
    "        return empty_metrics, empty_metrics, np.zeros(len(y_val)), np.zeros(len(y_test)), 0.5\n",
    "\n",
    "def calculate_metrics(y_true, y_pred, y_proba, threshold):\n",
    "    tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()\n",
    "    specificity = tn / (tn + fp) if (tn + fp) > 0 else 0\n",
    "    npv = tn / (tn + fn) if (tn + fn) > 0 else 0\n",
    "    \n",
    "    return {\n",
    "        'AUROC': roc_auc_score(y_true, y_proba),\n",
    "        'LogLoss': log_loss(y_true, y_proba) if len(np.unique(y_proba)) > 1 else float('nan'),\n",
    "        'Brier': brier_score_loss(y_true, y_proba),\n",
    "        'Accuracy': accuracy_score(y_true, y_pred),\n",
    "        'Precision': precision_score(y_true, y_pred, zero_division=0),\n",
    "        'Recall': recall_score(y_true, y_pred, zero_division=0),\n",
    "        'F1': f1_score(y_true, y_pred, zero_division=0),\n",
    "        'Specificity': specificity,\n",
    "        'NPV': npv,\n",
    "        'BalancedAcc': balanced_accuracy_score(y_true, y_pred),\n",
    "        'MCC': matthews_corrcoef(y_true, y_pred),\n",
    "        'Kappa': cohen_kappa_score(y_true, y_pred),\n",
    "        'MSE': mean_squared_error(y_true, y_proba),\n",
    "        'MAE': mean_absolute_error(y_true, y_proba),\n",
    "        'Threshold': threshold  # 记录使用的阈值\n",
    "    }\n",
    "\n",
    "# ==================== 结果可视化 ====================\n",
    "def plot_results(results_df, model_probas, y_val, y_test):\n",
    "    # 提取测试集结果\n",
    "    test_results = results_df[results_df['Model'].str.contains('Test')].copy()\n",
    "    test_results['Model'] = test_results['Model'].str.replace(' $Test$', '', regex=False)\n",
    "    test_results.set_index('Model', inplace=True)\n",
    "    \n",
    "    # ROC曲线比较\n",
    "    plt.figure(figsize=(10, 8))\n",
    "    for model_name, probas in model_probas.items():\n",
    "        fpr, tpr, _ = roc_curve(y_test, probas)\n",
    "        auc = roc_auc_score(y_test, probas)\n",
    "        plt.plot(fpr, tpr, label=f'{model_name} (AUC = {auc:.3f})', linewidth=2.5)\n",
    "    \n",
    "    plt.plot([0, 1], [0, 1], 'k--', label='Random')\n",
    "    plt.xlabel('False Positive Rate', fontsize=12)\n",
    "    plt.ylabel('True Positive Rate', fontsize=12)\n",
    "    plt.title('ROC Curves Comparison (Test Set)', fontsize=14)\n",
    "    plt.legend(loc='lower right', fontsize=10)\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.savefig('roc_curves.png', dpi=300, bbox_inches='tight')\n",
    "    plt.close()\n",
    "    \n",
    "    # 性能指标热图\n",
    "    plt.figure(figsize=(15, 10))\n",
    "    metrics_to_plot = ['AUROC', 'Accuracy', 'Precision', 'Recall', 'F1', 'Specificity', 'Threshold']\n",
    "    heatmap_data = test_results[metrics_to_plot].T\n",
    "    \n",
    "    annot = heatmap_data.copy().astype(str)\n",
    "    for i in range(heatmap_data.shape[0]):\n",
    "        for j in range(heatmap_data.shape[1]):\n",
    "            value = heatmap_data.iloc[i, j]\n",
    "            if isinstance(value, (int, float)):\n",
    "                annot.iloc[i, j] = f'{value:.3f}'\n",
    "            else:\n",
    "                annot.iloc[i, j] = str(value)\n",
    "    \n",
    "    sns.heatmap(heatmap_data, annot=annot, cmap='YlOrRd', fmt='', \n",
    "                linewidths=0.5, linecolor='lightgray', cbar_kws={'label': 'Score'})\n",
    "    plt.title('Model Performance Comparison (Test Set)', fontsize=14)\n",
    "    plt.xticks(rotation=45, ha='right')\n",
    "    plt.tight_layout()\n",
    "    plt.savefig('performance_heatmap.png', dpi=600, bbox_inches='tight')\n",
    "    plt.close()\n",
    "\n",
    "# ==================== 日志记录器 ====================\n",
    "class DualLogger:\n",
    "    def __init__(self, filename):\n",
    "        self.terminal = sys.stdout\n",
    "        self.log = open(filename, \"w\", encoding=\"utf-8\")\n",
    "    \n",
    "    def write(self, message):\n",
    "        self.terminal.write(message)\n",
    "        self.log.write(message)\n",
    "    \n",
    "    def flush(self):\n",
    "        self.terminal.flush()\n",
    "        self.log.flush()\n",
    "    \n",
    "    def close(self):\n",
    "        self.log.close()\n",
    "\n",
    "# ==================== 最佳参数提取器 ====================\n",
    "def extract_best_params(log_content):\n",
    "    best_params_dict = {}\n",
    "    model_blocks = re.split(r'={50}\\n处理模型: (.+?)\\n={50}', log_content)\n",
    "    \n",
    "    for i in range(1, len(model_blocks), 2):\n",
    "        model_name = model_blocks[i]\n",
    "        model_log = model_blocks[i+1]\n",
    "        params_match = re.search(r'最佳参数: ({[\\s\\S]+?})\\n', model_log)\n",
    "        \n",
    "        if params_match:\n",
    "            params_str = params_match.group(1)\n",
    "            try:\n",
    "                best_params = ast.literal_eval(params_str)\n",
    "                best_params_dict[model_name] = best_params\n",
    "            except:\n",
    "                cleaned_str = re.sub(r'\\s+', ' ', params_str)\n",
    "                cleaned_str = cleaned_str.replace(\"'\", '\"')\n",
    "                try:\n",
    "                    best_params = json.loads(cleaned_str)\n",
    "                    best_params_dict[model_name] = best_params\n",
    "                except:\n",
    "                    best_params_dict[model_name] = {\"error\": \"无法解析参数\"}\n",
    "    return best_params_dict\n",
    "\n",
    "# ==================== 主程序 ====================\n",
    "if __name__ == \"__main__\":\n",
    "    if os.name == 'nt':\n",
    "        from multiprocessing import set_start_method\n",
    "        set_start_method('spawn', force=True)\n",
    "        \n",
    "    # 原始特征定义（筛选前）\n",
    "    original_categorical = [\n",
    "        'gender', 'hypertension', 'chronic_lung_disease', 'chronic_nerval_system_disease', 'chronic_liver_disease', 'chronic_renal_disease', \n",
    "        'diabetes', 'chronic_heart_disease', 'invasive_ventilation_24h', 'vessoactive_agent_24h'\n",
    "    ]\n",
    "    \n",
    "    original_numerical = [\n",
    "        'los_before_icu','weight','admission_age','heart_rate', 'sbp', 'dbp','urineoutput_24h',\n",
    "        'mbp', 'resp_rate', 'temperature', 'spo2', 'glucose', 'aniongap', 'bun',\n",
    "        'calcium', 'chloride', 'creatinine', 'sodium', 'potassium', 'inr',\n",
    "        'pt', 'ptt', 'wbc', 'hematocrit', 'hemoglobin', 'mch', 'mchc', 'mcv',\n",
    "        'platelet', 'rbc', 'rdw', 'gcs_min','apsiii','rass_min',\n",
    "        'charlson_comorbidity_index', 'lods', 'oasis', 'sapsii', 'sofa_score',\n",
    "        'sirs'\n",
    "    ]\n",
    "\n",
    "\n",
    "    # 强制保留的核心临床特征\n",
    "    CORE_CLINICAL_FEATURES = ['gcs_min', 'rass_min']\n",
    "    \n",
    "    # 创建唯一日志文件名\n",
    "    log_filename = f\"model_training_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt\"\n",
    "    \n",
    "    # 设置双输出日志记录器\n",
    "    original_stdout = sys.stdout\n",
    "    dual_logger = DualLogger(log_filename)\n",
    "    sys.stdout = dual_logger\n",
    "    \n",
    "    print(\"=\"*80)\n",
    "    print(f\"开始模型训练 - 使用最佳阈值分类 - 日志保存在: {log_filename}\")\n",
    "    print(\"=\"*80)\n",
    "\n",
    "    SAMPLE_SIZE = None  # 使用完整数据集\n",
    "\n",
    "    # 加载数据\n",
    "    print(\"加载数据...\")\n",
    "    X_train, X_val, X_test, y_train, y_val, y_test = load_and_split_data(\n",
    "        r'C:\\Users\\59713\\Desktop\\data\\delirium\\imputed_merge_data.csv',\n",
    "        sample_size=SAMPLE_SIZE\n",
    "    )\n",
    "    \n",
    "    # ==================== 阶段1：初步特征筛选 ====================\n",
    "    print(\"\\n\" + \"=\"*50)\n",
    "    print(\"阶段1: 初步特征筛选\")\n",
    "    print(\"=\"*50)\n",
    "    \n",
    "    # 步骤1：剔除低质量特征\n",
    "    initial_features = prefilter_features(X_train, threshold=0.85)\n",
    "    print(f\"初始特征筛选后保留特征数: {len(initial_features)}\")\n",
    "    \n",
    "    if len(initial_features) < 20:\n",
    "        print(\"警告：初始特征筛选后特征数不足20，使用所有特征\")\n",
    "        initial_features = X_train.columns.tolist()\n",
    "\n",
    "    # 步骤2：单变量筛选 (ANOVA F-test)\n",
    "    selected_features = select_kbest_features(X_train[initial_features], y_train, k=30)\n",
    "    print(f\"单变量筛选后保留特征数: {len(selected_features)}\")\n",
    "    \n",
    "    if len(selected_features) < 20:\n",
    "        print(\"警告：单变量筛选后特征数不足20，使用初始特征\")\n",
    "        selected_features = initial_features\n",
    "\n",
    "    # 步骤3：相关特征剔除 - 确保至少保留20个特征\n",
    "    final_phase1_features = remove_high_correlation(X_train[selected_features], threshold=0.95, min_features=20)\n",
    "    print(f\"剔除高相关特征后保留特征数: {len(final_phase1_features)}\")\n",
    "    \n",
    "    # ==================== 阶段2：医疗核心变量强化 ====================\n",
    "    print(\"\\n\" + \"=\"*50)\n",
    "    print(\"阶段2: 医疗核心变量强化\")\n",
    "    print(\"=\"*50)\n",
    "\n",
    "    # 确保核心临床特征被包含\n",
    "    print(f\"强制保留的核心临床特征: {CORE_CLINICAL_FEATURES}\")\n",
    "\n",
    "    # 使用Boruta验证特征重要性 - 确保至少保留25个特征\n",
    "    boruta_features = boruta_feature_selection(X_train[final_phase1_features], y_train, min_features=30)\n",
    "    print(f\"Boruta筛选后特征数: {len(boruta_features)}\")\n",
    "\n",
    "    # 合并核心特征\n",
    "    final_phase2_features = list(set(boruta_features) | set(CORE_CLINICAL_FEATURES))\n",
    "    print(f\"添加核心特征后特征数: {len(final_phase2_features)}\")\n",
    "\n",
    "    # 最终检查\n",
    "    if len(final_phase2_features) < 30:\n",
    "        print(\"警告：最终特征数不足20，补充重要特征\")\n",
    "    \n",
    "        # 使用随机森林获取特征重要性\n",
    "        # 只考虑原始定义的数值和分类特征\n",
    "        all_features = original_numerical + original_categorical\n",
    "        rf = RandomForestClassifier(n_estimators=200, class_weight='balanced', n_jobs=-1)\n",
    "    \n",
    "        # 确保只使用原始定义的特征\n",
    "        available_features = [f for f in all_features if f in final_phase1_features]\n",
    "        rf.fit(X_train[final_phase1_features][available_features], y_train)\n",
    "    \n",
    "        # 获取特征重要性\n",
    "        importances = pd.Series(rf.feature_importances_, index=available_features)\n",
    "        top_features = importances.sort_values(ascending=False).index[:30]\n",
    "    \n",
    "        # 补充特征\n",
    "        final_phase2_features = list(set(top_features) | set(CORE_CLINICAL_FEATURES))\n",
    "\n",
    "    print(f\"最终保留特征数: {len(final_phase2_features)}\")\n",
    "\n",
    "    # 更新特征列表 - 只使用原始定义的数值和分类特征\n",
    "    new_numerical = []\n",
    "    new_categorical = []\n",
    "\n",
    "    # 所有原始定义的特征\n",
    "    all_features = original_numerical + original_categorical\n",
    "\n",
    "    for feature in final_phase2_features:\n",
    "        # 只保留在原始定义的特征列表中的特征\n",
    "        if feature in all_features:\n",
    "            if feature in original_numerical:\n",
    "                new_numerical.append(feature)\n",
    "            elif feature in original_categorical:\n",
    "                new_categorical.append(feature)\n",
    "\n",
    "    # 核心特征二次验证机制 - 确保核心特征被包含\n",
    "    for core_feature in CORE_CLINICAL_FEATURES:\n",
    "        if core_feature not in new_numerical and core_feature not in new_categorical:\n",
    "            if core_feature in original_numerical:\n",
    "                new_numerical.append(core_feature)\n",
    "            elif core_feature in original_categorical:\n",
    "                new_categorical.append(core_feature)\n",
    "\n",
    "    # 最终特征列表\n",
    "    numerical = new_numerical\n",
    "    categorical = new_categorical\n",
    "\n",
    "    print(f\"\\n最终特征数: {len(numerical) + len(categorical)}\")\n",
    "    print(\"数值特征:\", numerical)\n",
    "    print(\"分类特征:\", categorical)\n",
    "    # ==================== 阶段3：模型训练 ====================\n",
    "    print(\"\\n\" + \"=\"*50)\n",
    "    print(\"阶段3: 模型训练\")\n",
    "    print(\"=\"*50)\n",
    "    \n",
    "    # 定义模型列表及预处理类型\n",
    "    models_info = [\n",
    "        ('Logistic Regression', LogisticRegression(max_iter=1000), 'linear'),\n",
    "        ('Ridge Regression', RidgeClassifier(), 'linear'),\n",
    "        ('SVM', SVC(probability=True, random_state=42), 'linear'),\n",
    "        ('KNN', KNeighborsClassifier(n_jobs=N_JOBS), 'knn'),\n",
    "        ('XGBoost', XGBClassifier(\n",
    "            use_label_encoder=False, \n",
    "            eval_metric='logloss',\n",
    "            n_jobs=N_JOBS if not USE_GPU else 1,\n",
    "            tree_method='gpu_hist' if USE_GPU else 'auto',\n",
    "            predictor='gpu_predictor' if USE_GPU else 'cpu_predictor'\n",
    "        ), \"tree\"),\n",
    "        ('LightGBM', LGBMClassifier(\n",
    "            random_state=42,\n",
    "            n_jobs=N_JOBS if not USE_GPU else 1,\n",
    "            device='gpu' if USE_GPU else 'cpu',\n",
    "            gpu_platform_id=0,\n",
    "            gpu_device_id=0\n",
    "        ), \"tree\"),  \n",
    "        ('CatBoost', CatBoostClassifier(\n",
    "            random_state=42,\n",
    "            thread_count=N_JOBS if not USE_GPU else 1,\n",
    "            task_type='GPU' if USE_GPU else 'CPU',\n",
    "            devices='0:1' if USE_GPU else None\n",
    "        ), \"tree\"),\n",
    "        ('Decision Tree', DecisionTreeClassifier(random_state=42), 'tree'),\n",
    "        ('Random Forest', RandomForestClassifier(random_state=42, n_jobs=N_JOBS), 'tree')\n",
    "    ]\n",
    "    \n",
    "    results = []\n",
    "    model_probas = {}\n",
    "    thresholds_info = {}  # 存储每个模型的最佳阈值信息\n",
    "\n",
    "    for name, model, mtype in models_info:\n",
    "        print(f\"\\n{'='*50}\")\n",
    "        print(f\"处理模型: {name}\")\n",
    "        print(f\"{'='*50}\")\n",
    "        \n",
    "        # ==================== 修改点：树模型使用所有原始特征 ====================\n",
    "        if mtype == 'tree':\n",
    "            # 树模型：使用所有原始特征，不进行特征筛选\n",
    "            print(f\"树模型 {name} 使用所有原始特征\")\n",
    "            X_train_tree = X_train.copy()\n",
    "            X_val_tree = X_val.copy()\n",
    "            X_test_tree = X_test.copy()\n",
    "            \n",
    "            # 树模型预处理\n",
    "            X_train_proc, X_val_proc, X_test_proc, fnames, cat_indices = preprocess_data_for_tree(\n",
    "                X_train_tree, X_val_tree, X_test_tree, original_numerical, original_categorical\n",
    "            )\n",
    "        else:\n",
    "            # 非树模型：使用筛选后的特征\n",
    "            print(f\"非树模型 {name} 使用筛选后的特征\")\n",
    "            # 筛选后的特征\n",
    "            X_train_sel = X_train[numerical + categorical]\n",
    "            X_val_sel = X_val[numerical + categorical]\n",
    "            X_test_sel = X_test[numerical + categorical]\n",
    "            \n",
    "            if mtype in ['linear', 'knn']:\n",
    "                # 线性模型/SVM/KNN：先独热编码，再进行特征选择\n",
    "                print(\"使用线性模型预处理流程：先独热编码，再进行特征选择\")\n",
    "                X_train_proc, X_val_proc, X_test_proc, fnames, cat_indices = preprocess_data_for_linear(\n",
    "                    X_train_sel, X_val_sel, X_test_sel, numerical, categorical\n",
    "                )\n",
    "            else:\n",
    "                # 其他模型使用树模型预处理方式\n",
    "                print(\"使用树模型预处理流程\")\n",
    "                X_train_proc, X_val_proc, X_test_proc, fnames, cat_indices = preprocess_data_for_tree(\n",
    "                    X_train_sel, X_val_sel, X_test_sel, numerical, categorical\n",
    "                )\n",
    "        \n",
    "        # 平衡数据（KNN除外）\n",
    "        if name != 'KNN':\n",
    "            X_bal, y_bal = balance_data(X_train_proc, y_train)\n",
    "        else:\n",
    "            X_bal, y_bal = X_train_proc, y_train\n",
    "            print(\"KNN跳过过采样处理\")\n",
    "\n",
    "        # 设置分类特征索引（仅对树模型有效）\n",
    "        if mtype == 'tree' and cat_indices and name == 'LightGBM':\n",
    "            model.set_params(categorical_feature=cat_indices)\n",
    "\n",
    "        if name in ['SVM', 'KNN', 'Ridge Regression']:\n",
    "            calibrated_model = enhanced_probability_calibration(model, name)\n",
    "        else:\n",
    "            calibrated_model = model\n",
    "\n",
    "        # 网格搜索\n",
    "        print(f\"开始网格搜索: {name}...\")\n",
    "        try:\n",
    "            best_model, best_params, cv_score = perform_grid_search(\n",
    "                calibrated_model, param_grids[name], X_bal, y_bal, name\n",
    "            )\n",
    "            print(f\"最佳参数: {best_params}\")\n",
    "            print(f\"交叉验证AUC: {cv_score:.4f}\")\n",
    "\n",
    "            # KNN性能后备方案\n",
    "            if name == 'KNN' and cv_score < 0.6:\n",
    "                print(\"KNN性能不足，启用备选参数...\")\n",
    "                knn_model = KNeighborsClassifier(\n",
    "                    n_neighbors=5, \n",
    "                    weights='distance', \n",
    "                    p=2, \n",
    "                    algorithm='kd_tree',\n",
    "                    n_jobs=-1\n",
    "                )\n",
    "                calibrated_knn = CalibratedClassifierCV(knn_model, method='isotonic', cv=5)\n",
    "                calibrated_knn.fit(X_bal, y_bal)\n",
    "                best_model = calibrated_knn\n",
    "                cv_score = roc_auc_score(y_bal, calibrated_knn.predict_proba(X_bal)[:, 1])\n",
    "                print(f\"备选参数AUC: {cv_score:.4f}\")\n",
    "            \n",
    "            # 模型评估（使用最佳阈值）\n",
    "            print(f\"评估模型: {name}...\")\n",
    "            # 可以选择不同的阈值计算方法：'youden', 'f1', 'closest'\n",
    "            threshold_method = 'f1' if name == 'KNN' else 'youden'\n",
    "            \n",
    "            val_metrics, test_metrics, _, test_proba, optimal_threshold = evaluate_model_with_optimal_threshold(\n",
    "                best_model, X_val_proc, y_val, X_test_proc, y_test, threshold_method=threshold_method\n",
    "            )\n",
    "            \n",
    "            # 保存阈值信息\n",
    "            thresholds_info[name] = {\n",
    "                'Threshold': optimal_threshold,\n",
    "                'Method': threshold_method\n",
    "            }\n",
    "            \n",
    "            # 保存结果\n",
    "            val_metrics['Model'] = f\"{name} (Validation)\"\n",
    "            test_metrics['Model'] = f\"{name} (Test)\"\n",
    "            results.extend([val_metrics, test_metrics])\n",
    "            model_probas[name] = test_proba\n",
    "            \n",
    "            # 打印简要结果\n",
    "            print(f\"\\n验证集结果 - {name}:\")\n",
    "            print(f\"阈值: {optimal_threshold:.4f}, AUC: {val_metrics['AUROC']:.4f}, F1: {val_metrics['F1']:.4f}, 准确率: {val_metrics['Accuracy']:.4f}\")\n",
    "            print(f\"测试集结果 - {name}:\")\n",
    "            print(f\"阈值: {optimal_threshold:.4f}, AUC: {test_metrics['AUROC']:.4f}, F1: {test_metrics['F1']:.4f}, 准确率: {test_metrics['Accuracy']:.4f}\")\n",
    "        except Exception as e:\n",
    "            print(f\"处理 {name} 时出错: {str(e)}\")\n",
    "            try:\n",
    "                print(\"尝试使用默认参数训练...\")\n",
    "                model.fit(X_bal, y_bal)\n",
    "                threshold_method = 'youden'\n",
    "                val_metrics, test_metrics, _, test_proba, optimal_threshold = evaluate_model_with_optimal_threshold(\n",
    "                    model, X_val_proc, y_val, X_test_proc, y_test, threshold_method=threshold_method\n",
    "                )\n",
    "                \n",
    "                thresholds_info[name] = {\n",
    "                    'Threshold': optimal_threshold,\n",
    "                    'Method': threshold_method\n",
    "                }\n",
    "                \n",
    "                val_metrics['Model'] = f\"{name} (Validation) [后备]\"\n",
    "                test_metrics['Model'] = f\"{name} (Test) [后备]\"\n",
    "                results.extend([val_metrics, test_metrics])\n",
    "                model_probas[name] = test_proba\n",
    "            except:\n",
    "                print(\"后备训练也失败，跳过此模型\")\n",
    "            continue\n",
    "    \n",
    "    # 保存结果\n",
    "    if results:\n",
    "        results_df = pd.DataFrame(results)\n",
    "        results_df.to_csv('model_results_with_thresholds.csv', index=False)\n",
    "        print(\"\\n结果已保存至 'model_results_with_thresholds.csv'\")\n",
    "        \n",
    "        # 保存阈值信息\n",
    "        thresholds_df = pd.DataFrame(thresholds_info).T\n",
    "        thresholds_df.to_csv('model_optimal_thresholds.csv')\n",
    "        print(\"最佳阈值信息已保存至 'model_optimal_thresholds.csv'\")\n",
    "        \n",
    "        # 绘制结果图表\n",
    "        print(\"生成可视化图表...\")\n",
    "        plot_results(results_df, model_probas, y_val, y_test)\n",
    "        print(\"图表已保存为 'roc_curves.png' 和 'performance_heatmap.png'\")\n",
    "    else:\n",
    "        print(\"\\n没有成功处理的模型\")\n",
    "    \n",
    "    print(\"\\n训练完成!\")\n",
    "    \n",
    "    # 恢复标准输出并关闭日志文件\n",
    "    sys.stdout = original_stdout\n",
    "    dual_logger.close()\n",
    "    \n",
    "    print(f\"训练日志已保存至: {log_filename}\")\n",
    "    \n",
    "    # 提取最佳参数\n",
    "    print(\"\\n开始提取最佳参数...\")\n",
    "    try:\n",
    "        with open(log_filename, 'r', encoding='utf-8') as f:\n",
    "            log_content = f.read()\n",
    "        \n",
    "        best_params = extract_best_params(log_content)\n",
    "        params_json_file = f\"model_best_parameters_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n",
    "        \n",
    "        with open(params_json_file, 'w') as f:\n",
    "            json.dump(best_params, f, indent=2, ensure_ascii=False)\n",
    "        \n",
    "        print(\"\\n\" + \"=\"*60)\n",
    "        print(f\"成功提取 {len(best_params)} 个模型的最佳参数\")\n",
    "        print(f\"参数文件已保存: {params_json_file}\")\n",
    "        print(\"=\"*60)\n",
    "        \n",
    "        print(\"\\n最佳参数预览:\")\n",
    "        print(\"-\"*80)\n",
    "        for model, params in best_params.items():\n",
    "            print(f\"模型: {model}\")\n",
    "            for param, value in params.items():\n",
    "                print(f\"  {param}: {value}\")\n",
    "            print(\"-\"*80)\n",
    "        \n",
    "        print(\"\\n运行完成! 请检查输出文件获取完整参数详情\")\n",
    "    except Exception as e:\n",
    "        print(f\"提取参数时出错: {str(e)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13aa15cc-b84b-46e9-b25d-a4a420f7bcb7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "生成专业可视化图表...\n",
      "已生成ROC曲线图: 'roc_curves.tiff'\n",
      "已生成校准曲线图: 'calibration_curves.tiff'\n",
      "已生成优化阈值的PR曲线图: 'pr_curves_optimized.tiff'\n"
     ]
    }
   ],
   "source": [
    "def plot_pr_curves(model_probas, y_test):\n",
    "    \"\"\"绘制专业PR曲线（按AUPRC值降序排列），标记每个模型的最优阈值点\"\"\"\n",
    "    from sklearn.metrics import precision_recall_curve, auc as auc_func\n",
    "    \n",
    "    # 计算每个模型的AUPRC并排序\n",
    "    models_auprc = {}\n",
    "    for name, probas in model_probas.items():\n",
    "        precision, recall, _ = precision_recall_curve(y_test, probas)\n",
    "        auprc = auc_func(recall, precision)\n",
    "        models_auprc[name] = auprc\n",
    "    \n",
    "    # 按AUPRC降序排序\n",
    "    sorted_models = sorted(models_auprc.items(), key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Lancet配色方案\n",
    "    lancet_palette = ['#00468B', '#ED0000', '#42B540', '#0099B4', '#925E9F', '#FDAF91', '#AD002A', '#1B1919', '#FFCC00']\n",
    "    marker_symbols = ['o', 's', 'D', '^', 'v', '<', '>', 'p', '*', 'X']  # 不同形状的标记\n",
    "    \n",
    "    # 设置Times New Roman字体\n",
    "    plt.rcParams['font.family'] = 'serif'\n",
    "    plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']\n",
    "    plt.rcParams['axes.edgecolor'] = '#444444'\n",
    "    plt.rcParams['axes.linewidth'] = 1.2\n",
    "    \n",
    "    # 创建图形\n",
    "    plt.figure(figsize=(12, 9))\n",
    "    \n",
    "    # 使用白色网格背景\n",
    "    plt.grid(True, color='#EEEEEE', linestyle='-', which='both', alpha=0.8)\n",
    "    \n",
    "    # 绘制基准线（正样本比例）\n",
    "    baseline = np.mean(y_test)\n",
    "    plt.axhline(y=baseline, color='k', linestyle='--', alpha=0.7, linewidth=1.5, label='Baseline')\n",
    "    \n",
    "    # 创建图例信息列表\n",
    "    legend_handles = []\n",
    "    legend_labels = []\n",
    "    \n",
    "    # 按AUPRC降序绘制每个模型的PR曲线\n",
    "    for idx, (model_name, auprc) in enumerate(sorted_models):\n",
    "        precision, recall, thresholds = precision_recall_curve(y_test, model_probas[model_name])\n",
    "        \n",
    "        # 计算每个点到左上角(0,1)的距离\n",
    "        distances = (1 - recall)**2 + (1 - precision)**2\n",
    "        \n",
    "        # 找到距离最小的点 - 最接近左上角的点\n",
    "        optimal_idx = np.argmin(distances)\n",
    "        optimal_recall = recall[optimal_idx]\n",
    "        optimal_precision = precision[optimal_idx]\n",
    "        optimal_threshold = thresholds[optimal_idx]\n",
    "        \n",
    "        # 绘制PR曲线\n",
    "        line, = plt.plot(recall, precision, \n",
    "                         label=f'{model_name} (AUPRC = {auprc:.3f})', \n",
    "                         color=lancet_palette[idx % len(lancet_palette)],\n",
    "                         linewidth=2.5)\n",
    "        \n",
    "        # 保存图例句柄\n",
    "        legend_handles.append(line)\n",
    "        legend_labels.append(f'{model_name} (AUPRC={auprc:.3f}, Threshold={optimal_threshold:.3f})')\n",
    "        \n",
    "        # 标记最优阈值点\n",
    "        plt.scatter(optimal_recall, optimal_precision, \n",
    "                   s=100,  # 点的大小\n",
    "                   color=lancet_palette[idx % len(lancet_palette)],\n",
    "                   marker=marker_symbols[idx % len(marker_symbols)],  # 不同模型使用不同标记形状\n",
    "                   edgecolors='black',\n",
    "                   zorder=5)  # 确保点在线上方\n",
    "    \n",
    "    # 添加参考线 - 最佳性能参考点 (0,1)\n",
    "    plt.scatter(0, 1, s=200, marker='*', color='gold', edgecolors='black', label='Ideal Point (0,1)')\n",
    "    legend_handles.append(plt.Line2D([0], [0], marker='*', color='w', markerfacecolor='gold', markersize=12, markeredgecolor='black'))\n",
    "    legend_labels.append('Ideal Point (0,1)')\n",
    "    \n",
    "    # Lancet风格的图标题和标签\n",
    "    plt.title('Precision-Recall Curves with Optimal Threshold Points', \n",
    "              fontsize=16, pad=15)\n",
    "    plt.xlabel('Recall (Sensitivity)', fontsize=14)\n",
    "    plt.ylabel('Precision (Positive Predictive Value)', fontsize=14)\n",
    "    \n",
    "    # Lancet风格的图例和网格\n",
    "    plt.legend(legend_handles, legend_labels, loc='lower left', fontsize=10, \n",
    "               frameon=True, facecolor='white', framealpha=0.95, bbox_to_anchor=(0.05, 0.05))\n",
    "    \n",
    "    # 坐标轴设置\n",
    "    plt.xlim([-0.005, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xticks(fontsize=12)\n",
    "    plt.yticks(fontsize=12)\n",
    "    \n",
    "    # 保存为高分辨率TIFF文件\n",
    "    plt.savefig('pr_curves_optimized.tiff', dpi=600, bbox_inches='tight', format='tiff')\n",
    "    print(\"已生成优化阈值的PR曲线图: 'pr_curves_optimized.tiff'\")\n",
    "    plt.close()\n",
    "\n",
    "def plot_auc_curves(model_probas, y_test):\n",
    "    \"\"\"绘制ROC曲线比较图（按AUROC值降序排列）\"\"\"\n",
    "    # 计算每个模型的AUROC并排序\n",
    "    models_auc = {}\n",
    "    for name, probas in model_probas.items():\n",
    "        auc = roc_auc_score(y_test, probas)\n",
    "        models_auc[name] = auc\n",
    "    \n",
    "    # 按AUROC降序排序\n",
    "    sorted_models = sorted(models_auc.items(), key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Lancet配色方案\n",
    "    lancet_palette = ['#00468B', '#ED0000', '#42B540', '#0099B4', '#925E9F', '#FDAF91', '#AD002A', '#1B1919', '#FFCC00']\n",
    "    \n",
    "    # 设置Times New Roman字体\n",
    "    plt.rcParams['font.family'] = 'serif'\n",
    "    plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']\n",
    "    plt.rcParams['axes.edgecolor'] = '#444444'\n",
    "    plt.rcParams['axes.linewidth'] = 1.2\n",
    "    \n",
    "    # 创建图形\n",
    "    plt.figure(figsize=(12, 9))\n",
    "    \n",
    "    # 使用白色网格背景\n",
    "    plt.grid(True, color='#EEEEEE', linestyle='-', which='both', alpha=0.8)\n",
    "    \n",
    "    # 绘制基准线（随机模型）\n",
    "    plt.plot([0, 1], [0, 1], 'k--', alpha=0.7, linewidth=1.5, label='Random')\n",
    "    \n",
    "    # 按AUROC降序绘制每个模型的ROC曲线\n",
    "    for idx, (model_name, auc) in enumerate(sorted_models):\n",
    "        fpr, tpr, _ = roc_curve(y_test, model_probas[model_name])\n",
    "        plt.plot(fpr, tpr, \n",
    "                 label=f'{model_name} (AUROC = {auc:.3f})', \n",
    "                 color=lancet_palette[idx % len(lancet_palette)],\n",
    "                 linewidth=2.5)\n",
    "    \n",
    "    # Lancet风格的图标题和标签\n",
    "    plt.title('ROC Curves Comparison', fontsize=16, pad=15)\n",
    "    plt.xlabel('False Positive Rate', fontsize=14)\n",
    "    plt.ylabel('True Positive Rate', fontsize=14)\n",
    "    \n",
    "    # Lancet风格的图例和网格\n",
    "    plt.legend(loc='lower right', fontsize=10, \n",
    "               frameon=True, facecolor='white', framealpha=0.95)\n",
    "    \n",
    "    # 坐标轴设置\n",
    "    plt.xlim([-0.005, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xticks(fontsize=12)\n",
    "    plt.yticks(fontsize=12)\n",
    "    \n",
    "    # 保存为高分辨率TIFF文件\n",
    "    plt.savefig('roc_curves.tiff', dpi=600, bbox_inches='tight', format='tiff')\n",
    "    print(\"已生成ROC曲线图: 'roc_curves.tiff'\")\n",
    "    plt.close()\n",
    "\n",
    "def plot_calibration_curves(model_probas, y_test):\n",
    "    \"\"\"绘制校准曲线\"\"\"\n",
    "    from sklearn.calibration import calibration_curve\n",
    "    \n",
    "    # 计算每个模型的AUROC并排序\n",
    "    models_auc = {name: roc_auc_score(y_test, probas) for name, probas in model_probas.items()}\n",
    "    sorted_models = sorted(models_auc.items(), key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Lancet配色方案\n",
    "    lancet_palette = ['#00468B', '#ED0000', '#42B540', '#0099B4', '#925E9F', '#FDAF91', '#AD002A', '#1B1919', '#FFCC00']\n",
    "    \n",
    "    # 设置Times New Roman字体\n",
    "    plt.rcParams['font.family'] = 'serif'\n",
    "    plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']\n",
    "    plt.rcParams['axes.edgecolor'] = '#444444'\n",
    "    plt.rcParams['axes.linewidth'] = 1.2\n",
    "    \n",
    "    # 创建图形\n",
    "    plt.figure(figsize=(12, 9))\n",
    "    \n",
    "    # 使用白色网格背景\n",
    "    plt.grid(True, color='#EEEEEE', linestyle='-', which='both', alpha=0.8)\n",
    "    \n",
    "    # 绘制基准线（完美校准）\n",
    "    plt.plot([0, 1], [0, 1], 'k--', alpha=0.7, linewidth=1.5, label='Perfectly Calibrated')\n",
    "    \n",
    "    # 按AUROC降序绘制每个模型的校准曲线\n",
    "    for idx, (model_name, auc) in enumerate(sorted_models):\n",
    "        prob_true, prob_pred = calibration_curve(y_test, model_probas[model_name], n_bins=10)\n",
    "        plt.plot(prob_pred, prob_true, 's-', \n",
    "                 label=f'{model_name} (AUROC = {auc:.3f})', \n",
    "                 color=lancet_palette[idx % len(lancet_palette)])\n",
    "    \n",
    "    # Lancet风格的图标题和标签\n",
    "    plt.title('Calibration Curves', fontsize=16, pad=15)\n",
    "    plt.xlabel('Mean Predicted Probability', fontsize=14)\n",
    "    plt.ylabel('Fraction of Positives', fontsize=14)\n",
    "    \n",
    "    # Lancet风格的图例和网格\n",
    "    plt.legend(loc='lower right', fontsize=10, \n",
    "               frameon=True, facecolor='white', framealpha=0.95)\n",
    "    \n",
    "    # 坐标轴设置\n",
    "    plt.xlim([-0.005, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xticks(fontsize=12)\n",
    "    plt.yticks(fontsize=12)\n",
    "    \n",
    "    # 保存为高分辨率TIFF文件\n",
    "    plt.savefig('calibration_curves.tiff', dpi=600, bbox_inches='tight', format='tiff')\n",
    "    print(\"已生成校准曲线图: 'calibration_curves.tiff'\")\n",
    "    plt.close()\n",
    "\n",
    "# 在原有代码中添加调用\n",
    "print(\"生成专业可视化图表...\")\n",
    "plot_auc_curves(model_probas, y_test)  # 绘制ROC曲线（按AUROC降序）\n",
    "plot_calibration_curves(model_probas, y_test)  # 绘制校准曲线（按AUROC降序）\n",
    "plot_pr_curves(model_probas, y_test)  # 绘制PR曲线（按AUPRC降序）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "29b35f09-e0a8-4c60-a611-452d1849b82e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "生成专业可视化图表...\n",
      "已生成决策曲线分析图: 'dca_curves.tiff'\n"
     ]
    }
   ],
   "source": [
    "def plot_dca_curves(model_probas, y_test):\n",
    "    \"\"\"绘制决策曲线分析（DCA）曲线（按AUROC值降序排列）\"\"\"\n",
    "    import numpy as np\n",
    "    \n",
    "    # 计算每个模型的AUROC并排序\n",
    "    models_auc = {}\n",
    "    for name, probas in model_probas.items():\n",
    "        auc = roc_auc_score(y_test, probas)\n",
    "        models_auc[name] = auc\n",
    "    \n",
    "    # 按AUROC降序排序\n",
    "    sorted_models = sorted(models_auc.items(), key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Lancet配色方案\n",
    "    lancet_palette = ['#00468B', '#ED0000', '#42B540', '#0099B4', '#925E9F', \n",
    "                      '#FDAF91', '#AD002A', '#1B1919', '#FFCC00']\n",
    "    \n",
    "    # 设置Times New Roman字体\n",
    "    plt.rcParams['font.family'] = 'serif'\n",
    "    plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']\n",
    "    plt.rcParams['axes.edgecolor'] = '#444444'\n",
    "    plt.rcParams['axes.linewidth'] = 1.2\n",
    "    \n",
    "    # 创建图形\n",
    "    plt.figure(figsize=(12, 9))\n",
    "    \n",
    "    # 使用白色网格背景\n",
    "    plt.grid(True, color='#EEEEEE', linestyle='-', which='both', alpha=0.8)\n",
    "    \n",
    "    # 创建阈值网格\n",
    "    thresholds = np.linspace(0.01, 0.99, 100)\n",
    "    \n",
    "    # 计算所有样本都是阳性和阴性时的净收益\n",
    "    prevalence = np.mean(y_test)\n",
    "    net_benefit_all = prevalence - (1 - prevalence) * thresholds / (1 - thresholds)\n",
    "    net_benefit_none = np.zeros_like(thresholds)\n",
    "    \n",
    "    # 绘制参考线\n",
    "    plt.plot(thresholds, net_benefit_all, 'k--', linewidth=1.5, alpha=0.7, label='Treat All')\n",
    "    plt.plot(thresholds, net_benefit_none, 'k:', linewidth=1.5, alpha=0.7, label='Treat None')\n",
    "    \n",
    "    # 按AUROC降序绘制每个模型的决策曲线\n",
    "    for idx, (model_name, auc) in enumerate(sorted_models):\n",
    "        net_benefits = []\n",
    "        probas = model_probas[model_name]\n",
    "        \n",
    "        for threshold in thresholds:\n",
    "            # 预测为阳性的样本\n",
    "            predict_positive = (probas >= threshold).astype(int)\n",
    "            \n",
    "            # 计算真阳性和假阳性\n",
    "            true_positives = np.sum((predict_positive == 1) & (y_test == 1))\n",
    "            false_positives = np.sum((predict_positive == 1) & (y_test == 0))\n",
    "            \n",
    "            # 计算净收益\n",
    "            n = len(y_test)\n",
    "            net_benefit = (true_positives / n) - (false_positives / n) * (threshold / (1 - threshold))\n",
    "            net_benefits.append(net_benefit)\n",
    "        \n",
    "        # 绘制决策曲线\n",
    "        plt.plot(thresholds, net_benefits, \n",
    "                 label=f'{model_name} (AUROC = {auc:.3f})', \n",
    "                 color=lancet_palette[idx % len(lancet_palette)],\n",
    "                 linewidth=2.5)\n",
    "    \n",
    "    # Lancet风格的图标题和标签\n",
    "    plt.title('Decision Curve Analysis', fontsize=16, pad=15)\n",
    "    plt.xlabel('Threshold Probability', fontsize=14)\n",
    "    plt.ylabel('Net Benefit', fontsize=14)\n",
    "    \n",
    "    # Lancet风格的图例和网格\n",
    "    plt.legend(loc='upper right', fontsize=10, \n",
    "               frameon=True, facecolor='white', framealpha=0.95,\n",
    "               bbox_to_anchor=(0.95, 0.95))\n",
    "    \n",
    "    # 坐标轴设置\n",
    "    plt.xlim([0.0, 0.6])\n",
    "    plt.ylim([-0.05,0.2 ])  # 设置y轴范围\n",
    "    \n",
    "    # 保存为高分辨率TIFF文件\n",
    "    plt.savefig('dca_curves.tiff', dpi=600, bbox_inches='tight', format='tiff')\n",
    "    print(\"已生成决策曲线分析图: 'dca_curves.tiff'\")\n",
    "    plt.close()\n",
    "\n",
    "# 在原有代码中添加调用\n",
    "print(\"生成专业可视化图表...\")\n",
    "plot_dca_curves(model_probas, y_test)  # 新增：绘制决策曲线分析（按AUROC降序）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4183773c-21f2-45b3-9e2e-ba614c38853d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8c7dd2c-807e-40a9-8dc9-15d711465dff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#你的 KNN 模型在该数据集上的预测全部是“0”\n",
    "#在这个数据上，KNN 学不到区分能力，所以 预测全部是负类（即0）\n",
    "#真实标签中存在正类（1），但是由于预测没有正类 → Precision/Recall/F1 = 0 或无法定义\n",
    "#这时候 sklearn 默认返回 0.0，有时还会警告：UndefinedMetricWarning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b7eeb9d1-aef2-4a0c-8341-0c5de1aba4f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#下面是选用10个参数的简易模型，效能还可以啦，放过自己吧。"
   ]
  },
  {
   "attachments": {
    "5d045daa-4300-4ddb-b046-e1881eb966ef.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "a6951a2c-63db-4ea9-9f19-bb73e901c4f3",
   "metadata": {},
   "source": [
    "![f1889e640e618623c08b574b192643f.png](attachment:5d045daa-4300-4ddb-b046-e1881eb966ef.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad9a87a1-6301-4e67-9891-4d1736475bf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "开始构建SHAP简化模型...\n",
      "\n",
      "[SHAP简化模型] 最佳特征数: 14, 验证集 AUC: 0.7595\n",
      "选定的特征: ['hypertension', 'gcs_min', 'temperature', 'sbp', 'spo2', 'urineoutput_24h', 'platelet', 'charlson_comorbidity_index', 'creatinine', 'admission_age', 'potassium', 'oasis', 'apsiii', 'hemoglobin']\n",
      "特征重要性已保存至: 'shap_simplified_model_feature_importance.csv'\n",
      "[简化模型] 测试集使用阈值: 0.2000\n",
      "最佳阈值和特征已保存至: 'shap_simplified_model_threshold.json'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\59713\\AppData\\Local\\Temp\\ipykernel_50612\\65840351.py:181: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  annot = heatmap_data.copy().astype(float).applymap(lambda x: f\"{x:.3f}\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "已生成所有SHAP可视化图表至目录: 'shap_visualizations'\n",
      "\n",
      "已生成简化模型对比图和SHAP可视化图表。\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ==================== SHAP简化模型构建 ====================\n",
    "def build_simplified_model_with_shap(X_train, y_train, X_val, y_val, X_test, y_test, max_features=15):\n",
    "    \"\"\"\n",
    "    使用SHAP方法构建简化模型（选择8-15个最重要的特征）\n",
    "    \"\"\"\n",
    "    # 使用完整CatBoost模型计算SHAP值\n",
    "    catboost_params = {k: v[0] if isinstance(v, list) else v for k, v in param_grids['CatBoost'].items()}\n",
    "    full_model = CatBoostClassifier(random_state=42, verbose=0, **catboost_params)\n",
    "    full_model.fit(X_train, y_train)\n",
    "    \n",
    "    # 计算SHAP值\n",
    "    explainer = shap.TreeExplainer(full_model)\n",
    "    shap_values = explainer.shap_values(X_train)\n",
    "    \n",
    "    # 计算特征重要性（平均绝对SHAP值）\n",
    "    if isinstance(shap_values, list):\n",
    "        # 对于二分类问题，SHAP值可能是一个列表，取第一个元素\n",
    "        shap_values = shap_values[0]\n",
    "    \n",
    "    mean_abs_shap = np.abs(shap_values).mean(axis=0)\n",
    "    feature_importance = pd.Series(mean_abs_shap, index=X_train.columns)\n",
    "    sorted_features = feature_importance.sort_values(ascending=False).index.tolist()\n",
    "    \n",
    "    # 尝试不同数量的特征（8-15个）\n",
    "    best_auc = 0\n",
    "    best_k = None\n",
    "    best_model = None\n",
    "    best_features = None\n",
    "    auc_scores = {}\n",
    "    \n",
    "    for k in range(8, min(max_features, len(sorted_features)) + 1):\n",
    "        selected_features = sorted_features[:k]\n",
    "        \n",
    "        # 使用选定的特征训练新模型\n",
    "        model = CatBoostClassifier(random_state=42, verbose=0, **catboost_params)\n",
    "        model.fit(X_train[selected_features], y_train)\n",
    "        \n",
    "        # 在验证集上评估\n",
    "        y_val_proba = model.predict_proba(X_val[selected_features])[:, 1]\n",
    "        auc = roc_auc_score(y_val, y_val_proba)\n",
    "        auc_scores[k] = auc\n",
    "        \n",
    "        # 更新最佳模型\n",
    "        if auc > best_auc:\n",
    "            best_auc = auc\n",
    "            best_k = k\n",
    "            best_model = model\n",
    "            best_features = selected_features\n",
    "    \n",
    "    print(f\"\\n[SHAP简化模型] 最佳特征数: {best_k}, 验证集 AUC: {best_auc:.4f}\")\n",
    "    print(f\"选定的特征: {best_features}\")\n",
    "    \n",
    "    # 保存特征重要性\n",
    "    importance_df = pd.DataFrame({\n",
    "        'Feature': best_features,\n",
    "        'SHAP_Importance': feature_importance[best_features].values\n",
    "    }).sort_values(by='SHAP_Importance', ascending=False)\n",
    "    \n",
    "    importance_df.to_csv(\"shap_simplified_model_feature_importance.csv\", index=False)\n",
    "    print(\"特征重要性已保存至: 'shap_simplified_model_feature_importance.csv'\")\n",
    "    \n",
    "    return best_model, best_features, auc_scores\n",
    "\n",
    "def generate_shap_visualizations(model, X_train, X_test, feature_names, output_dir=\"shap_visualizations\"):\n",
    "    \"\"\"生成SHAP可视化图表\"\"\"\n",
    "    # 创建输出目录\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "    \n",
    "    # 初始化SHAP解释器\n",
    "    explainer = shap.TreeExplainer(model)\n",
    "    \n",
    "    # 1. SHAP摘要图\n",
    "    plt.figure()\n",
    "    shap_values = explainer.shap_values(X_train)\n",
    "    shap.summary_plot(shap_values, X_train, feature_names=feature_names, show=False)\n",
    "    plt.title(\"SHAP Summary Plot\", fontsize=12)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(os.path.join(output_dir, \"shap_summary_plot.png\"), dpi=300, bbox_inches='tight')\n",
    "    plt.close()\n",
    "    \n",
    "    # 2. SHAP条形图（特征重要性）\n",
    "    plt.figure()\n",
    "    shap.summary_plot(shap_values, X_train, feature_names=feature_names, plot_type=\"bar\", show=False)\n",
    "    plt.title(\"SHAP Feature Importance\", fontsize=12)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(os.path.join(output_dir, \"shap_bar_plot.png\"), dpi=300, bbox_inches='tight')\n",
    "    plt.close()\n",
    "    \n",
    "    # 3. SHAP依赖图（前3个特征）\n",
    "    for i, feature in enumerate(feature_names[:3]):\n",
    "        plt.figure()\n",
    "        shap.dependence_plot(feature, shap_values, X_train, feature_names=feature_names, show=False)\n",
    "        plt.title(f\"SHAP Dependence Plot: {feature}\", fontsize=12)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(output_dir, f\"shap_dependence_{feature}.png\"), dpi=300, bbox_inches='tight')\n",
    "        plt.close()\n",
    "    \n",
    "    # 4. SHAP力力图（前5个样本）\n",
    "    for i in range(min(5, X_test.shape[0])):\n",
    "        plt.figure()\n",
    "        shap.force_plot(\n",
    "            explainer.expected_value,\n",
    "            explainer.shap_values(X_test.iloc[i:i+1])[0],\n",
    "            X_test.iloc[i:i+1],\n",
    "            feature_names=feature_names,\n",
    "            matplotlib=True,\n",
    "            show=False\n",
    "        )\n",
    "        plt.title(f\"SHAP Force Plot - Sample {i+1}\", fontsize=12)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(output_dir, f\"shap_force_plot_sample_{i+1}.png\"), dpi=300, bbox_inches='tight')\n",
    "        plt.close()\n",
    "    \n",
    "    # 5. SHAP决策图（前5个样本）\n",
    "    for i in range(min(5, X_test.shape[0])):\n",
    "        plt.figure()\n",
    "        shap.decision_plot(\n",
    "            explainer.expected_value,\n",
    "            explainer.shap_values(X_test.iloc[i:i+1])[0],\n",
    "            X_test.iloc[i:i+1],\n",
    "            feature_names=feature_names,\n",
    "            show=False\n",
    "        )\n",
    "        plt.title(f\"SHAP Decision Plot - Sample {i+1}\", fontsize=12)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(output_dir, f\"shap_decision_plot_sample_{i+1}.png\"), dpi=300, bbox_inches='tight')\n",
    "        plt.close()\n",
    "    \n",
    "    print(f\"已生成所有SHAP可视化图表至目录: '{output_dir}'\")\n",
    "\n",
    "def compare_models_and_plot(full_model_probas, simplified_proba, y_test, full_results, simplified_result, simplified_model, X_test_simplified, feature_names):\n",
    "    \"\"\"\n",
    "    比较完整模型和简化模型，并生成可视化图表\n",
    "    \"\"\"\n",
    "    # 仅绘制完整 CatBoost 与 简化 CatBoost 对比 ROC 曲线\n",
    "    plt.figure(figsize=(10, 8))\n",
    "\n",
    "    # 完整CatBoost模型\n",
    "    if 'CatBoost' in full_model_probas:\n",
    "        probas = full_model_probas['CatBoost']\n",
    "        fpr, tpr, _ = roc_curve(y_test, probas)\n",
    "        auc = roc_auc_score(y_test, probas)\n",
    "        plt.plot(fpr, tpr, label=f'CatBoost Full (AUC = {auc:.3f})', linewidth=2, color='blue')\n",
    "\n",
    "    # 简化模型\n",
    "    fpr, tpr, _ = roc_curve(y_test, simplified_proba)\n",
    "    auc = roc_auc_score(y_test, simplified_proba)\n",
    "    plt.plot(fpr, tpr, label=f'CatBoost Simplified (AUC = {auc:.3f})', linewidth=3, linestyle='--', color='black')\n",
    "    \n",
    "    # 随机基准线\n",
    "    plt.plot([0, 1], [0, 1], 'k--', label='Random')\n",
    "    \n",
    "    # 标签和标题\n",
    "    plt.xlabel('False Positive Rate', fontsize=12)\n",
    "    plt.ylabel('True Positive Rate', fontsize=12)\n",
    "    plt.title('Full vs Simplified ROC Curves', fontsize=14)\n",
    "    plt.legend(loc='lower right', fontsize=10)\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.savefig('roc_compare_simplified.png', dpi=300, bbox_inches='tight')\n",
    "    plt.close()\n",
    "\n",
    "    # 效能热图比较\n",
    "    # 准备数据\n",
    "    combined_results = full_results.copy()\n",
    "    combined_results.append(simplified_result)\n",
    "    \n",
    "    # 创建DataFrame\n",
    "    combined_df = pd.DataFrame(combined_results)\n",
    "    combined_df = combined_df[combined_df['Model'].str.contains('Test')]\n",
    "    combined_df['Model'] = combined_df['Model'].str.replace(' $Test$', '', regex=False)\n",
    "    combined_df = combined_df.set_index('Model')\n",
    "    combined_df = combined_df.sort_values(by='AUROC', ascending=False)\n",
    "\n",
    "    # 选择要显示的指标\n",
    "    metrics_to_plot = ['AUROC', 'Accuracy', 'Precision', 'Recall', 'F1', 'Specificity']\n",
    "    heatmap_data = combined_df[metrics_to_plot].T\n",
    "    \n",
    "    # 创建注释文本\n",
    "    annot = heatmap_data.copy().astype(float).applymap(lambda x: f\"{x:.3f}\")\n",
    "\n",
    "    # 绘制热图\n",
    "    plt.figure(figsize=(14, 8))\n",
    "    sns.heatmap(heatmap_data, annot=annot, cmap='coolwarm', fmt='', linewidths=0.5)\n",
    "    plt.title('Performance Comparison: Full vs Simplified', fontsize=14)\n",
    "    plt.savefig('performance_compare_simplified.png', dpi=300, bbox_inches='tight')\n",
    "    plt.close()\n",
    "    \n",
    "    # 生成SHAP可视化\n",
    "    generate_shap_visualizations(simplified_model, X_train[feature_names], X_test_simplified, feature_names)\n",
    "\n",
    "# --- 主程序逻辑调用补充 ---\n",
    "if __name__ == \"__main__\" and results:\n",
    "    print(\"\\n开始构建SHAP简化模型...\")\n",
    "    \n",
    "    # 使用SHAP方法构建简化模型\n",
    "    simplified_model, selected_features, auc_scores = build_simplified_model_with_shap(\n",
    "        X_train, y_train, X_val, y_val, X_test, y_test, max_features=15\n",
    "    )\n",
    "    \n",
    "    # 使用选定的特征\n",
    "    X_test_simplified = X_test[selected_features]\n",
    "    \n",
    "    # 获取测试集概率预测\n",
    "    y_test_proba = simplified_model.predict_proba(X_test_simplified)[:, 1]\n",
    "    \n",
    "    # 使用验证集计算最佳阈值\n",
    "    y_val_proba = simplified_model.predict_proba(X_val[selected_features])[:, 1]\n",
    "    optimal_threshold = find_optimal_threshold(y_val, y_val_proba, method='f1')\n",
    "    print(f\"[简化模型] 测试集使用阈值: {optimal_threshold:.4f}\")\n",
    "    \n",
    "    # 保存简化模型阈值\n",
    "    import json\n",
    "    threshold_info = {\n",
    "        \"model\": \"CatBoost Simplified\",\n",
    "        \"optimal_threshold\": float(optimal_threshold),\n",
    "        \"selected_features\": selected_features\n",
    "    }\n",
    "    with open(\"shap_simplified_model_threshold.json\", \"w\", encoding=\"utf-8\") as f:\n",
    "        json.dump(threshold_info, f, ensure_ascii=False, indent=4)\n",
    "    print(\"最佳阈值和特征已保存至: 'shap_simplified_model_threshold.json'\")\n",
    "    \n",
    "    # 使用最佳阈值进行预测\n",
    "    y_test_pred = (y_test_proba >= optimal_threshold).astype(int)\n",
    "\n",
    "    # 计算指标\n",
    "    simplified_result = calculate_metrics(y_test, y_test_pred, y_test_proba, optimal_threshold)\n",
    "    simplified_result['Model'] = 'CatBoost Simplified (Test)'\n",
    "    \n",
    "    # 比较模型并生成可视化\n",
    "    compare_models_and_plot(\n",
    "        model_probas, \n",
    "        y_test_proba, \n",
    "        y_test, \n",
    "        results, \n",
    "        simplified_result, \n",
    "        simplified_model, \n",
    "        X_test_simplified, \n",
    "        selected_features\n",
    "    )\n",
    "    print(\"\\n已生成简化模型对比图和SHAP可视化图表。\")\n"
   ]
  },
  {
   "attachments": {
    "52312f45-ecb9-4a63-aee1-bf7e38793ca4.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "99ccddd8-7a53-4177-80bf-95050f5ad9ee",
   "metadata": {},
   "source": [
    "![050e1c34b842c62a022b98a0996cacc.png](attachment:52312f45-ecb9-4a63-aee1-bf7e38793ca4.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "040d2806-a9f7-4003-8a6f-071d7f50897f",
   "metadata": {},
   "outputs": [],
   "source": [
    "simplified_model.save_model(\"shap_simplified_model.cbm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "148b0586-7fff-4aa3-9f6b-63f484268d9e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce6cc3a2-ae2f-4123-9af0-b5f90cb96a7c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "36993917-8847-4f6b-8d81-905d721e41d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#外部验证"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fd8ef378-4a8e-4b9b-85b3-dcd602e6752f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "外部验证数据集大小: (10178, 16)\n",
      "数据列: ['patientunitstayid', 'admission_age', 'gcs_min', 'spo2', 'hypertension', 'temperature', 'hemoglobin', 'creatinine', 'potassium', 'platelet', 'urineoutput_24h', 'sbp', 'charlson_comorbidity_index', 'oasis', 'apsiii', 'delirium_flag']\n",
      "已成功加载模型: C:\\Users\\59713\\Desktop\\data\\delirium\\shap_simplified_model.cbm\n",
      "阈值文件内容: {'model': 'CatBoost Simplified', 'optimal_threshold': 0.1999650958824375, 'selected_features': ['hypertension', 'gcs_min', 'temperature', 'sbp', 'spo2', 'urineoutput_24h', 'platelet', 'charlson_comorbidity_index', 'creatinine', 'admission_age', 'potassium', 'oasis', 'apsiii', 'hemoglobin']}\n",
      "使用阈值: 0.2000\n",
      "ROC曲线已保存: C:\\Users\\59713\\Desktop\\data\\delirium\\external_validation_results\\external_validation_roc_curve.png\n",
      "外部验证 AUROC: 0.627\n",
      "预测结果已保存: C:\\Users\\59713\\Desktop\\data\\delirium\\external_validation_results\\external_validation_results.csv\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from catboost import CatBoostClassifier\n",
    "\n",
    "# =========================\n",
    "# 文件路径配置\n",
    "# =========================\n",
    "MODEL_PATH = r\"C:\\Users\\59713\\Desktop\\data\\delirium\\shap_simplified_model.cbm\"   # CatBoost模型路径\n",
    "THRESHOLD_PATH = r\"C:\\Users\\59713\\Desktop\\data\\delirium\\shap_simplified_model_threshold.json\"\n",
    "EXTERNAL_VAL_PATH = r\"C:\\Users\\59713\\Desktop\\data\\delirium\\original data\\外部验证\\1.csv\"\n",
    "OUTPUT_DIR = r\"C:\\Users\\59713\\Desktop\\data\\delirium\\external_validation_results\"\n",
    "os.makedirs(OUTPUT_DIR, exist_ok=True)\n",
    "\n",
    "# =========================\n",
    "# 特征列定义\n",
    "# =========================\n",
    "FEATURES = [\n",
    "    'admission_age', 'gcs_min', 'spo2', 'hypertension', 'temperature',\n",
    "    'hemoglobin', 'creatinine', 'potassium', 'platelet',\n",
    "    'urineoutput_24h', 'sbp', 'charlson_comorbidity_index',\n",
    "    'oasis', 'apsiii'\n",
    "]\n",
    "TARGET_COLUMN = 'delirium_flag'\n",
    "ID_COLUMN = 'patientunitstayid'\n",
    "\n",
    "# =========================\n",
    "# 加载外部验证数据\n",
    "# =========================\n",
    "data = pd.read_csv(EXTERNAL_VAL_PATH)\n",
    "print(f\"外部验证数据集大小: {data.shape}\")\n",
    "print(\"数据列:\", data.columns.tolist())\n",
    "\n",
    "# 提取 ID, X, y\n",
    "patient_ids = data[ID_COLUMN].values\n",
    "X = data[FEATURES].values\n",
    "y = data[TARGET_COLUMN].values\n",
    "\n",
    "# =========================\n",
    "# 加载模型\n",
    "# =========================\n",
    "if not os.path.exists(MODEL_PATH):\n",
    "    raise FileNotFoundError(f\"模型文件不存在: {MODEL_PATH}\")\n",
    "\n",
    "model = CatBoostClassifier()\n",
    "model.load_model(MODEL_PATH)\n",
    "print(f\"已成功加载模型: {MODEL_PATH}\")\n",
    "\n",
    "# =========================\n",
    "# 加载阈值\n",
    "# =========================\n",
    "threshold = 0.5\n",
    "if os.path.exists(THRESHOLD_PATH):\n",
    "    with open(THRESHOLD_PATH, \"r\") as f:\n",
    "        threshold_info = json.load(f)\n",
    "    print(\"阈值文件内容:\", threshold_info)\n",
    "\n",
    "    if \"optimal_threshold\" in threshold_info:\n",
    "        threshold = float(threshold_info[\"optimal_threshold\"])\n",
    "print(f\"使用阈值: {threshold:.4f}\")\n",
    "\n",
    "# =========================\n",
    "# 预测\n",
    "# =========================\n",
    "probas = model.predict_proba(X)[:, 1]\n",
    "predictions = (probas >= threshold).astype(int)\n",
    "\n",
    "# =========================\n",
    "# 评估: 绘制 ROC 曲线\n",
    "# =========================\n",
    "fpr, tpr, _ = roc_curve(y, probas)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.plot(fpr, tpr, color=\"darkorange\", lw=2,\n",
    "         label=f\"AUROC = {roc_auc:.3f}\")\n",
    "plt.plot([0, 1], [0, 1], color=\"navy\", lw=2, linestyle=\"--\")\n",
    "plt.xlabel(\"False Positive Rate (1 - Specificity)\")\n",
    "plt.ylabel(\"True Positive Rate (Sensitivity)\")\n",
    "plt.title(\"External Validation ROC Curve\")\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.grid(True)\n",
    "\n",
    "roc_path = os.path.join(OUTPUT_DIR, \"external_validation_roc_curve.png\")\n",
    "plt.savefig(roc_path, dpi=300, bbox_inches=\"tight\")\n",
    "plt.close()\n",
    "\n",
    "print(f\"ROC曲线已保存: {roc_path}\")\n",
    "print(f\"外部验证 AUROC: {roc_auc:.3f}\")\n",
    "\n",
    "# =========================\n",
    "# 保存预测结果\n",
    "# =========================\n",
    "results = pd.DataFrame({\n",
    "    ID_COLUMN: patient_ids,\n",
    "    \"true_label\": y,\n",
    "    \"pred_proba\": probas,\n",
    "    \"pred_label\": predictions\n",
    "})\n",
    "results_path = os.path.join(OUTPUT_DIR, \"external_validation_results.csv\")\n",
    "results.to_csv(results_path, index=False, encoding=\"utf-8-sig\")\n",
    "print(f\"预测结果已保存: {results_path}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3cb1c73-2fea-4724-b10e-621c0b13aa31",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60e1ca16-4754-4142-a3cb-bfd7b56d24d6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a1da5f7-0701-4bd2-927b-1888ddcc0a8e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d961129-42d3-4c3c-bba5-3663c0452da5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "187cc763-9bb3-4f45-903a-6bd3791c578d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5e151ea-6ee5-405a-8225-78a5e2119b69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "输出目录已创建: C:\\Users\\59713\\Desktop\\shap_scatter_results\n",
      "\n",
      "开始生成SHAP散点图...\n",
      "已生成 hypertension 的SHAP散点图\n",
      "已生成 gcs_min 的SHAP散点图\n",
      "已生成 temperature 的SHAP散点图\n",
      "已生成 sbp 的SHAP散点图\n",
      "已生成 spo2 的SHAP散点图\n",
      "已生成 urineoutput_24h 的SHAP散点图\n",
      "已生成 platelet 的SHAP散点图\n",
      "已生成 charlson_comorbidity_index 的SHAP散点图\n",
      "已生成 creatinine 的SHAP散点图\n",
      "已生成 admission_age 的SHAP散点图\n",
      "已生成 potassium 的SHAP散点图\n",
      "已生成 oasis 的SHAP散点图\n",
      "已生成 apsiii 的SHAP散点图\n",
      "已生成 hemoglobin 的SHAP散点图\n",
      "\n",
      "所有散点图已保存至: 'C:\\Users\\59713\\Desktop\\shap_scatter_results'\n"
     ]
    }
   ],
   "source": [
    "# ==================== SHAP特征值散点图生成 ====================\n",
    "def generate_shap_scatter_plots(model, X_data, feature_names, output_dir):\n",
    "    \"\"\"\n",
    "    为每个特征生成SHAP值散点图\n",
    "    横坐标: 特征值\n",
    "    纵坐标: SHAP值\n",
    "    使用明亮、现代的蓝色配色方案\n",
    "    保存为600 ppi的高分辨率图片\n",
    "    \"\"\"\n",
    "    import shap\n",
    "    import matplotlib.pyplot as plt\n",
    "    import os\n",
    "    import numpy as np\n",
    "    \n",
    "    # 初始化SHAP解释器\n",
    "    explainer = shap.TreeExplainer(model)\n",
    "    shap_values = explainer.shap_values(X_data)\n",
    "    \n",
    "    # 确保shap_values是二维数组\n",
    "    if isinstance(shap_values, list):\n",
    "        shap_values = shap_values[0]\n",
    "    \n",
    "    # 明亮、现代的蓝色配色方案\n",
    "    modern_blue = \"#1F77B4\"  # matplotlib默认蓝色，科学图表常用\n",
    "    accent_blue = \"#4C72B0\"   # Seaborn调色板中的蓝色\n",
    "    vibrant_blue = \"#2A9DF4\"  # 更明亮的蓝色\n",
    "    \n",
    "    # 为每个特征生成散点图\n",
    "    for i, feature in enumerate(feature_names):\n",
    "        plt.figure(figsize=(10, 8))\n",
    "        \n",
    "        # 获取特征值和对应的SHAP值\n",
    "        feature_values = X_data[feature].values\n",
    "        feature_shap_values = shap_values[:, i] if len(shap_values.shape) > 1 else shap_values\n",
    "        \n",
    "        # 绘制散点图 - 使用明亮蓝色\n",
    "        plt.scatter(feature_values, feature_shap_values, alpha=0.6, s=20, color=vibrant_blue)\n",
    "        \n",
    "        # 添加水平参考线\n",
    "        plt.axhline(y=0, color='black', linestyle='--', linewidth=1)\n",
    "        \n",
    "        # 设置标题和标签\n",
    "        plt.title(f\"SHAP Value for {feature}\", fontsize=16, fontweight='bold')\n",
    "        plt.xlabel(f\"{feature} Value\", fontsize=14)\n",
    "        plt.ylabel(\"SHAP Value\", fontsize=14)\n",
    "        \n",
    "        # 添加网格\n",
    "        plt.grid(True, alpha=0.3)\n",
    "        \n",
    "        # 保存图像 - 600 ppi\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(output_dir, f\"shap_scatter_{feature}.png\"), \n",
    "                   dpi=600, bbox_inches='tight')\n",
    "        plt.close()\n",
    "        print(f\"已生成 {feature} 的SHAP散点图\")\n",
    "\n",
    "# --- 独立执行逻辑 ---\n",
    "if __name__ == \"__main__\":\n",
    "    import os\n",
    "    # 创建输出目录\n",
    "    desktop_path = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\n",
    "    output_dir = os.path.join(desktop_path, \"shap_scatter_results\")\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "    print(f\"输出目录已创建: {output_dir}\")\n",
    "    \n",
    "    # 1. 生成所有特征的SHAP散点图\n",
    "    print(\"\\n开始生成SHAP散点图...\")\n",
    "    \n",
    "    # 使用训练数据生成SHAP散点图\n",
    "    generate_shap_scatter_plots(\n",
    "        simplified_model,\n",
    "        X_train[selected_features],\n",
    "        selected_features,\n",
    "        output_dir\n",
    "    )\n",
    "    \n",
    "    print(f\"\\n所有散点图已保存至: '{output_dir}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4805f1af-7916-43bd-b718-79279f0f88f0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c61773c9-416a-4f58-a6c5-74f42534a345",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "输出目录已创建: C:\\Users\\59713\\Desktop\\shap_force_plots\n",
      "\n",
      "开始生成指定患者的SHAP力图...\n",
      "已生成患者 150959 的SHAP力图\n",
      "已生成患者 161254 的SHAP力图\n",
      "已生成患者 177021 的SHAP力图\n",
      "已生成患者 178830 的SHAP力图\n",
      "已生成患者 207926 的SHAP力图\n",
      "已生成患者 208198 的SHAP力图\n",
      "已生成患者 209991 的SHAP力图\n",
      "已生成患者 210208 的SHAP力图\n",
      "已生成患者 211231 的SHAP力图\n",
      "已生成患者 212020 的SHAP力图\n",
      "\n",
      "所有力图已保存至: 'C:\\Users\\59713\\Desktop\\shap_force_plots'\n"
     ]
    }
   ],
   "source": [
    "# ==================== 患者SHAP力图生成 ====================\n",
    "def generate_patient_force_plot(model, X_data, patient_id, patient_ids, feature_names, output_dir):\n",
    "    \"\"\"\n",
    "    为指定患者生成SHAP力图\n",
    "    \"\"\"\n",
    "    import shap\n",
    "    import matplotlib.pyplot as plt\n",
    "    import os\n",
    "    import numpy as np\n",
    "    \n",
    "    # 检查患者ID是否存在\n",
    "    if patient_id not in patient_ids:\n",
    "        print(f\"警告: 未找到患者ID {patient_id}\")\n",
    "        return\n",
    "    \n",
    "    # 获取患者索引\n",
    "    idx = np.where(patient_ids == patient_id)[0][0]\n",
    "    \n",
    "    # 初始化SHAP解释器\n",
    "    explainer = shap.TreeExplainer(model)\n",
    "    \n",
    "    # 获取SHAP值（处理多分类情况）\n",
    "    shap_values = explainer.shap_values(X_data.iloc[idx:idx+1])\n",
    "    \n",
    "    # 如果是多分类问题，选择第一个类别（通常）\n",
    "    if isinstance(shap_values, list):\n",
    "        shap_val = shap_values[0]  # 选择第一个类别的SHAP值\n",
    "    else:\n",
    "        shap_val = shap_values\n",
    "    \n",
    "    # 获取基础值（处理多分类情况）\n",
    "    if isinstance(explainer.expected_value, list):\n",
    "        base_val = explainer.expected_value[0]  # 选择第一个类别的基础值\n",
    "    else:\n",
    "        base_val = explainer.expected_value\n",
    "    \n",
    "    # 生成力图\n",
    "    plt.figure(figsize=(14, 6))\n",
    "    shap.force_plot(\n",
    "        base_val,\n",
    "        shap_val[0],  # 取第一个样本的SHAP值\n",
    "        X_data.iloc[idx:idx+1],\n",
    "        feature_names=feature_names,\n",
    "        matplotlib=True,\n",
    "        show=False,\n",
    "        text_rotation=0,  # 防止文本旋转导致重叠\n",
    "        contribution_threshold=0.05  # 只显示贡献较大的特征\n",
    "    )\n",
    "    \n",
    "    # 移除标题\n",
    "    plt.title(\"\")  # 设置空标题\n",
    "    \n",
    "    # 调整字体大小以避免重叠\n",
    "    ax = plt.gca()\n",
    "    for text in ax.texts:\n",
    "        text.set_fontsize(8)  # 减小字体大小\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.savefig(os.path.join(output_dir, f\"shap_force_plot_patient_{patient_id}.png\"), \n",
    "               dpi=600, bbox_inches='tight')\n",
    "    plt.close()\n",
    "    print(f\"已生成患者 {patient_id} 的SHAP力图\")\n",
    "\n",
    "# --- 独立执行逻辑 ---\n",
    "if __name__ == \"__main__\":\n",
    "    import os\n",
    "    # 创建输出目录\n",
    "    desktop_path = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\n",
    "    output_dir = os.path.join(desktop_path, \"shap_force_plots\")\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "    print(f\"输出目录已创建: {output_dir}\")\n",
    "    \n",
    "    # 2. 为指定患者生成SHAP力图\n",
    "    print(\"\\n开始生成指定患者的SHAP力图...\")\n",
    "    \n",
    "    # 确保患者ID列表存在\n",
    "    if 'patient_ids' not in locals() and 'patient_ids' not in globals():\n",
    "        raise ValueError(\"未找到患者ID列表，请提供 patient_ids 变量\")\n",
    "    \n",
    "    # 用户指定要生成力图的患者ID列表\n",
    "    # 在这里输入您想要分析的患者ID，用逗号分隔\n",
    "    selected_patient_ids = [150959, 161254, 177021, 178830, 207926, 208198, 209991, 210208, 211231, 212020]  # 替换为您想分析的患者ID列表\n",
    "    \n",
    "    # 为每个选定的患者生成力图\n",
    "    for patient_id in selected_patient_ids:\n",
    "        generate_patient_force_plot(\n",
    "            simplified_model,\n",
    "            X_test_simplified,\n",
    "            patient_id,       # 单个患者ID值\n",
    "            patient_ids,      # 所有患者ID列表\n",
    "            selected_features,\n",
    "            output_dir\n",
    "        )\n",
    "    \n",
    "    print(f\"\\n所有力图已保存至: '{output_dir}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fb1c81e-eec8-46c5-8652-742e226f838d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1ebcac8-40c8-4504-aefb-e4fba4fb0f22",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "67a485d3-e620-47b6-bde4-75af7928d58c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#下面用于生成app.py\n",
    "#复制粘贴即可，放到.py文件里，生成streamlit应用的方法可以登录github自己看，github设置好了以后用streamlit很方便（不会就问AGI）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "61a655f6-bb69-4b20-bbc3-ff36f3aaba29",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-15 23:26:35.673 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:35.675 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.160 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\59713\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-09-15 23:26:39.161 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.162 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.163 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.163 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.164 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.164 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.164 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.165 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.166 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.166 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.167 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.167 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.168 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.168 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.168 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.169 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.169 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.170 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.170 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.171 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.171 Session state does not function when running a script without `streamlit run`\n",
      "2025-09-15 23:26:39.172 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.173 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.173 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.174 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.175 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.176 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.176 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.177 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.177 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.178 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.178 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.179 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.179 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.179 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.180 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.180 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.180 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.181 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.181 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.181 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.182 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.182 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.182 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.183 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.183 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.183 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.184 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.185 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.186 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.186 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.187 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.187 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.188 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.188 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.189 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.189 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.189 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.190 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.190 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.190 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.191 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.191 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.191 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.191 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.192 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.192 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.192 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.193 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.193 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.194 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.194 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.194 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.195 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.195 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.195 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.196 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.196 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.196 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.197 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.197 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.197 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.198 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.198 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.198 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.199 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.199 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.199 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.200 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.200 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.200 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.202 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.202 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.203 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.203 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.203 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.205 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.205 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.205 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.206 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.206 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.206 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.207 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.207 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.207 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.208 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.208 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.209 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.209 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.210 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.210 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.211 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.211 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.212 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.212 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.212 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.213 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.213 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.214 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.214 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.214 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.215 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.215 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.215 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.216 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.216 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.216 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.217 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.217 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.218 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.218 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.218 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.220 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.220 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.221 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.221 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.221 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.222 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.222 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.223 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.223 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.223 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.224 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.224 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.224 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.225 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.225 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.227 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.228 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.228 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.229 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.229 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.230 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.230 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.230 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.231 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.231 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.231 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.232 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.232 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.233 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.233 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.234 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.235 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.236 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.236 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.236 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.238 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.239 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.240 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.241 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.241 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.242 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.242 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.242 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-15 23:26:39.248 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "from catboost import CatBoostClassifier\n",
    "\n",
    "# 加载模型和阈值配置\n",
    "try:\n",
    "    # 使用CatBoost加载.cbm模型\n",
    "    model = CatBoostClassifier()\n",
    "    model.load_model('shap_simplified_model.cbm')\n",
    "\n",
    "    with open('shap_simplified_model_threshold.json', 'r') as f:\n",
    "        threshold_config = json.load(f)\n",
    "    optimal_threshold = threshold_config['optimal_threshold']\n",
    "    feature_names = threshold_config['selected_features']  # 直接从JSON获取特征名称\n",
    "except Exception as e:\n",
    "    st.error(f\"Model loading failed: {str(e)}\")\n",
    "    st.error(f\"模型加载失败: {str(e)}\")\n",
    "    st.stop()\n",
    "\n",
    "# 构造 Streamlit 页面\n",
    "st.set_page_config(page_title=\"ICU Delirium Prediction Tool\", layout=\"wide\")\n",
    "\n",
    "# 标题部分 - 使用更大的字体和加粗\n",
    "st.markdown(\"<h1 style='text-align: center;'>Delirium Prediction Tool for Sepsis Patients in ICU</h1>\",\n",
    "            unsafe_allow_html=True)\n",
    "st.markdown(\"<h2 style='text-align: center;'>ICU脓毒症患者谵妄预测工具</h2>\", unsafe_allow_html=True)\n",
    "\n",
    "# 说明部分 - 使用加粗和稍大字体\n",
    "st.markdown(\"\"\"\n",
    "<div style=\"font-size: 1.1em;\">\n",
    "    <p><strong>Instructions:</strong><br>\n",
    "    Please enter the patient information below. The system will predict the probability of delirium occurring within 7 days after ICU admission for sepsis patients based on the externally validated SHAP interpretable model.<br>\n",
    "    All measured variables should use average values from the first 24 hours after ICU admission (except GCS which uses the lowest value within the first 24 hours).</p>\n",
    "\n",
    "    说明:\n",
    "    请输入以下的患者信息，系统将基于经外部验证的SHAP可解释性模型预测ICU脓毒症患者在ICU入科7天内发生谵妄的概率。\n",
    "    以下所有需测量的变量均需使用入ICU后第1天内的平均值数据（GCS为取入ICU1天内最低值）。\n",
    "</div>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# 定义特征分组和显示名称\n",
    "feature_groups = {\n",
    "    \"Basic Information / 基础情况\": [\n",
    "        (\"admission_age\", \"Age / 年龄 (years)\"),\n",
    "        (\"hypertension\", \"Hypertension / 高血压\")\n",
    "    ],\n",
    "    \"Bedside Signs / 床旁体征\": [\n",
    "        (\"sbp\", \"Systolic Blood Pressure (SBP) / 收缩压 (mmHg)\"),\n",
    "        (\"spo2\", \"Oxygen Saturation (SpO₂) / 血氧饱和度 (%)\"),\n",
    "        (\"temperature\", \"Temperature / 体温 (℃)\"),\n",
    "        (\"urineoutput_24h\", \"24-hour Urine Output / 24小时内尿量 (ml)\")\n",
    "    ],\n",
    "    \"Laboratory Tests / 实验室检查\": [\n",
    "        (\"platelet\", \"Platelet Count / 血小板计数 (K/μL)\"),\n",
    "        (\"creatinine\", \"Serum Creatinine / 血清肌酐 (mg/dL, 1mg/dL=88.4μmol/L)\"),\n",
    "        (\"potassium\", \"Potassium Concentration / 钾离子浓度 (mmol/L)\"),\n",
    "        (\"hemoglobin\", \"Hemoglobin / 血红蛋白 (g/dL)\")\n",
    "    ],\n",
    "    \"Clinical Scores / 临床评分\": [\n",
    "        (\"charlson_comorbidity_index\", \"Charlson Comorbidity Index / Charlson共病指数\"),\n",
    "        (\"gcs_min\", \"Glasgow Coma Scale (GCS) Min / 最低格拉斯哥昏迷评分\"),\n",
    "        (\"apsiii\", \"Acute Physiology Score III (APS III) / 急性生理评分III\"),\n",
    "        (\"oasis\", \"Oxford Acute Disease Severity Score (OASIS) / 牛津急性疾病严重程度评分\")\n",
    "    ]\n",
    "}\n",
    "\n",
    "# 构建输入表单\n",
    "user_input = {}\n",
    "with st.form(\"input_form\"):\n",
    "    # 为每个特征组创建部分\n",
    "    for group_name, features in feature_groups.items():\n",
    "        st.subheader(group_name)\n",
    "        cols = st.columns(2)  # 每组使用两列布局\n",
    "\n",
    "        for i, (raw_name, display_name) in enumerate(features):\n",
    "            col_idx = i % 2\n",
    "            with cols[col_idx]:\n",
    "                # 设置默认值和约束\n",
    "                default = 0.0\n",
    "                min_value = 0.0\n",
    "                max_value = None\n",
    "                step = 0.1\n",
    "\n",
    "                # 特殊处理某些特征\n",
    "                if \"hypertension\" in raw_name.lower():\n",
    "                    # 高血压 - 单选按钮\n",
    "                    hypertension_val = st.radio(\n",
    "                        display_name,\n",
    "                        options=[0, 1],\n",
    "                        index=0,\n",
    "                        horizontal=True,\n",
    "                        key=f\"input_{raw_name}\"\n",
    "                    )\n",
    "                    user_input[raw_name] = hypertension_val\n",
    "                elif \"gcs_min\" in raw_name.lower():\n",
    "                    # GCS评分 - 滑块\n",
    "                    gcs_val = st.slider(\n",
    "                        display_name,\n",
    "                        min_value=3,\n",
    "                        max_value=15,\n",
    "                        value=15,\n",
    "                        step=1,\n",
    "                        key=f\"input_{raw_name}\"\n",
    "                    )\n",
    "                    user_input[raw_name] = gcs_val\n",
    "                elif \"charlson_comorbidity_index\" in raw_name.lower():\n",
    "                    # Charlson共病指数 - 整数输入\n",
    "                    charlson_val = st.number_input(\n",
    "                        display_name,\n",
    "                        value=0,\n",
    "                        min_value=0,\n",
    "                        step=1,\n",
    "                        key=f\"input_{raw_name}\"\n",
    "                    )\n",
    "                    user_input[raw_name] = charlson_val\n",
    "                else:\n",
    "                    # 其他特征 - 常规数字输入\n",
    "                    # 设置特定特征的默认值和范围\n",
    "                    if \"admission_age\" in raw_name.lower():\n",
    "                        default = 60.0\n",
    "                        min_value = 0.0\n",
    "                        max_value = 120.0\n",
    "                    elif \"sbp\" in raw_name.lower():\n",
    "                        default = 120.0\n",
    "                        min_value = 0.0\n",
    "                        max_value = 300.0\n",
    "                    elif \"spo2\" in raw_name.lower():\n",
    "                        default = 98.0\n",
    "                        min_value = 0.0\n",
    "                        max_value = 100.0\n",
    "                    elif \"temperature\" in raw_name.lower():\n",
    "                        default = 36.5\n",
    "                        min_value = 30.0\n",
    "                        max_value = 45.0\n",
    "                    elif \"urineoutput_24h\" in raw_name.lower():\n",
    "                        default = 1000.0\n",
    "                    elif \"platelet\" in raw_name.lower():\n",
    "                        default = 200.0\n",
    "                    elif \"creatinine\" in raw_name.lower():\n",
    "                        default = 0.8\n",
    "                    elif \"potassium\" in raw_name.lower():\n",
    "                        default = 4.0\n",
    "                    elif \"hemoglobin\" in raw_name.lower():\n",
    "                        default = 12.0\n",
    "                    elif \"apsiii\" in raw_name.lower() or \"oasis\" in raw_name.lower():\n",
    "                        default = 30.0\n",
    "                        step = 1.0\n",
    "\n",
    "                    val = st.number_input(\n",
    "                        display_name,\n",
    "                        value=default,\n",
    "                        min_value=min_value,\n",
    "                        max_value=max_value,\n",
    "                        step=step,\n",
    "                        format=\"%.3f\",\n",
    "                        key=f\"input_{raw_name}\"\n",
    "                    )\n",
    "                    user_input[raw_name] = val\n",
    "\n",
    "    submitted = st.form_submit_button(\"🚀 Predict / 点击预测\")\n",
    "\n",
    "if submitted:\n",
    "    # 检查输入完整性\n",
    "    error_msgs = []\n",
    "    for group_features in feature_groups.values():\n",
    "        for raw_name, display_name in group_features:\n",
    "            if raw_name not in user_input or pd.isna(user_input[raw_name]):\n",
    "                error_msgs.append(f\"'{display_name}' requires a valid value\")\n",
    "                error_msgs.append(f\"'{display_name}' 需要提供有效值\")\n",
    "\n",
    "    if error_msgs:\n",
    "        st.error(\"**Input Errors / 输入错误:**\")\n",
    "        for msg in error_msgs:\n",
    "            st.error(msg)\n",
    "    else:\n",
    "        try:\n",
    "            # 准备输入数据\n",
    "            input_data = {}\n",
    "            for feat in feature_names:\n",
    "                input_data[feat] = user_input[feat]\n",
    "\n",
    "            input_df = pd.DataFrame([input_data])\n",
    "            input_df = input_df[feature_names]  # 确保特征顺序正确\n",
    "\n",
    "            # 使用模型预测概率\n",
    "            proba = model.predict_proba(input_df)[:, 1][0]\n",
    "\n",
    "            # 使用最佳阈值进行二分类预测\n",
    "            prediction = 1 if proba >= optimal_threshold else 0\n",
    "\n",
    "            st.divider()\n",
    "            st.markdown(\"### 🧠 Prediction Results / 模型预测结果\")\n",
    "\n",
    "            # 用醒目的方式显示概率\n",
    "            st.markdown(f\"\"\"\n",
    "            <div style=\"text-align: center;\">\n",
    "                <h2 style=\"color: {'#FF4B4B' if prediction == 1 else '#0F9D58'};\">\n",
    "                    {proba:.4f}\n",
    "                </h2>\n",
    "                <p>Predicted Probability / 预测概率</p>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "            if prediction == 1:\n",
    "                st.error(\"⚠️ **High Risk: Delirium Likely / 高风险：可能发生谵妄**\")\n",
    "                st.markdown(\"**Clinical Recommendations / 临床建议:**\")\n",
    "                st.markdown(\"1. Notify the attending physician immediately\\n   立即通知主治医师\")\n",
    "                st.markdown(\"2. Implement delirium prevention measures\\n   实施谵妄预防措施\")\n",
    "                st.markdown(\"3. Increase monitoring frequency\\n   增加监护频率\")\n",
    "            else:\n",
    "                st.success(\"✅ **Low Risk: Delirium Unlikely / 低风险：可能不会发生谵妄**\")\n",
    "                st.markdown(\"**Clinical Recommendations / 临床建议:**\")\n",
    "                st.markdown(\"1. Maintain routine monitoring\\n   维持常规监护\")\n",
    "                st.markdown(\"2. Observe changes in mental status\\n   观察精神状态变化\")\n",
    "                st.markdown(\"3. Conduct regular risk assessments\\n   定期评估风险\")\n",
    "\n",
    "            # 概率风险图\n",
    "            risk_levels = [0, 0.3, 0.7, 1.0]\n",
    "            labels = [\"Low Risk / 低风险\", \"Moderate Risk / 中度风险\", \"High Risk / 高风险\"]\n",
    "            current_level = next(i for i, level in enumerate(risk_levels) if proba < level) - 1\n",
    "\n",
    "            st.progress(proba, text=f\"Risk Level: {labels[current_level]}\")\n",
    "\n",
    "        except Exception as e:\n",
    "            st.error(f\"Prediction error: {str(e)}\")\n",
    "            st.error(f\"预测过程中发生错误: {str(e)}\")\n",
    "            st.info(\"Please check the input data format / 请检查输入数据的格式是否正确\")\n",
    "\n",
    "# 添加模型信息侧边栏 - 全部使用英文\n",
    "with st.sidebar:\n",
    "    st.header(\"ℹ️ Model Information\")\n",
    "    st.markdown(f\"**Algorithm**: CatBoost (SHAP Simplified)\")\n",
    "    st.markdown(f\"**Number of Features**: {len(feature_names)}\")\n",
    "    st.markdown(f\"**Optimal Threshold**: {optimal_threshold:.4f}\")\n",
    "\n",
    "    st.divider()\n",
    "    st.markdown(\"\"\"\n",
    "    **Development Notes**:  \n",
    "    This tool was developed based on MIMIC database (version 3.1) research data, using SHAP feature selection method to identify the most important 14 predictors from the 51 original features after data feature engineering, and externally validated using eICU-CRD (version 2.0) data.\n",
    "    \"\"\")\n",
    "\n",
    "    # 添加研究团队信息\n",
    "    st.markdown(\"### Development Team\")\n",
    "    st.caption(\"- Principal Investigator & Data Analyst: Dr. Jianyuan Liu\")\n",
    "    st.caption(\"- Clinical Consultant: Prof. Shubin Guo\")\n",
    "\n",
    "    # 添加文件下载功能\n",
    "    st.divider()\n",
    "    st.markdown(\"### Download Resources\")\n",
    "    try:\n",
    "        with open(\"shap_simplified_model.cbm\", \"rb\") as file:\n",
    "            st.download_button(\n",
    "                label=\"Download Model\",\n",
    "                data=file,\n",
    "                file_name=\"delirium_prediction_model.cbm\",\n",
    "                mime=\"application/octet-stream\"\n",
    "            )\n",
    "    except:\n",
    "        st.warning(\"Model file not available for download\")\n",
    "\n",
    "    try:\n",
    "        with open(\"shap_simplified_model_threshold.json\", \"rb\") as file:\n",
    "            st.download_button(\n",
    "                label=\"Download Config\",\n",
    "                data=file,\n",
    "                file_name=\"model_config.json\",\n",
    "                mime=\"application/json\"\n",
    "            )\n",
    "    except:\n",
    "        st.warning(\"Config file not available for download\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab4ca0b9-6294-464b-9c7a-7af9f621a5f8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
